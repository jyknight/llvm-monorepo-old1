###############################################################################
#   build system data
###############################################################################
PROJECT_NAME := @PACKAGE_NAME@
PROJ_VERSION := @PACKAGE_VERSION@

realpath=$(shell cd $(1); $(PWD))

PROJ_SRC_ROOT := $(subst //,/,@abs_top_srcdir@)
PROJ_OBJ_ROOT := $(subst //,/,@abs_top_builddir@)
PROJ_OBJ_CWD:= $(call realpath, .)
PROJ_SRC_CWD:= $(call realpath, $(patsubst $(PROJ_OBJ_ROOT)%,$(PROJ_SRC_ROOT)%,$(PROJ_OBJ_CWD)))

CONFIG_FILES=@ac_config_files@
CONFIG_HEADERS=@ac_config_headers@

###############################################################################
#   options
###############################################################################
MMTK_PLAN = @MMTK_PLAN@

CLASSPATH_IMPL = @classpathimpl@

ifeq ($(CLASSPATH_IMPL),gnuclasspath)
	CLASSPATH_DIR = GNUClasspath
else
	ifeq ($(CLASSPATH_IMPL),openjdk)
		CLASSPATH_DIR = OpenJDK
	else
$(error Unsupported classpath implementation "$(CLASSPATH_IMPL)")
	endif
endif

OPTIMIZED=@OPTIMIZED@
DEBUG=@DEBUG@
ASSERT=@ASSERT@

JAVAC_TARGET		:= 1.5

GLIBJ = @classpathglibj@

###############################################################################
#   host dependent configurations
###############################################################################
SHOPT=@SHOPT@
LDOPT=@LDOPT@
EXEEXT=@EXEEXT@
SHLIBEXT=@SHLIBEXT@

WITH_64 = @WITH_64@

###############################################################################
#   binaries
###############################################################################
LLVM_CONFIG=@LLVM_CONFIG@
LLVM_BIN=$(shell $(LLVM_CONFIG) --bindir)
CLANG=$(LLVM_BIN)/clang
CLANGXX=$(LLVM_BIN)/clang++
LLVMAS=$(LLVM_BIN)/llvm-as
LLC=$(LLVM_BIN)/llc
LOPT=$(LLVM_BIN)/opt
LLVMLINK=$(LLVM_BIN)/llvm-link

ANT=@ANT@
JAVAC=@JAVAC@
ZIP=@ZIP@
MV=@MV@
RM=@RM@
CP=@CP@
Archive=@AR@ cru
Ranlib=@RANLIB@
NM=@NM@
LD=@LD@
MKDIR=mkdir -p @MKDIR@
TOUCH=@TOUCH@
GREP=@GREP@

ENABLE_OPTIMIZED=1

# Using conditional compilation for now, until a proper interface/architecture
# is figured out and implemented.
ifeq (@classpathimpl@,openjdk)
COMMON_CFLAGS+=-DUSE_OPENJDK
endif

ifeq ($(ENABLE_OPTIMIZED),1)
	LLC_CPP_FLAGS		:=
	LLC_ASM_FLAGS		:= -O=2 -disable-debug-info-print
	LLC_GLIBJ_FLAGS		:= -disable-debug-info-print

	OPT_BC_WITH_GC_FLAGS	:= -std-compile-opts -strip-debug
	OPT_MMTK_FLAGS		:= -std-compile-opts -strip-debug
	OPT_VMJC_FLAGS		:= -std-compile-opts -strip-debug

	PRECOMPILER_FLAGS	:= -O3

	VMJC_MMTK_FLAGS		:= -std-compile-opts
	VMJC_GLIBJ_FLAGS	:= -std-compile-opts
else
	LLC_CPP_FLAGS		:= -O=0
	LLC_ASM_FLAGS		:= -O=0 -asm-verbose
	LLC_GLIBJ_FLAGS		:=

	OPT_BC_WITH_GC_FLAGS	:= -inline
	OPT_MMTK_FLAGS		:=
	OPT_VMJC_FLAGS		:= -std-compile-opts

	VMJC_MMTK_FLAGS		:=
	VMJC_GLIBJ_FLAGS	:= -jit-emit-debug -std-compile-opts

	PRECOMPILER_FLAGS	:=
endif

include $(PROJ_SRC_ROOT)/Makefile.rules
