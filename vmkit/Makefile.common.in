PROJECT_NAME := @PACKAGE_NAME@
PROJ_VERSION := @PACKAGE_VERSION@

realpath=$(shell cd $(1); $(PWD))

PROJ_SRC_ROOT := $(subst //,/,@abs_top_srcdir@)
PROJ_OBJ_ROOT := $(subst //,/,@abs_top_builddir@)
PROJ_OBJ_CWD:= $(call realpath, .)
PROJ_SRC_CWD:= $(call realpath, $(patsubst $(PROJ_OBJ_ROOT)%,$(PROJ_SRC_ROOT)%,$(PROJ_OBJ_CWD)))

MMTK_PLAN = @MMTK_PLAN@
MMTK_PLAN_HEADER = @MMTK_PLAN_HEADER@
WITH_64 = @WITH_64@
ANT = @ANT@
JAVAC= @JAVAC@
ZIP =@ZIP@

CLASSPATH_IMPL = @classpathimpl@

ifeq ($(CLASSPATH_IMPL),gnuclasspath)
	CLASSPATH_DIR = GNUClasspath
else
	ifeq ($(CLASSPATH_IMPL),openjdk)
		CLASSPATH_DIR = OpenJDK
	else
$(error Unsupported classpath implementation "$(CLASSPATH_IMPL)")
	endif
endif

LLVM_CONFIG=@LLVM_CONFIG@

SHOPT=@SHOPT@
LDOPT=@LDOPT@
EXEEXT=@EXEEXT@
SHLIBEXT=@SHLIBEXT@

OPTIMIZED=@OPTIMIZED@
DEBUG=@DEBUG@
ASSERT=@ASSERT@

JAVAC_TARGET		:= 1.5

ENABLE_OPTIMIZED=1

GLIBJ = @classpathglibj@

# Using conditional compilation for now, until a proper interface/architecture
# is figured out and implemented.
ifeq (@classpathimpl@,openjdk)
COMMON_CFLAGS+=-DUSE_OPENJDK
endif

CONFIG_FILES=@ac_config_files@
CONFIG_HEADERS=@ac_config_headers@

ifeq ($(ENABLE_OPTIMIZED),1)
	LLC_CPP_FLAGS		:=
	LLC_ASM_FLAGS		:= -O=2 -disable-debug-info-print
	LLC_GLIBJ_FLAGS		:= -disable-debug-info-print

	OPT_BC_WITH_GC_FLAGS	:= -std-compile-opts -strip-debug
	OPT_MMTK_FLAGS		:= -std-compile-opts -strip-debug
	OPT_VMJC_FLAGS		:= -std-compile-opts -strip-debug

	PRECOMPILER_FLAGS	:= -O3

	VMJC_MMTK_FLAGS		:= -std-compile-opts
	VMJC_GLIBJ_FLAGS	:= -std-compile-opts
else
	LLC_CPP_FLAGS		:= -O=0
	LLC_ASM_FLAGS		:= -O=0 -asm-verbose
	LLC_GLIBJ_FLAGS		:=

	OPT_BC_WITH_GC_FLAGS	:= -inline
	OPT_MMTK_FLAGS		:=
	OPT_VMJC_FLAGS		:= -std-compile-opts

	VMJC_MMTK_FLAGS		:=
	VMJC_GLIBJ_FLAGS	:= -jit-emit-debug -std-compile-opts

	PRECOMPILER_FLAGS	:=
endif

include $(PROJ_SRC_ROOT)/Makefile.rules
