ifdef NO
ifeq ($(OPTIMIZED),1)
  BUILD_NAME:=Release
  ifeq ($(DEBUG),1)
    BUILD_NAME:=$(BUILD_NAME)+Debug
  endif
  ifeq ($(ASSERT),1)
    BUILD_NAME:=$(BUILD_NAME)+Assert
  endif
else
  ifeq ($(DEBUG),1)
    BUILD_NAME:=Debug
		ifeq ($(ASSERT),1)
	   	BUILD_NAME:=$(BUILD_NAME)+Assert
		endif
  else
		ifeq ($(ASSERT),1)
	   	BUILD_NAME:=Assert
		else
	   	BUILD_NAME:=Unoptimized
		endif
  endif
endif
else
BUILD_NAME=Release+Asserts
endif

###############################################################################
#   Build directories
###############################################################################
BINDIR=$(PROJ_OBJ_ROOT)/$(BUILD_NAME)/bin
LIBDIR=$(PROJ_OBJ_ROOT)/$(BUILD_NAME)/lib
INCDIR=$(PROJ_OBJ_ROOT)/$(BUILD_NAME)/include
BUILD_DIR=$(BUILD_NAME)

%/.dir:
	mkdir -p $(dir $@) && touch $@

clean::
	$(Echo) "Cleaning compilation files"
	$(Verb) rm -Rf $(BUILD_DIR)

distclean::
	$(Echo) "Cleaning build files"
	$(Verb) rm -Rf $(BINDIR) $(LIBDIR) $(INCDIR)

ifeq ($(DEBUG),1)
  COMMON_CFLAGS+=-g
endif

LLVM_BIN=$(shell $(LLVM_CONFIG) --bindir)

CLANG=$(LLVM_BIN)/clang
CLANGXX=$(LLVM_BIN)/clang++
LLVMAS=$(LLVM_BIN)/llvm-as
LLC=$(LLVM_BIN)/llc
LOPT=$(LLVM_BIN)/opt
LLVMLINK=$(LLVM_BIN)/llvm-link
MV=mv
LLVMCC=$(LLVM_BIN)/clang
Archive=ar cru
Ranlib=ranlib
RM=rm
NM=nm
LD=ld
LArchive=$(LLVM_BIN)/llvm-ar rcsf

###############################################################################
#   Linking options
###############################################################################
USEDLIBS:=$(patsubst %,$(LibDir)/lib%,$(USEDLIBS))

#
#
# OLD BUILD SYSTEM
#
#
VMJC      := $(ToolDir)/vmjc$(EXEEXT)

# Set the LLVM build file location 
LLVMBuildTool   := $(LLVM_SRC_ROOT)/utils/llvm-build/llvm-build

###############################################################################
# VMKIT_RUNTIME: Provide rules to build a .cpp file with LLVM instructions
#                generating code matching the .ll files.
###############################################################################

ifdef VMKIT_RUNTIME

.PRECIOUS: LLVMRuntime.inc

LLVMRuntime.inc : $(LLVMAS) $(LLC) $(VMKIT_RUNTIME)
	$(Echo) "**[7] Building LLVM runtime $(LLC_CPP_FLAGS)"
	$(Verb) cat $(VMKIT_RUNTIME) | $(LLVMAS) -o - | $(LLC) -march=cpp -cppgen=contents -o $@

all-local:: LLVMRuntime.inc

clean-local::
	$(Verb) $(RM) -f LLVMRuntime.inc

endif

###############################################################################
# RUN_ANT: Provide rules to build MMTk into a .o file and inlining facilities.
###############################################################################

ifdef RUN_ANT

MMTkLib = $(LibDir)/libFinalMMTk.a

ifeq ($(shell [ ! -e $(MMTkLib) ] && echo "1"), 1)
  COMPILE_MMTK = 1
endif

ifeq ($(COMPILE_MMTK), 1)
all::
	$(Verb) $(ANT) -buildfile $(PROJ_OBJ_ROOT)/mmtk/java/build.xml
	$(Echo) "**[12] Building $(BuildMode) $(JARNAME).jar $(notdir $@) $(OPT_MMTK_FLAGS)"
	$(Verb) $(LOPT) -load=$(LibDir)/JITGCPass$(SHLIBEXT) $(OPT_MMTK_FLAGS) -JITGCPass -f $(LibDir)/MMTKAlloc.bc -o $(LibDir)/MMTKAlloc.bc
	$(Verb) $(VMJC) $(VMJC_MMTK_FLAGS) -load=$(LibDir)/MMTKRuntime$(SHLIBEXT) -load=$(LibDir)/MMTKMagic$(SHLIBEXT) -LowerMagic $(PROJ_OBJ_ROOT)/mmtk/java/$(JARNAME).jar -disable-exceptions -disable-cooperativegc -with-clinit=org/mmtk/vm/VM,org/mmtk/utility/*,org/mmtk/policy/*,org/j3/config/* -Dmmtk.hostjvm=org.j3.mmtk.Factory -o $(JARNAME).bc -Dmmtk.properties=$(PROJ_SRC_ROOT)/mmtk/java/vmkit.properties -disable-stubs -assume-compiled
	$(Verb) $(LOPT) -load=$(LibDir)/MMTKMagic$(SHLIBEXT) $(OPT_MMTK_FLAGS) -LowerJavaRT -f $(JARNAME).bc -o $(JARNAME)-optimized.bc
	$(Verb) $(LLVMLINK) -o $(LibDir)/FinalMMTk.bc $(LibDir)/MMTKAlloc.bc $(JARNAME)-optimized.bc $(LibDir)/MMTKRuntime.bc
	$(Verb) $(LOPT) $(LibDir)/FinalMMTk.bc -load=$(LibDir)/StaticGCPass$(SHLIBEXT) $(OPT_MMTK_FLAGS) -StaticGCPass -o $(LibDir)/FinalMMTk.bc
	$(Verb) $(MKDIR) $(ObjDir)
	$(Verb) $(LLC) $(LLC_ASM_FLAGS) -disable-fp-elim -disable-cfi -load=$(LibDir)/StaticGCPrinter$(SHLIBEXT) $(LibDir)/FinalMMTk.bc -o $(ObjDir)/FinalMMTk.s
	$(Verb) $(GREP) -v '\.loc[^0-9]\+[0-9]\+ 0' $(ObjDir)/FinalMMTk.s > $(ObjDir)/FinalMMTk.s.remove_invalid_dot_loc
	$(Verb) $(MV) -f $(ObjDir)/FinalMMTk.s.remove_invalid_dot_loc $(ObjDir)/FinalMMTk.s
	$(Verb) $(LLVMCC) -c $(ObjDir)/FinalMMTk.s -o $(ObjDir)/FinalMMTk.o
	$(Verb) $(Archive) $(LibDir)/libFinalMMTk.a $(ObjDir)/FinalMMTk.o
	$(Verb) $(Ranlib) $(LibDir)/libFinalMMTk.a
	$(Verb) $(LLC) $(LLC_CPP_FLAGS) -march=cpp -cppgen=function -cppfor=VTgcmalloc $(LibDir)/FinalMMTk.bc -o $(PROJ_SRC_ROOT)/mmtk/inline/MMTkMallocInline.inc
	$(Verb) $(LLC) $(LLC_CPP_FLAGS) -march=cpp -cppgen=function -cppfor=fieldWriteBarrier $(LibDir)/FinalMMTk.bc -o $(PROJ_SRC_ROOT)/mmtk/inline/MMTkFieldWriteInline.inc
	$(Verb) $(LLC) $(LLC_CPP_FLAGS) -march=cpp -cppgen=function -cppfor=arrayWriteBarrier $(LibDir)/FinalMMTk.bc -o $(PROJ_SRC_ROOT)/mmtk/inline/MMTkArrayWriteInline.inc
	$(Verb) $(LLC) $(LLC_CPP_FLAGS) -march=cpp -cppgen=function -cppfor=nonHeapWriteBarrier $(LibDir)/FinalMMTk.bc -o $(PROJ_SRC_ROOT)/mmtk/inline/MMTkNonHeapWriteInline.inc
endif

clean-local::
	$(Verb) $(RM) -rf classes $(JARNAME).jar $(JARNAME).bc $(JARNAME)-optimized.bc $(ObjDir)
endif

###############################################################################
# MODULE_WITH_GC: Provide rules for building .cpp files into an archive with
#                 GC symbol information.
###############################################################################

ifdef MODULE_WITH_GC

ObjectsBCWithGC   := $(BaseNameSources:%=$(ObjDir)/%_gc.bc)
ObjectsWithGC     := $(BaseNameSources:%=$(ObjDir)/%_gc.o)
AModule           := $(LibDir)/lib$(MODULE_WITH_GC).a

$(ObjectsBCWithGC): $(ObjDir)/%_gc.bc: $(ObjDir)/%.bc $(LOPT)
	$(Echo) "**[4] Compiling $*.bc to $*.bc (gc) for $(BuildMode) build (bytecode)" # $(OPT_BC_WITH_GC_FLAGS)
	$(Verb) $(LOPT) $< -load=$(VMKIT_OBJ_ROOT)/$(BuildMode)/lib/StaticGCPass$(SHLIBEXT) -StaticGCPass -o $@

$(ObjectsWithGC): $(ObjDir)/%_gc.o: $(ObjDir)/%_gc.bc $(LLC)
	$(Echo) "**[5] Compiling $*.bc to $*.o for $(BuildMode) build" # $(LLC_ASM_FLAGS)
	$(Verb) $(LLC) -filetype=obj -disable-cfi -disable-fp-elim -load=$(VMKIT_OBJ_ROOT)/$(BuildMode)/lib/StaticGCPrinter$(SHLIBEXT) $< -o $@

$(AModule): $(ObjectsWithGC) $(LibDir)/.dir
	$(Echo) "**[6] Building $(BuildMode) Archive Library $(notdir $@)"
	-$(Verb) $(RM) -f $@
	$(Verb) $(Archive) $@ $(ObjectsWithGC)
	$(Verb) $(Ranlib) $@

all-local:: $(AModule)

clean-local::
	-$(Verb) $(RM) -f $(AModule) $(ObjectsBCWithGC) $(ObjectsSWithGC) $(ObjectsWithGC)

endif

###############################################################################
# BUILD_FRAMETABLE: Generate files for easy access of frametables at runtime.
###############################################################################

ifdef BUILD_FRAMETABLE

FrametablesExterns.inc: $(ProjLibsPaths)
	$(Verb) $(NM) $(ProjLibsPaths) | grep __frametable | sed 's/\([a-f0-9]*\) \([a-zA-Z]*\) _*\([a-zA-Z0-9_]*\)/extern "C" CompiledFrames \3;/' > $@

FrametablesSymbols.inc: $(ProjLibsPaths)
	$(Verb) $(NM) $(ProjLibsPaths) | grep __frametable | sed 's/\([a-f0-9]*\) \([a-zA-Z]*\) _*\([a-zA-Z0-9_]*\)/\&\3,/' > $@

all-local:: FrametablesExterns.inc FrametablesSymbols.inc

clean-local::
	-$(Verb) $(RM) -f FrametablesExterns.inc FrametablesSymbols.inc

endif

###############################################################################
# COMPILE_OPENJDK_ZIP: Build the specified java sources and zip them up
###############################################################################
ifeq ($(COMPILE_OPENJDK_ZIP), 1)

# Some variables
VMKIT_OPENJDK_ZIP=$(PROJ_OBJ_DIR)/vmkit-openjdk.zip
CLASSES_DIR=$(PROJ_OBJ_DIR)/classes

all-local:: $(VMKIT_OPENJDK_ZIP)
clean-local::
	-$(Verb) $(RM) -f $(CLASSES_DIR) $(VMKIT_OPENJDK_ZIP)


$(VMKIT_OPENJDK_ZIP): $(addprefix $(PROJ_SRC_DIR)/,$(OPENJDK_JAVA_SOURCES))
	$(Echo) "**[13] Building OpenJDK java sources into zip"
	-$(Verb) $(RM) -rf $@ $(CLASSES_DIR)
	$(Verb) $(MKDIR) $(CLASSES_DIR)
	$(Verb) $(JAVAC) $^ -d $(CLASSES_DIR)
	cd $(CLASSES_DIR) && $(ZIP) -qr $(VMKIT_OPENJDK_ZIP) .

endif




#
#
#   NEW BUILD SYSTEM
#
#
#-I$(BUILD_DIR) 
INCLUDES+=-I. -I$(PROJ_SRC_ROOT)/include -I$(PROJ_SRC_ROOT)/lib/vmkit/MMTk \
	-I$(PROJ_SRC_ROOT)/include/j3 \
	-I$(PROJ_SRC_ROOT)/lib/j3/ClassLib/$(CLASSPATH_DIR) \
	-I$(PROJ_SRC_ROOT)/lib/j3/ClassLib/ \
	-I$(PROJ_SRC_ROOT)/lib/j3/Compiler/ \
	-I$(PROJ_SRC_ROOT)/lib/j3/VMCore/ \
	-I$(PROJ_SRC_ROOT)/lib/j3/LLVMRuntime/

# should remove no-unused-variable                                                                                                         
WARN_CFLAGS=  -Wall -Wno-long-long -Wno-variadic-macros -Wno-unused-private-field -Wno-unused-variable
COMMON_CFLAGS+=  -O0 $(INCLUDES) -fno-strict-aliasing -fno-omit-frame-pointer  -ansi -pedantic $(WARN_CFLAGS)

CFLAGS+=$(COMMON_CFLAGS) `$(LLVM_CONFIG) --cflgas`
CXXFLAGS+=$(COMMON_CFLAGS) `$(LLVM_CONFIG) --cxxflags`
MY_LDFLAGS+=`$(LLVM_CONFIG) --ldflags` $(LDOPT)
MY_LIBS+=`$(LLVM_CONFIG) --libs` -lz

$(ToolBuildPath): $(ObjectsO) $(USEDLIBS)
	$(Echo) '**[30] Linking $(BuildMode) executable $(TOOLNAME) $(StripWarnMsg)'
	$(Verb) $(CLANGXX) -o $@ $(ObjectsO) $(USEDLIBS) $(MY_LIBS) $(MY_LDFLAGS) 
#	$(Verb) $(Link) -o $@ $(TOOLLINKOPTS) $(ObjectsO) $(USEDLIBS) $(TOOLLINKOPTSB) $(MY_LIBS) $(MY_LDFLAGS)

$(LibName.SO): $(ObjectsO) $(ProjLibsPaths) $(LLVMLibsPaths) $(SharedLibDir)/.dir
	$(Echo) "**[20] Linking $(BuildMode) $(SharedLibKindMessage) $(notdir $@)"
	$(Verb) $(CLANGXX) -O0 -o $@ $(SHOPT) -Wl,-R -Wl,'$ORIGIN' -shared $(ObjectsO)

$(LibName.BCA): $(ObjectsBC) $(LibDir)/.dir $(LLVMToolDir)/llvm-ar
	$(Echo) "**[22] Building $(BuildMode) Bytecode Archive $(notdir $@)"
	$(Verb) $(RM) -f $@
	$(Verb) $(LArchive) $@ $(ObjectsBC)

$(ObjectsBC): $(ObjDir)/%.bc: %.cpp $(ObjDir)/.dir $(BUILT_SOURCES)
	$(Echo) "**[1] Compiling $*.cpp for $(BuildMode) build (bytecode)"
	$(Verb) $(CLANGXX) -S $(CXXFLAGS) -emit-llvm -c "$<" -o $@

$(ObjDir)/%.ll: %.cpp $(ObjDir)/.dir $(BUILT_SOURCES) $(LLVMCXX)
	$(Echo) "**[2] Compiling $*.cpp for $(BuildMode) build (bytecode)"
	$(Verb) $(CLANGXX) -S $(CXXFLAGS) -emit-llvm -c "$<" -o $@

$(ObjDir)/%.o: %.cpp $(ObjDir)/.dir $(BUILT_SOURCES) $(PROJ_MAKEFILE)
	$(Echo) "**[3] Compiling $*.cpp for $(BuildMode) build" $(PIC_FLAG)
	$(Verb) $(CLANGXX) $(CXXFLAGS) -c "$<" -o $@
