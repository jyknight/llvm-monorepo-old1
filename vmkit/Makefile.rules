.PHONY: all all-subs build-module bootstrap tidy clean distclean local-clean
.SECONDARY:
.SUFFIXES:

ifdef NO
ifeq ($(OPTIMIZED),1)
  BUILD_NAME:=Release
  ifeq ($(DEBUG),1)
    BUILD_NAME:=$(BUILD_NAME)+Debug
  endif
  ifeq ($(ASSERT),1)
    BUILD_NAME:=$(BUILD_NAME)+Assert
  endif
else
  ifeq ($(DEBUG),1)
    BUILD_NAME:=Debug
		ifeq ($(ASSERT),1)
	   	BUILD_NAME:=$(BUILD_NAME)+Assert
		endif
  else
		ifeq ($(ASSERT),1)
	   	BUILD_NAME:=Assert
		else
	   	BUILD_NAME:=Unoptimized
		endif
  endif
endif
else
BUILD_NAME=Release+Asserts
endif

###############################################################################
#   Build directories
###############################################################################
BIN_DIR=$(PROJ_OBJ_ROOT)/$(BUILD_NAME)/bin
LIB_DIR=$(PROJ_OBJ_ROOT)/$(BUILD_NAME)/lib
BUILD_DIR=$(BUILD_NAME)

LLVM_BIN=$(shell $(LLVM_CONFIG) --bindir)

CLANG=$(LLVM_BIN)/clang
CLANGXX=$(LLVM_BIN)/clang++
LLVMAS=$(LLVM_BIN)/llvm-as
LLC=$(LLVM_BIN)/llc
LOPT=$(LLVM_BIN)/opt
LLVMLINK=$(LLVM_BIN)/llvm-link
MV=mv
LLVMCC=$(LLVM_BIN)/clang
Archive=ar cru
Ranlib=ranlib
RM=rm
NM=nm
LD=ld
LArchive=$(LLVM_BIN)/llvm-ar rcsf
MKDIR=mkdir -p
TOUCH=touch

PREPARE_CODE=$(LIB_DIR)/prepare-code$(SHLIBEXT)

%/.dir:
	$(Verb) $(MKDIR) $(dir $@) && $(TOUCH) $@

clean::
	$(Echo) "Cleaning compilation files"
	$(Verb) $(RM) -Rf $(BUILD_DIR)

distclean::
	$(Echo) "Cleaning build files"
	$(Verb) $(RM) -Rf $(BIN_DIR) $(LIB_DIR) $(INCDIR)

ifeq ($(DEBUG),1)
  COMMON_CFLAGS+=-g
endif

###############################################################################
#   Autodependencies
###############################################################################
#SELF=$(PROJ_SRC_ROOT)/Makefile.rules Makefile $(PROJ_SRC_ROOT)/Makefile.common

###############################################################################
#   Main targets
###############################################################################
ifdef TOOL
MODULE=$(TOOL)

all:: $(BIN_DIR)/$(TOOL)$(EXEEXT)
endif

ifdef LIBRARY
MODULE=$(LIBRARY)

all:: $(LIB_DIR)/$(LIBRARY)$(SHLIBEXT)
endif

###############################################################################
#   Module
###############################################################################
ifdef MODULE_WITH_GC
MODULE=$(MODULE_WITH_GC)
WITH_GC=-gc
endif

ifdef MODULE

MODULE_A=$(LIB_DIR)/lib$(MODULE).a
MODULE_BC=$(LIB_DIR)/$(MODULE).bc

BC_FILES+=$(patsubst %.c,$(BUILD_DIR)/%$(WITH_GC).bc,$(wildcard *.c)) \
          $(patsubst %.cc,$(BUILD_DIR)/%$(WITH_GC).bc,$(wildcard *.cc)) \
          $(patsubst %.cpp,$(BUILD_DIR)/%$(WITH_GC).bc,$(wildcard *.cpp)) \
          $(patsubst %,$(BUILD_DIR)/%$(WITH_GC).bc,$(GEN))

OBJ_FILES=$(patsubst %.bc,%.o,$(BC_FILES))

all:: $(MODULE_A)

ifdef NEED_BC
all:: $(MODULE_BC)
endif

ifdef BUILD_FRAMETABLE

## have to remove this symbol (used elsewere)
FRAMETABLES=FrametablesExterns.inc FrametablesSymbols.inc
DEP_FRAMETABLES=$(patsubst %,$(LIB_DIR)/lib%.a,$(USE))

FrametablesExterns.inc: $(DEP_FRAMETABLES) $(SELF)
	$(Verb) $(NM) $(DEP_FRAMETABLES) | grep __frametable | sed 's/\([a-f0-9]*\) \([a-zA-Z]*\) _*\([a-zA-Z0-9_]*\)/extern "C" CompiledFrames \3;/' > $@

FrametablesSymbols.inc: $(DEP_FRAMETABLES) $(SELF)
	$(Verb) $(NM) $(DEP_FRAMETABLES) | grep __frametable | sed 's/\([a-f0-9]*\) \([a-zA-Z]*\) _*\([a-zA-Z0-9_]*\)/\&\3,/' > $@

clean-local::
	-$(Verb) $(RM) -f FrametablesExterns.inc FrametablesSymbols.inc

endif

$(MODULE_A): $(OBJ_FILES) $(SELF) $(LIB_DIR)/.dir
	$(Echo) "Building archive '$(notdir $@)'"
	-$(Verb) $(RM) -f $@
	$(Verb) $(Archive) $@ $(OBJ_FILES)
	$(Verb) $(Ranlib) $@

$(MODULE_BC): $(BC_FILES) $(SELF) $(LIB_DIR)/.dir
	$(Echo) "Building module '$(notdir $@)'"
	$(Verb) $(LLVMLINK) $(BC_FILES) -o $(MODULE_BC)

endif

###############################################################################
#   Linking
###############################################################################
DEP_LIBS=$(patsubst %,$(LIB_DIR)/lib%.a,$(USE) $(USE))

$(BIN_DIR)/$(TOOL)$(EXEEXT): $(MODULE_A) $(DEP_LIBS) $(SELF) $(BIN_DIR)/.dir
	$(Echo) "Linking executable '$(notdir $@)'"
	$(Verb) $(CLANGXX) -o $@ $(MODULE_A) $(DEP_LIBS) $(MY_LIBS) $(MY_LDFLAGS) 

$(LIB_DIR)/$(LIBRARY)$(SHLIBEXT): $(MODULE_A) $(DEP_LIBS) $(SELF) $(LIB_DIR)/.dir
	$(Echo) "Linking shared library '$(notdir $@)'"
	$(Verb) $(CLANGXX) -O0 -o $@ $(SHOPT) -shared -Wl,--whole-archive $(MODULE_A) -Wl,--no-whole-archive $(DEP_LIBS)

#
#
# OLD BUILD SYSTEM
#
#
VMJC      := $(ToolDir)/vmjc$(EXEEXT)

# Set the LLVM build file location 
LLVMBuildTool   := $(LLVM_SRC_ROOT)/utils/llvm-build/llvm-build

###############################################################################
# VMKIT_RUNTIME: Provide rules to build a .cpp file with LLVM instructions
#                generating code matching the .ll files.
###############################################################################

ifdef VMKIT_RUNTIME

.PRECIOUS: LLVMRuntime.inc

LLVMRuntime.inc : $(LLVMAS) $(LLC) $(VMKIT_RUNTIME)
	$(Echo) "**[7] Building LLVM runtime $(LLC_CPP_FLAGS)"
	$(Verb) cat $(VMKIT_RUNTIME) | $(LLVMAS) -o - | $(LLC) -march=cpp -cppgen=contents -o $@

all-local:: LLVMRuntime.inc

clean-local::
	$(Verb) $(RM) -f LLVMRuntime.inc

endif

###############################################################################
# RUN_ANT: Provide rules to build MMTk into a .o file and inlining facilities.
###############################################################################

ifdef RUN_ANT

MMTkLib = $(LibDir)/libFinalMMTk.a

ifeq ($(shell [ ! -e $(MMTkLib) ] && echo "1"), 1)
  COMPILE_MMTK = 1
endif

ifeq ($(COMPILE_MMTK), 1)
all::
	$(Verb) $(ANT) -buildfile $(PROJ_OBJ_ROOT)/mmtk/java/build.xml
	$(Echo) "**[12] Building $(BuildMode) $(JARNAME).jar $(notdir $@) $(OPT_MMTK_FLAGS)"
	$(Verb) $(LOPT) -load=$(LibDir)/JITGCPass$(SHLIBEXT) $(OPT_MMTK_FLAGS) -JITGCPass -f $(LibDir)/MMTKAlloc.bc -o $(LibDir)/MMTKAlloc.bc
	$(Verb) $(VMJC) $(VMJC_MMTK_FLAGS) -load=$(LibDir)/MMTKRuntime$(SHLIBEXT) -load=$(LibDir)/MMTKMagic$(SHLIBEXT) -LowerMagic $(PROJ_OBJ_ROOT)/mmtk/java/$(JARNAME).jar -disable-exceptions -disable-cooperativegc -with-clinit=org/mmtk/vm/VM,org/mmtk/utility/*,org/mmtk/policy/*,org/j3/config/* -Dmmtk.hostjvm=org.j3.mmtk.Factory -o $(JARNAME).bc -Dmmtk.properties=$(PROJ_SRC_ROOT)/mmtk/java/vmkit.properties -disable-stubs -assume-compiled
	$(Verb) $(LOPT) -load=$(LibDir)/MMTKMagic$(SHLIBEXT) $(OPT_MMTK_FLAGS) -LowerJavaRT -f $(JARNAME).bc -o $(JARNAME)-optimized.bc
	$(Verb) $(LLVMLINK) -o $(LibDir)/FinalMMTk.bc $(LibDir)/MMTKAlloc.bc $(JARNAME)-optimized.bc $(LibDir)/MMTKRuntime.bc
	$(Verb) $(LOPT) $(LibDir)/FinalMMTk.bc -load=$(PREPARE_CODE) $(OPT_MMTK_FLAGS) -StaticGCPass -o $(LibDir)/FinalMMTk.bc
	$(Verb) $(MKDIR) $(ObjDir)
	$(Verb) $(LLC) $(LLC_ASM_FLAGS) -disable-fp-elim -disable-cfi -load=$(PREPARE_CODE) $(LibDir)/FinalMMTk.bc -o $(ObjDir)/FinalMMTk.s
	$(Verb) $(GREP) -v '\.loc[^0-9]\+[0-9]\+ 0' $(ObjDir)/FinalMMTk.s > $(ObjDir)/FinalMMTk.s.remove_invalid_dot_loc
	$(Verb) $(MV) -f $(ObjDir)/FinalMMTk.s.remove_invalid_dot_loc $(ObjDir)/FinalMMTk.s
	$(Verb) $(LLVMCC) -c $(ObjDir)/FinalMMTk.s -o $(ObjDir)/FinalMMTk.o
	$(Verb) $(Archive) $(LibDir)/libFinalMMTk.a $(ObjDir)/FinalMMTk.o
	$(Verb) $(Ranlib) $(LibDir)/libFinalMMTk.a
	$(Verb) $(LLC) $(LLC_CPP_FLAGS) -march=cpp -cppgen=function -cppfor=VTgcmalloc $(LibDir)/FinalMMTk.bc -o $(PROJ_SRC_ROOT)/mmtk/inline/MMTkMallocInline.inc
	$(Verb) $(LLC) $(LLC_CPP_FLAGS) -march=cpp -cppgen=function -cppfor=fieldWriteBarrier $(LibDir)/FinalMMTk.bc -o $(PROJ_SRC_ROOT)/mmtk/inline/MMTkFieldWriteInline.inc
	$(Verb) $(LLC) $(LLC_CPP_FLAGS) -march=cpp -cppgen=function -cppfor=arrayWriteBarrier $(LibDir)/FinalMMTk.bc -o $(PROJ_SRC_ROOT)/mmtk/inline/MMTkArrayWriteInline.inc
	$(Verb) $(LLC) $(LLC_CPP_FLAGS) -march=cpp -cppgen=function -cppfor=nonHeapWriteBarrier $(LibDir)/FinalMMTk.bc -o $(PROJ_SRC_ROOT)/mmtk/inline/MMTkNonHeapWriteInline.inc
endif

clean-local::
	$(Verb) $(RM) -rf classes $(JARNAME).jar $(JARNAME).bc $(JARNAME)-optimized.bc $(ObjDir)
endif

###############################################################################
# COMPILE_OPENJDK_ZIP: Build the specified java sources and zip them up
###############################################################################
ifeq ($(COMPILE_OPENJDK_ZIP), 1)

$(error must verify the open jdk building process)

# Some variables
VMKIT_OPENJDK_ZIP=$(PROJ_OBJ_DIR)/vmkit-openjdk.zip
CLASSES_DIR=$(PROJ_OBJ_DIR)/classes

all-local:: $(VMKIT_OPENJDK_ZIP)
clean-local::
	-$(Verb) $(RM) -f $(CLASSES_DIR) $(VMKIT_OPENJDK_ZIP)

$(VMKIT_OPENJDK_ZIP): $(addprefix $(PROJ_SRC_DIR)/,$(OPENJDK_JAVA_SOURCES))
	$(Echo) "**[13] Building OpenJDK java sources into zip"
	-$(Verb) $(RM) -rf $@ $(CLASSES_DIR)
	$(Verb) $(MKDIR) $(CLASSES_DIR)
	$(Verb) $(JAVAC) $^ -d $(CLASSES_DIR)
	cd $(CLASSES_DIR) && $(ZIP) -qr $(VMKIT_OPENJDK_ZIP) .

endif




#
#
#   NEW BUILD SYSTEM
#
#
#-I$(BUILD_DIR) 
INCLUDES+=-I. -I$(PROJ_SRC_ROOT)/include -I$(PROJ_SRC_ROOT)/lib/vmkit/MMTk \
	-I$(PROJ_SRC_ROOT)/include/j3 \
	-I$(PROJ_SRC_ROOT)/lib/j3/ClassLib/$(CLASSPATH_DIR) \
	-I$(PROJ_SRC_ROOT)/lib/j3/ClassLib/ \
	-I$(PROJ_SRC_ROOT)/lib/j3/Compiler/ \
	-I$(PROJ_SRC_ROOT)/lib/j3/VMCore/ \
	-I$(PROJ_SRC_ROOT)/lib/j3/LLVMRuntime/

# should remove no-unused-variable                                                                                                         
WARN_CFLAGS=  -Wall -Wno-long-long -Wno-variadic-macros -Wno-unused-private-field -Wno-unused-variable
COMMON_CFLAGS+=  -O0 $(INCLUDES) -fno-strict-aliasing -fno-omit-frame-pointer  -ansi -pedantic $(WARN_CFLAGS) -fPIC

CFLAGS+=$(COMMON_CFLAGS) $(shell $(LLVM_CONFIG) --cflags)
CXXFLAGS+=$(COMMON_CFLAGS) $(shell $(LLVM_CONFIG) --cxxflags)
MY_LDFLAGS+=$(shell $(LLVM_CONFIG) --ldflags) $(LDOPT)
MY_LIBS+=$(shell $(LLVM_CONFIG) --libs) -lz

DEPEND_OPTIONS=-MMD -MP -MF "$(BUILD_DIR)/$$*.d.tmp" -MT "$(BUILD_DIR)/$$*.bc" -MT "$(BUILD_DIR)/$$*.d"
DOM=then mv -f "$(BUILD_DIR)/$$*.d.tmp" "$(BUILD_DIR)/$$*.d"; else rm -f "$(BUILD_DIR)/$$*.d.tmp"; exit 1; fi

$(LibName.BCA): $(ObjectsBC) $(LibDir)/.dir $(LLVMToolDir)/llvm-ar
	$(Echo) "**[22] Building $(BuildMode) Bytecode Archive $(notdir $@)"
	$(Verb) $(RM) -f $@
	$(Verb) $(LArchive) $@ $(ObjectsBC)

$(BUILD_DIR)/%-gc.o: $(BUILD_DIR)/%-gc.bc $(LLC) $(SELF)
	$(Echo) "Assembling '$(notdir $<)'"
	$(Verb) $(LLC) -relocation-model=pic -filetype=obj -disable-cfi -disable-fp-elim -load=$(PREPARE_CODE) $< -o $@

$(BUILD_DIR)/%.o: $(BUILD_DIR)/%.bc $(LLC) $(SELF)
	$(Echo) "Assembling '$(notdir $<)'"
	$(Verb) $(LLC) -relocation-model=pic -filetype=obj -disable-cfi -disable-fp-elim $< -o $@

$(BUILD_DIR)/%-gc.bc: $(BUILD_DIR)/%.bc $(LOPT) $(PREPARE_CODE) $(SELF)
	$(Echo) "Preparing for gc '$(notdir $<)'"
	$(Verb) $(LOPT) $< -load=$(PREPARE_CODE) -StaticGCPass -o $@

define define_compile_rule
$(BUILD_DIR)/%.bc: %$1 $(SELF) $(FRAMETABLES) $(BUILD_DIR)/.dir
	$(Echo) "Compiling '$(notdir $$<)'"
	$(Verb) if $2 $3 $(DEPEND_OPTIONS) -emit-llvm -c "$$<" -o $$@; $(DOM)

$(BUILD_DIR)/%.bc: $(BUILD_DIR)/%$1 $(FRAMETABLES) $(SELF) $(BUILD_DIR)/.dir
	$(Echo) "Compiling '$(notdir $$<)'"
	$(Verb) if $2 $3 $(DEPEND_OPTIONS) -emit-llvm -c "$$<" -o $$@; $(DOM)
endef

$(eval $(call define_compile_rule,.cpp,$(CLANGXX),$(CXXFLAGS)))
$(eval $(call define_compile_rule,.cc,$(CLANGXX),$(CXXFLAGS)))
$(eval $(call define_compile_rule,.c,$(CLANG),$(CFLAGS)))

ifneq ($(MAKECMDGOALS),tidy)
ifneq ($(MAKECMDGOALS),clean)
ifneq ($(MAKECMDGOALS),distclean)
-include $(patsubst %.o, %.d, $(OBJ_FILES))
endif
endif
endif
