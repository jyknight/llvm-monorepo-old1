
.PHONY: all tidy clean distclean confclean
.SECONDARY:
.SUFFIXES: .c .cpp .cxx .cc .h .hpp .o .a .bc .ll $(SHLIBEXT) $(SUFFIXES)

ifeq ($(OPTIMIZED),1)
  BUILD_NAME:=Release
  ifeq ($(DEBUG),1)
    BUILD_NAME:=$(BUILD_NAME)+Debug
  endif
  ifeq ($(ASSERT),1)
    BUILD_NAME:=$(BUILD_NAME)+Asserts
  endif
else
  ifeq ($(DEBUG),1)
    BUILD_NAME:=Debug
		ifeq ($(ASSERT),1)
	   	BUILD_NAME:=$(BUILD_NAME)+Asserts
		endif
  else
		ifeq ($(ASSERT),1)
	   	BUILD_NAME:=Asserts
		else
	   	BUILD_NAME:=Unoptimized
		endif
  endif
endif

ifeq ($(DEBUG),1)
  COMMON_CFLAGS+=-g
endif

###############################################################################
#   Nice printing
###############################################################################
ifndef PROF
PROF=.
all::
	$(Echo) "Entering compilation process"
endif

EchoMsg="[$(PROJECT_NAME) $(PROF)]:"
Echo=@echo $(EchoMsg)

ifndef VERBOSE
	SUB_OPT=--no-print-directory
  Verb:=@
endif

###############################################################################
#   Recursive target managment
###############################################################################
RECURSIVE_TARGETS=all clean distclean

$(RECURSIVE_TARGETS)::
	$(Verb) for f in $(DIRS); do \
		$(MAKE) $(SUB_OPT) -C $$f $@ PROF=$(PROF)/$$f; \
		if [ $$? != 0 ]; then echo "$(EchoMsg) abort with error in $(PROF)/$$f"; exit 1; fi \
	done; exit 0;

tidy:
	$(Echo) Cleaning temporary files
	$(Verb) find $(PROJ_OBJ_ROOT) -iname "*~" -exec rm -f {} \;

clean::
	$(Echo) "Cleaning compilation files"
	$(Verb) rm -Rf $(BUILD_NAME)

distclean::
	$(Echo) "Cleaning all compilation files"
	$(Verb) rm -Rf Release* Debug* Asserts* Unoptimized

confclean: clean
	$(Echo) Cleaning configuration
	$(Verb) rm -Rf $(PROJ_OBJ_ROOT)/Makefile.common
	$(Verb) rm -Rf $(PROJ_OBJ_ROOT)/config.status $(PROJ_OBJ_ROOT)/config.log
	$(Verb) rm -Rf $(PROJ_OBJ_ROOT)/autoconf/autom4te.cache $(PROJ_OBJ_ROOT)/autoconf/configure.bak

%/.dir:
	$(Verb) $(MKDIR) $(dir $@) && $(TOUCH) $@

###############################################################################
#   Build system managment
###############################################################################
#SELF=$(PROJ_SRC_ROOT)/Makefile.rules $(PROJ_OBJ_ROOT)/Makefile.common Makefile

$(LEVEL)/Makefile.common: $(PROJ_OBJ_ROOT)/Makefile.common

define define_config_rule
$$(PROJ_OBJ_ROOT)/$1: $$(PROJ_SRC_ROOT)/$1.in $$(PROJ_SRC_ROOT)/configure
	$(Echo) "Regenerating project files $$@"
	$(Verb) cd $(PROJ_OBJ_ROOT) && ./config.status -q --$2=$1
	$(Verb) touch $$@
endef

$(foreach cur,$(CONFIG_FILES),$(eval $(call define_config_rule,$(cur),file)))
$(foreach cur,$(CONFIG_HEADERS),$(eval $(call define_config_rule,$(cur),header)))

$(PROJ_OBJ_ROOT)/configure: $(PROJ_SRC_ROOT)/autoconf/configure.ac $(PROJ_SRC_ROOT)/autoconf/AutoRegen.sh 
	$(Echo) Rebootstraping project
	$(Verb) cd $(PROJ_SRC_ROOT)/autoconf && ./AutoRegen.sh
	$(Verb) cd $(PROJ_OBJ_ROOT) && ./config.status --recheck

###############################################################################
#   Build directories and generated binaries
###############################################################################
BIN_DIR=$(PROJ_OBJ_ROOT)/$(BUILD_NAME)/bin
LIB_DIR=$(PROJ_OBJ_ROOT)/$(BUILD_NAME)/lib
BUILD_DIR=$(PROJ_OBJ_CWD)/$(BUILD_NAME)

PREPARE_CODE=$(LIB_DIR)/prepare-code$(SHLIBEXT)
VMJC=$(BIN_DIR)/vmjc$(EXEEXT)

###############################################################################
#   Main targets
###############################################################################
ifdef TOOL
MODULE=$(TOOL)

all:: $(BIN_DIR)/$(TOOL)$(EXEEXT)
endif

ifdef LIBRARY
MODULE=$(LIBRARY)

all:: $(LIB_DIR)/$(LIBRARY)$(SHLIBEXT)
endif

ifdef MODULE_WITH_GC
MODULE=$(MODULE_WITH_GC)
WITH_GC=-gc
endif

###############################################################################
#   Module
###############################################################################
ifdef MODULE

MODULE_A=$(LIB_DIR)/lib$(MODULE).a
MODULE_BC=$(LIB_DIR)/$(MODULE).bc

BASE_FILES+=$(patsubst %.c,$(BUILD_DIR)/%,$(wildcard *.c)) \
            $(patsubst %.cc,$(BUILD_DIR)/%,$(wildcard *.cc)) \
            $(patsubst %.cpp,$(BUILD_DIR)/%,$(wildcard *.cpp)) \
            $(patsubst %,$(BUILD_DIR)/%,$(GEN))

BC_FILES=$(addsuffix $(WITH_GC).bc,$(BASE_FILES))
OBJ_FILES=$(addsuffix $(WITH_GC).o,$(BASE_FILES))

all:: $(MODULE_A)

ifdef NEED_BC
all:: $(MODULE_BC)
endif

ifdef BUILD_FRAMETABLE

## have to remove this symbol (used elsewere)
BUILT_INC+=$(patsubst %,$(BUILD_DIR)/%,FrametablesExterns.inc FrametablesSymbols.inc)
DEP_FRAMETABLES=$(patsubst %,$(LIB_DIR)/lib%.a,$(USE))

$(BUILD_DIR)/FrametablesExterns.inc: $(DEP_FRAMETABLES) $(SELF) $(BUILD_DIR)/.dir
	$(Echo) "Generating $(notdir $@)"
	$(Verb) $(NM) $(DEP_FRAMETABLES) | grep __frametable | sed 's/\([a-f0-9]*\) \([a-zA-Z]*\) _*\([a-zA-Z0-9_]*\)/extern "C" CompiledFrames \3;/' > $@

$(BUILD_DIR)/FrametablesSymbols.inc: $(DEP_FRAMETABLES) $(SELF) $(BUILD_DIR)/.dir
	$(Echo) "Generating $(notdir $@)"
	$(Verb) $(NM) $(DEP_FRAMETABLES) | grep __frametable | sed 's/\([a-f0-9]*\) \([a-zA-Z]*\) _*\([a-zA-Z0-9_]*\)/\&\3,/' > $@

endif

$(MODULE_A): $(OBJ_FILES) $(SELF) $(LIB_DIR)/.dir
	$(Echo) "Building archive '$(notdir $@)'"
	-$(Verb) $(RM) -f $@
	$(Verb) $(Archive) $@ $(OBJ_FILES)
	$(Verb) $(Ranlib) $@

$(MODULE_BC): $(BC_FILES) $(SELF) $(LIB_DIR)/.dir
	$(Echo) "Building module '$(notdir $@)'"
	$(Verb) $(LLVMLINK) $(BC_FILES) -o $(MODULE_BC)

endif

###############################################################################
#   Linking
###############################################################################
DEP_LIBS=$(patsubst %,$(LIB_DIR)/lib%.a,$(USE) $(USE))

$(BIN_DIR)/$(TOOL)$(EXEEXT): $(MODULE_A) $(DEP_LIBS) $(SELF) $(BIN_DIR)/.dir
	$(Echo) "Linking executable '$(notdir $@)'"
	$(Verb) $(CLANGXX) -o $@ $(MODULE_A) $(DEP_LIBS) $(MY_LIBS) $(MY_LDFLAGS) 

$(LIB_DIR)/$(LIBRARY)$(SHLIBEXT): $(MODULE_A) $(DEP_LIBS) $(SELF) $(LIB_DIR)/.dir
	$(Echo) "Linking shared library '$(notdir $@)'"
	$(Verb) $(CLANGXX) -O0 -o $@ $(SHOPT) -shared -Wl,--whole-archive $(MODULE_A) -Wl,--no-whole-archive $(DEP_LIBS)

###############################################################################
# vmkit runtime generated files
###############################################################################
ifdef VMKIT_RUNTIME_OUT
all:: $(BUILD_DIR)/$(VMKIT_RUNTIME_OUT)

BUILT_INC+=$(BUILD_DIR)/$(VMKIT_RUNTIME_OUT)

$(BUILD_DIR)/$(VMKIT_RUNTIME_OUT): $(VMKIT_RUNTIME_IN) $(SELF) $(BUILD_DIR)/.dir
	$(Echo) "Generating '$@'"
	$(Verb) cat $(VMKIT_RUNTIME_IN) | $(LLVMAS) -o - | $(LLC) -march=cpp -cppgen=contents -o $@

endif

###############################################################################
# object rules
###############################################################################
INCLUDES+=-I$(PROJ_SRC_CWD) -I$(PROJ_SRC_ROOT)/include -I$(PROJ_SRC_ROOT)/lib/vmkit/MMTk -I$(BUILD_DIR)

# should remove no-unused-variable                                                                                                         
WARN_CFLAGS=  -Wall -Wno-long-long -Wno-variadic-macros -Wno-unused-private-field -Wno-unused-variable
COMMON_CFLAGS+=  -O0 $(INCLUDES) -fno-strict-aliasing -fno-omit-frame-pointer  -ansi -pedantic $(WARN_CFLAGS) -fPIC

CFLAGS+=$(COMMON_CFLAGS) $(shell $(LLVM_CONFIG) --cflags)
CXXFLAGS+=$(COMMON_CFLAGS) $(shell $(LLVM_CONFIG) --cxxflags)
MY_LDFLAGS+=$(shell $(LLVM_CONFIG) --ldflags) $(LDOPT)
MY_LIBS+=$(shell $(LLVM_CONFIG) --libs) -lz

DEPEND_OPTIONS=-MMD -MP -MF "$(BUILD_DIR)/$$*.d.tmp" -MT "$(BUILD_DIR)/$$*.bc" -MT "$(BUILD_DIR)/$$*.d"
DOM=then mv -f "$(BUILD_DIR)/$$*.d.tmp" "$(BUILD_DIR)/$$*.d"; else rm -f "$(BUILD_DIR)/$$*.d.tmp"; exit 1; fi

$(BUILD_DIR)/%-gc.o: $(BUILD_DIR)/%-gc.bc $(LLC) $(SELF)
	$(Echo) "Assembling '$(notdir $<)'"
	$(Verb) $(LLC) -relocation-model=pic -filetype=obj -disable-cfi -disable-fp-elim -load=$(PREPARE_CODE) $< -o $@

$(BUILD_DIR)/%.o: $(BUILD_DIR)/%.bc $(LLC) $(SELF)
	$(Echo) "Assembling '$(notdir $<)'"
	$(Verb) $(LLC) -relocation-model=pic -filetype=obj -disable-cfi -disable-fp-elim $< -o $@

$(BUILD_DIR)/%-gc.bc: $(BUILD_DIR)/%.bc $(LOPT) $(PREPARE_CODE) $(SELF)
	$(Echo) "Preparing for gc '$(notdir $<)'"
	$(Verb) $(LOPT) $< -load=$(PREPARE_CODE) -StaticGCPass -o $@

define define_compile_rule
$(BUILD_DIR)/%.bc: %$1 $(SELF) $(BUILT_INC) $(BUILD_DIR)/.dir
	$(Echo) "Compiling '$(notdir $$<)'"
	$(Verb) if $2 $3 $(DEPEND_OPTIONS) -emit-llvm -c "$$<" -o $$@; $(DOM)

$(BUILD_DIR)/%.bc: $(BUILD_DIR)/%$1 $(BUILT_INC) $(SELF) $(BUILD_DIR)/.dir
	$(Echo) "Compiling '$(notdir $$<)'"
	$(Verb) if $2 $3 $(DEPEND_OPTIONS) -emit-llvm -c "$$<" -o $$@; $(DOM)
endef

$(eval $(call define_compile_rule,.cpp,$(CLANGXX),$(CXXFLAGS)))
$(eval $(call define_compile_rule,.cc,$(CLANGXX),$(CXXFLAGS)))
$(eval $(call define_compile_rule,.c,$(CLANG),$(CFLAGS)))

ifneq ($(MAKECMDGOALS),tidy)
ifneq ($(MAKECMDGOALS),clean)
ifneq ($(MAKECMDGOALS),distclean)
-include $(addsuffix .d,$(BASE_FILES))
endif
endif
endif
