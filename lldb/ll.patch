Index: include/lldb/API/SBTarget.h
===================================================================
--- include/lldb/API/SBTarget.h	(revision 165938)
+++ include/lldb/API/SBTarget.h	(working copy)
@@ -452,6 +452,30 @@
                    const char *url,
                    const char *plugin_name,
                    SBError& error);
+
+    //------------------------------------------------------------------
+    /// Connect to a GDB remote platform with url. 
+    ///
+    /// @param[in] listener
+    ///     An optional listener that will receive all process events.
+    ///     If \a listener is valid then \a listener will listen to all
+    ///     process events. If not valid, then this target's debugger
+    ///     (SBTarget::GetDebugger()) will listen to all process events.
+    ///
+    /// @param[in] url
+    ///     The url to connect to, e.g., 'connect://localhost:12345'.
+    ///
+    /// @param[in] plugin_name
+    ///     The plugin name to be used; can be NULL.
+    ///
+    /// @param[out] error
+    ///     An error explaining what went wrong if the connect fails.
+    ///
+    //------------------------------------------------------------------
+    void
+    ConnectRemotePlatform (const char *url, 
+                           const char *platform,
+                           SBError& error);
     
     lldb::SBFileSpec
     GetExecutable ();
Index: include/lldb/API/SBType.h
===================================================================
--- include/lldb/API/SBType.h	(revision 165942)
+++ include/lldb/API/SBType.h	(working copy)
@@ -141,6 +141,18 @@
     lldb::TemplateArgumentKind
     GetTemplateArgumentKind (uint32_t idx);
 
+    bool 
+    IsFunctionType ();
+
+    lldb::SBType 
+    GetFunctionReturnType ();
+
+    int 
+    GetNumberOfFunctionArguments ();
+
+    lldb::SBType
+    GetFunctionArgumentTypeAtIndex (int no);
+
     const char*
     GetName();
     
Index: include/lldb/Symbol/ClangASTContext.h
===================================================================
--- include/lldb/Symbol/ClangASTContext.h	(revision 166275)
+++ include/lldb/Symbol/ClangASTContext.h	(working copy)
@@ -963,12 +963,19 @@
     //------------------------------------------------------------------
     // Qualifiers
     //------------------------------------------------------------------
-    static unsigned
-    GetTypeQualifiers(lldb::clang_type_t clang_type);
-protected:
-    //------------------------------------------------------------------
-    // Classes that inherit from ClangASTContext can see and modify these
-    //------------------------------------------------------------------
+    static unsigned
+    GetTypeQualifiers(lldb::clang_type_t clang_type);
+protected:
+    
+    lldb::clang_type_t
+    GetBuiltinTypeForDWARFEncodingAndBitSize_Private (const char *type_name,
+                                                      uint32_t dw_ate,
+                                                      uint32_t bit_size);
+    
+
+    //------------------------------------------------------------------
+    // Classes that inherit from ClangASTContext can see and modify these
+    //------------------------------------------------------------------
     std::string                             m_target_triple;
     std::auto_ptr<clang::ASTContext>        m_ast_ap;
     std::auto_ptr<clang::LangOptions>       m_language_options_ap;
Index: source/API/SBAddress.cpp
===================================================================
--- source/API/SBAddress.cpp	(revision 165938)
+++ source/API/SBAddress.cpp	(working copy)
@@ -182,7 +182,7 @@
 SBAddress::GetOffset ()
 {
     if (m_opaque_ap.get())
-        m_opaque_ap->GetOffset();
+        return m_opaque_ap->GetOffset();
     return 0;
 }
 
Index: source/API/SBTarget.cpp
===================================================================
--- source/API/SBTarget.cpp	(revision 165942)
+++ source/API/SBTarget.cpp	(working copy)
@@ -1101,6 +1101,33 @@
     return sb_process;
 }
 
+void
+SBTarget::ConnectRemotePlatform (const char *url, 
+                                 const char *platform,
+                                 SBError& error)
+{
+    TargetSP target_sp(GetSP());
+    Debugger& debugger = target_sp->GetDebugger();
+    PlatformList & list = debugger.GetPlatformList();
+
+    PlatformSP found;
+    for (int i = 0; i < list.GetSize(); i++) {
+        PlatformSP p = list.GetAtIndex(i);
+        if (strcmp(p->GetShortPluginName(), platform) == 0){
+            found = p;
+            break;
+        }
+    }
+    if (!found) {
+        error.SetErrorStringWithFormat("No platform with the name %s", platform);
+        return;
+    }
+    list.SetSelectedPlatform(found);
+    Args args(url);
+    error.SetError(found->ConnectRemote(args));
+}
+
+
 SBFileSpec
 SBTarget::GetExecutable ()
 {
Index: source/API/SBType.cpp
===================================================================
--- source/API/SBType.cpp	(revision 165942)
+++ source/API/SBType.cpp	(working copy)
@@ -219,7 +219,58 @@
     return SBType(ClangASTType(m_opaque_sp->GetASTContext(),qt.getNonReferenceType().getAsOpaquePtr()));
 }
 
+bool 
+SBType::IsFunctionType ()
+{
+    if (!IsValid())
+        return false;
+    QualType qt = QualType::getFromOpaquePtr(m_opaque_sp->GetOpaqueQualType());
+    
+    return qt->isFunctionProtoType();
+}
+
+lldb::SBType 
+SBType::GetFunctionReturnType ()
+{
+    if (!IsValid())
+        return lldb::SBType();
+    QualType qt = QualType::getFromOpaquePtr(m_opaque_sp->GetOpaqueQualType());
+    
+    if (qt->isFunctionProtoType())
+        return SBType(ClangASTType(m_opaque_sp->GetASTContext(), cast<FunctionProtoType>(qt.getTypePtr())->getResultType().getAsOpaquePtr()));
+    return lldb::SBType();
+}
+
+int 
+SBType::GetNumberOfFunctionArguments ()
+{
+    if (!IsValid())
+        return 0;
+    QualType qt = QualType::getFromOpaquePtr(m_opaque_sp->GetOpaqueQualType());
+    
+    if (qt->isFunctionProtoType())
+        return cast<FunctionProtoType>(qt.getTypePtr())->getNumArgs();
+    return 0;
+}
+
 lldb::SBType
+SBType::GetFunctionArgumentTypeAtIndex (int no)
+{
+    if (!IsValid())
+        return lldb::SBType();
+    QualType qt = QualType::getFromOpaquePtr(m_opaque_sp->GetOpaqueQualType());
+    
+    if (qt->isFunctionProtoType()) {
+        const FunctionProtoType* func = cast<FunctionProtoType>(qt.getTypePtr());
+        if (no >= 0 && no < func->getNumArgs())
+        {
+            return SBType(ClangASTType(m_opaque_sp->GetASTContext(), func->getArgType(no).getAsOpaquePtr()));
+        }
+    }
+    return lldb::SBType();
+}
+
+lldb::SBType
 SBType::GetUnqualifiedType()
 {
     if (!IsValid())
Index: source/Symbol/ClangASTContext.cpp
===================================================================
--- source/Symbol/ClangASTContext.cpp	(revision 166275)
+++ source/Symbol/ClangASTContext.cpp	(working copy)
@@ -715,12 +715,34 @@
     return NULL;
 }
 
-clang_type_t
-ClangASTContext::GetBuiltinTypeForDWARFEncodingAndBitSize (const char *type_name, uint32_t dw_ate, uint32_t bit_size)
-{
-    ASTContext *ast = getASTContext();
-    
-#define streq(a,b) strcmp(a,b) == 0
+clang_type_t
+ClangASTContext::GetBuiltinTypeForDWARFEncodingAndBitSize (const char *type_name, uint32_t dw_ate, uint32_t bit_size)
+{
+    clang_type_t clang_type = GetBuiltinTypeForDWARFEncodingAndBitSize_Private (type_name, dw_ate, bit_size);
+    if (type_name && type_name[0] && clang_type)
+    {
+        ASTContext *ast = getASTContext();
+        std::string clang_type_name (ClangASTType::GetTypeNameForOpaqueQualType (ast, clang_type));
+        if (clang_type_name.compare(type_name) != 0)
+        {
+            if (strchr(type_name, ' ') == NULL)
+            {
+                //printf ("\ncreating typedef: typedef %s %s;\n", clang_type_name.c_str(), type_name);
+                clang_type_t typedef_clang_type = CreateTypedefType (type_name, clang_type, NULL);
+                if (typedef_clang_type)
+                    return typedef_clang_type;
+            }
+        }
+    }
+    return clang_type;
+}
+
+clang_type_t
+ClangASTContext::GetBuiltinTypeForDWARFEncodingAndBitSize_Private (const char *type_name, uint32_t dw_ate, uint32_t bit_size)
+{
+    ASTContext *ast = getASTContext();
+    
+#define streq(a,b) strcmp(a,b) == 0
     assert (ast != NULL);
     if (ast)
     {
