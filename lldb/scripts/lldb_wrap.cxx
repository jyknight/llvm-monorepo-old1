/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.8
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGCSHARP


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_lldb(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_lldb(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_lldb(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } else


#include <string>


#include "lldb/lldb-public.h"
#include "lldb/API/SBAddress.h"
#include "lldb/API/SBBlock.h"
#include "lldb/API/SBBreakpoint.h"
#include "lldb/API/SBBreakpointLocation.h"
#include "lldb/API/SBBroadcaster.h"
#include "lldb/API/SBCommandInterpreter.h"
#include "lldb/API/SBCommandReturnObject.h"
#include "lldb/API/SBCommunication.h"
#include "lldb/API/SBCompileUnit.h"
#include "lldb/API/SBData.h"
#include "lldb/API/SBDebugger.h"
#include "lldb/API/SBError.h"
#include "lldb/API/SBEvent.h"
#include "lldb/API/SBFileSpec.h"
#include "lldb/API/SBFileSpecList.h"
#include "lldb/API/SBFrame.h"
#include "lldb/API/SBFunction.h"
#include "lldb/API/SBHostOS.h"
#include "lldb/API/SBInputReader.h"
#include "lldb/API/SBInstruction.h"
#include "lldb/API/SBInstructionList.h"
#include "lldb/API/SBLineEntry.h"
#include "lldb/API/SBListener.h"
#include "lldb/API/SBModule.h"
#include "lldb/API/SBProcess.h"
#include "lldb/API/SBSection.h"
#include "lldb/API/SBSourceManager.h"
#include "lldb/API/SBStream.h"
#include "lldb/API/SBStringList.h"
#include "lldb/API/SBSymbol.h"
#include "lldb/API/SBSymbolContext.h"
#include "lldb/API/SBSymbolContextList.h"
#include "lldb/API/SBTarget.h"
#include "lldb/API/SBThread.h"
#include "lldb/API/SBType.h"
#include "lldb/API/SBTypeCategory.h"
#include "lldb/API/SBTypeFilter.h"
#include "lldb/API/SBTypeFormat.h"
#include "lldb/API/SBTypeNameSpecifier.h"
#include "lldb/API/SBTypeSummary.h"
#include "lldb/API/SBTypeSynthetic.h"
#include "lldb/API/SBValue.h"
#include "lldb/API/SBValueList.h"
#include "lldb/API/SBWatchpoint.h"


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UINT32_MAX_get() {
  unsigned int jresult ;
  unsigned int result;
  
  result = (unsigned int)(4294967295U);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_UINT64_MAX_get() {
  unsigned long long jresult ;
  unsigned long long result;
  
  result = (unsigned long long)(18446744073709551615ULL);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_LLDB_GENERIC_ERROR_get() {
  unsigned int jresult ;
  unsigned int result;
  
  result = (unsigned int)(4294967295U);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LLDB_INVALID_BREAK_ID_get() {
  int jresult ;
  int result;
  
  result = (int)(0);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LLDB_DEFAULT_BREAK_SIZE_get() {
  int jresult ;
  int result;
  
  result = (int)(0);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LLDB_INVALID_WATCH_ID_get() {
  int jresult ;
  int result;
  
  result = (int)(0);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_LLDB_WATCH_TYPE_READ_get() {
  unsigned int jresult ;
  unsigned int result;
  
  result = (unsigned int)((1u << 0));
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_LLDB_WATCH_TYPE_WRITE_get() {
  unsigned int jresult ;
  unsigned int result;
  
  result = (unsigned int)((1u << 1));
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LLDB_REGNUM_GENERIC_PC_get() {
  int jresult ;
  int result;
  
  result = (int)(0);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LLDB_REGNUM_GENERIC_SP_get() {
  int jresult ;
  int result;
  
  result = (int)(1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LLDB_REGNUM_GENERIC_FP_get() {
  int jresult ;
  int result;
  
  result = (int)(2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LLDB_REGNUM_GENERIC_RA_get() {
  int jresult ;
  int result;
  
  result = (int)(3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LLDB_REGNUM_GENERIC_FLAGS_get() {
  int jresult ;
  int result;
  
  result = (int)(4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LLDB_REGNUM_GENERIC_ARG1_get() {
  int jresult ;
  int result;
  
  result = (int)(5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LLDB_REGNUM_GENERIC_ARG2_get() {
  int jresult ;
  int result;
  
  result = (int)(6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LLDB_REGNUM_GENERIC_ARG3_get() {
  int jresult ;
  int result;
  
  result = (int)(7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LLDB_REGNUM_GENERIC_ARG4_get() {
  int jresult ;
  int result;
  
  result = (int)(8);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LLDB_REGNUM_GENERIC_ARG5_get() {
  int jresult ;
  int result;
  
  result = (int)(9);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LLDB_REGNUM_GENERIC_ARG6_get() {
  int jresult ;
  int result;
  
  result = (int)(10);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LLDB_REGNUM_GENERIC_ARG7_get() {
  int jresult ;
  int result;
  
  result = (int)(11);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LLDB_REGNUM_GENERIC_ARG8_get() {
  int jresult ;
  int result;
  
  result = (int)(12);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_LLDB_INVALID_ADDRESS_get() {
  unsigned long long jresult ;
  unsigned long long result;
  
  result = (unsigned long long)(18446744073709551615ULL);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_LLDB_INVALID_INDEX32_get() {
  unsigned int jresult ;
  unsigned int result;
  
  result = (unsigned int)(4294967295U);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_LLDB_INVALID_IVAR_OFFSET_get() {
  unsigned int jresult ;
  unsigned int result;
  
  result = (unsigned int)(4294967295U);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_LLDB_INVALID_IMAGE_TOKEN_get() {
  unsigned int jresult ;
  unsigned int result;
  
  result = (unsigned int)(4294967295U);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_LLDB_INVALID_REGNUM_get() {
  unsigned int jresult ;
  unsigned int result;
  
  result = (unsigned int)(4294967295U);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_LLDB_INVALID_UID_get() {
  unsigned long long jresult ;
  unsigned long long result;
  
  result = (unsigned long long)(18446744073709551615ULL);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LLDB_INVALID_PROCESS_ID_get() {
  int jresult ;
  int result;
  
  result = (int)(0);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LLDB_INVALID_THREAD_ID_get() {
  int jresult ;
  int result;
  
  result = (int)(0);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_LLDB_INVALID_FRAME_ID_get() {
  unsigned int jresult ;
  unsigned int result;
  
  result = (unsigned int)(4294967295U);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_LLDB_ARCH_DEFAULT_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)("systemArch");
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_LLDB_ARCH_DEFAULT_32BIT_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)("systemArch32");
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_LLDB_ARCH_DEFAULT_64BIT_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)("systemArch64");
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_LLDB_INVALID_CPUTYPE_get() {
  unsigned int jresult ;
  unsigned int result;
  
  result = (unsigned int)((0xFFFFFFFEu));
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LLDB_MAX_NUM_OPTION_SETS_get() {
  int jresult ;
  int result;
  
  result = (int)(32);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_LLDB_OPT_SET_ALL_get() {
  unsigned int jresult ;
  unsigned int result;
  
  result = (unsigned int)(0xFFFFFFFFU);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_LLDB_OPT_SET_1_get() {
  unsigned int jresult ;
  unsigned int result;
  
  result = (unsigned int)((1U << 0));
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_LLDB_OPT_SET_2_get() {
  unsigned int jresult ;
  unsigned int result;
  
  result = (unsigned int)((1U << 1));
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_LLDB_OPT_SET_3_get() {
  unsigned int jresult ;
  unsigned int result;
  
  result = (unsigned int)((1U << 2));
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_LLDB_OPT_SET_4_get() {
  unsigned int jresult ;
  unsigned int result;
  
  result = (unsigned int)((1U << 3));
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_LLDB_OPT_SET_5_get() {
  unsigned int jresult ;
  unsigned int result;
  
  result = (unsigned int)((1U << 4));
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_LLDB_OPT_SET_6_get() {
  unsigned int jresult ;
  unsigned int result;
  
  result = (unsigned int)((1U << 5));
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_LLDB_OPT_SET_7_get() {
  unsigned int jresult ;
  unsigned int result;
  
  result = (unsigned int)((1U << 6));
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_LLDB_OPT_SET_8_get() {
  unsigned int jresult ;
  unsigned int result;
  
  result = (unsigned int)((1U << 7));
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_LLDB_OPT_SET_9_get() {
  unsigned int jresult ;
  unsigned int result;
  
  result = (unsigned int)((1U << 8));
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_LLDB_OPT_SET_10_get() {
  unsigned int jresult ;
  unsigned int result;
  
  result = (unsigned int)((1U << 9));
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SBAddress__SWIG_0() {
  void * jresult ;
  lldb::SBAddress *result = 0 ;
  
  result = (lldb::SBAddress *)new lldb::SBAddress();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SBAddress__SWIG_1(void * jarg1) {
  void * jresult ;
  lldb::SBAddress *arg1 = 0 ;
  lldb::SBAddress *result = 0 ;
  
  arg1 = (lldb::SBAddress *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBAddress const & type is null", 0);
    return 0;
  } 
  result = (lldb::SBAddress *)new lldb::SBAddress((lldb::SBAddress const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SBAddress__SWIG_2(void * jarg1, void * jarg2) {
  void * jresult ;
  lldb::SBSection arg1 ;
  lldb::addr_t arg2 ;
  lldb::SBSection *argp1 ;
  lldb::addr_t *argp2 ;
  lldb::SBAddress *result = 0 ;
  
  argp1 = (lldb::SBSection *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null lldb::SBSection", 0);
    return 0;
  }
  arg1 = *argp1; 
  argp2 = (lldb::addr_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null lldb::addr_t", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (lldb::SBAddress *)new lldb::SBAddress(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SBAddress__SWIG_3(void * jarg1, void * jarg2) {
  void * jresult ;
  lldb::addr_t arg1 ;
  lldb::SBTarget *arg2 = 0 ;
  lldb::addr_t *argp1 ;
  lldb::SBAddress *result = 0 ;
  
  argp1 = (lldb::addr_t *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null lldb::addr_t", 0);
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (lldb::SBTarget *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBTarget & type is null", 0);
    return 0;
  } 
  result = (lldb::SBAddress *)new lldb::SBAddress(arg1,*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SBAddress(void * jarg1) {
  lldb::SBAddress *arg1 = (lldb::SBAddress *) 0 ;
  
  arg1 = (lldb::SBAddress *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBAddress_IsValid(void * jarg1) {
  unsigned int jresult ;
  lldb::SBAddress *arg1 = (lldb::SBAddress *) 0 ;
  bool result;
  
  arg1 = (lldb::SBAddress *)jarg1; 
  result = (bool)((lldb::SBAddress const *)arg1)->IsValid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBAddress_Clear(void * jarg1) {
  lldb::SBAddress *arg1 = (lldb::SBAddress *) 0 ;
  
  arg1 = (lldb::SBAddress *)jarg1; 
  (arg1)->Clear();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBAddress_GetFileAddress(void * jarg1) {
  void * jresult ;
  lldb::SBAddress *arg1 = (lldb::SBAddress *) 0 ;
  lldb::addr_t result;
  
  arg1 = (lldb::SBAddress *)jarg1; 
  result = ((lldb::SBAddress const *)arg1)->GetFileAddress();
  jresult = new lldb::addr_t((const lldb::addr_t &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBAddress_GetLoadAddress(void * jarg1, void * jarg2) {
  void * jresult ;
  lldb::SBAddress *arg1 = (lldb::SBAddress *) 0 ;
  lldb::SBTarget *arg2 = 0 ;
  lldb::addr_t result;
  
  arg1 = (lldb::SBAddress *)jarg1; 
  arg2 = (lldb::SBTarget *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBTarget const & type is null", 0);
    return 0;
  } 
  result = ((lldb::SBAddress const *)arg1)->GetLoadAddress((lldb::SBTarget const &)*arg2);
  jresult = new lldb::addr_t((const lldb::addr_t &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBAddress_SetLoadAddress(void * jarg1, void * jarg2, void * jarg3) {
  lldb::SBAddress *arg1 = (lldb::SBAddress *) 0 ;
  lldb::addr_t arg2 ;
  lldb::SBTarget *arg3 = 0 ;
  lldb::addr_t *argp2 ;
  
  arg1 = (lldb::SBAddress *)jarg1; 
  argp2 = (lldb::addr_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null lldb::addr_t", 0);
    return ;
  }
  arg2 = *argp2; 
  arg3 = (lldb::SBTarget *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBTarget & type is null", 0);
    return ;
  } 
  (arg1)->SetLoadAddress(arg2,*arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBAddress_OffsetAddress(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  lldb::SBAddress *arg1 = (lldb::SBAddress *) 0 ;
  lldb::addr_t arg2 ;
  lldb::addr_t *argp2 ;
  bool result;
  
  arg1 = (lldb::SBAddress *)jarg1; 
  argp2 = (lldb::addr_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null lldb::addr_t", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)(arg1)->OffsetAddress(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBAddress_GetDescription(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  lldb::SBAddress *arg1 = (lldb::SBAddress *) 0 ;
  lldb::SBStream *arg2 = 0 ;
  bool result;
  
  arg1 = (lldb::SBAddress *)jarg1; 
  arg2 = (lldb::SBStream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBStream & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->GetDescription(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBAddress_GetSection(void * jarg1) {
  void * jresult ;
  lldb::SBAddress *arg1 = (lldb::SBAddress *) 0 ;
  lldb::SBSection result;
  
  arg1 = (lldb::SBAddress *)jarg1; 
  result = (arg1)->GetSection();
  jresult = new lldb::SBSection((const lldb::SBSection &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBAddress_GetOffset(void * jarg1) {
  void * jresult ;
  lldb::SBAddress *arg1 = (lldb::SBAddress *) 0 ;
  lldb::addr_t result;
  
  arg1 = (lldb::SBAddress *)jarg1; 
  result = (arg1)->GetOffset();
  jresult = new lldb::addr_t((const lldb::addr_t &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBAddress_SetAddress(void * jarg1, void * jarg2, void * jarg3) {
  lldb::SBAddress *arg1 = (lldb::SBAddress *) 0 ;
  lldb::SBSection arg2 ;
  lldb::addr_t arg3 ;
  lldb::SBSection *argp2 ;
  lldb::addr_t *argp3 ;
  
  arg1 = (lldb::SBAddress *)jarg1; 
  argp2 = (lldb::SBSection *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null lldb::SBSection", 0);
    return ;
  }
  arg2 = *argp2; 
  argp3 = (lldb::addr_t *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null lldb::addr_t", 0);
    return ;
  }
  arg3 = *argp3; 
  (arg1)->SetAddress(arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_SBAddress_GetAddressClass(void * jarg1) {
  int jresult ;
  lldb::SBAddress *arg1 = (lldb::SBAddress *) 0 ;
  lldb::AddressClass result;
  
  arg1 = (lldb::SBAddress *)jarg1; 
  result = (lldb::AddressClass)(arg1)->GetAddressClass();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBAddress_GetSymbolContext(void * jarg1, void * jarg2) {
  void * jresult ;
  lldb::SBAddress *arg1 = (lldb::SBAddress *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  lldb::SBSymbolContext result;
  
  arg1 = (lldb::SBAddress *)jarg1; 
  argp2 = (uint32_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->GetSymbolContext(arg2);
  jresult = new lldb::SBSymbolContext((const lldb::SBSymbolContext &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBAddress_GetModule(void * jarg1) {
  void * jresult ;
  lldb::SBAddress *arg1 = (lldb::SBAddress *) 0 ;
  lldb::SBModule result;
  
  arg1 = (lldb::SBAddress *)jarg1; 
  result = (arg1)->GetModule();
  jresult = new lldb::SBModule((const lldb::SBModule &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBAddress_GetCompileUnit(void * jarg1) {
  void * jresult ;
  lldb::SBAddress *arg1 = (lldb::SBAddress *) 0 ;
  lldb::SBCompileUnit result;
  
  arg1 = (lldb::SBAddress *)jarg1; 
  result = (arg1)->GetCompileUnit();
  jresult = new lldb::SBCompileUnit((const lldb::SBCompileUnit &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBAddress_GetFunction(void * jarg1) {
  void * jresult ;
  lldb::SBAddress *arg1 = (lldb::SBAddress *) 0 ;
  lldb::SBFunction result;
  
  arg1 = (lldb::SBAddress *)jarg1; 
  result = (arg1)->GetFunction();
  jresult = new lldb::SBFunction((const lldb::SBFunction &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBAddress_GetBlock(void * jarg1) {
  void * jresult ;
  lldb::SBAddress *arg1 = (lldb::SBAddress *) 0 ;
  lldb::SBBlock result;
  
  arg1 = (lldb::SBAddress *)jarg1; 
  result = (arg1)->GetBlock();
  jresult = new lldb::SBBlock((const lldb::SBBlock &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBAddress_GetSymbol(void * jarg1) {
  void * jresult ;
  lldb::SBAddress *arg1 = (lldb::SBAddress *) 0 ;
  lldb::SBSymbol result;
  
  arg1 = (lldb::SBAddress *)jarg1; 
  result = (arg1)->GetSymbol();
  jresult = new lldb::SBSymbol((const lldb::SBSymbol &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBAddress_GetLineEntry(void * jarg1) {
  void * jresult ;
  lldb::SBAddress *arg1 = (lldb::SBAddress *) 0 ;
  lldb::SBLineEntry result;
  
  arg1 = (lldb::SBAddress *)jarg1; 
  result = (arg1)->GetLineEntry();
  jresult = new lldb::SBLineEntry((const lldb::SBLineEntry &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SBBlock__SWIG_0() {
  void * jresult ;
  lldb::SBBlock *result = 0 ;
  
  result = (lldb::SBBlock *)new lldb::SBBlock();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SBBlock__SWIG_1(void * jarg1) {
  void * jresult ;
  lldb::SBBlock *arg1 = 0 ;
  lldb::SBBlock *result = 0 ;
  
  arg1 = (lldb::SBBlock *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBBlock const & type is null", 0);
    return 0;
  } 
  result = (lldb::SBBlock *)new lldb::SBBlock((lldb::SBBlock const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SBBlock(void * jarg1) {
  lldb::SBBlock *arg1 = (lldb::SBBlock *) 0 ;
  
  arg1 = (lldb::SBBlock *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBBlock_IsInlined(void * jarg1) {
  unsigned int jresult ;
  lldb::SBBlock *arg1 = (lldb::SBBlock *) 0 ;
  bool result;
  
  arg1 = (lldb::SBBlock *)jarg1; 
  result = (bool)((lldb::SBBlock const *)arg1)->IsInlined();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBBlock_IsValid(void * jarg1) {
  unsigned int jresult ;
  lldb::SBBlock *arg1 = (lldb::SBBlock *) 0 ;
  bool result;
  
  arg1 = (lldb::SBBlock *)jarg1; 
  result = (bool)((lldb::SBBlock const *)arg1)->IsValid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SBBlock_GetInlinedName(void * jarg1) {
  char * jresult ;
  lldb::SBBlock *arg1 = (lldb::SBBlock *) 0 ;
  char *result = 0 ;
  
  arg1 = (lldb::SBBlock *)jarg1; 
  result = (char *)((lldb::SBBlock const *)arg1)->GetInlinedName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBBlock_GetInlinedCallSiteFile(void * jarg1) {
  void * jresult ;
  lldb::SBBlock *arg1 = (lldb::SBBlock *) 0 ;
  lldb::SBFileSpec result;
  
  arg1 = (lldb::SBBlock *)jarg1; 
  result = ((lldb::SBBlock const *)arg1)->GetInlinedCallSiteFile();
  jresult = new lldb::SBFileSpec((const lldb::SBFileSpec &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBBlock_GetInlinedCallSiteLine(void * jarg1) {
  void * jresult ;
  lldb::SBBlock *arg1 = (lldb::SBBlock *) 0 ;
  uint32_t result;
  
  arg1 = (lldb::SBBlock *)jarg1; 
  result = ((lldb::SBBlock const *)arg1)->GetInlinedCallSiteLine();
  jresult = new uint32_t((const uint32_t &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBBlock_GetInlinedCallSiteColumn(void * jarg1) {
  void * jresult ;
  lldb::SBBlock *arg1 = (lldb::SBBlock *) 0 ;
  uint32_t result;
  
  arg1 = (lldb::SBBlock *)jarg1; 
  result = ((lldb::SBBlock const *)arg1)->GetInlinedCallSiteColumn();
  jresult = new uint32_t((const uint32_t &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBBlock_GetParent(void * jarg1) {
  void * jresult ;
  lldb::SBBlock *arg1 = (lldb::SBBlock *) 0 ;
  lldb::SBBlock result;
  
  arg1 = (lldb::SBBlock *)jarg1; 
  result = (arg1)->GetParent();
  jresult = new lldb::SBBlock((const lldb::SBBlock &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBBlock_GetContainingInlinedBlock(void * jarg1) {
  void * jresult ;
  lldb::SBBlock *arg1 = (lldb::SBBlock *) 0 ;
  lldb::SBBlock result;
  
  arg1 = (lldb::SBBlock *)jarg1; 
  result = (arg1)->GetContainingInlinedBlock();
  jresult = new lldb::SBBlock((const lldb::SBBlock &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBBlock_GetSibling(void * jarg1) {
  void * jresult ;
  lldb::SBBlock *arg1 = (lldb::SBBlock *) 0 ;
  lldb::SBBlock result;
  
  arg1 = (lldb::SBBlock *)jarg1; 
  result = (arg1)->GetSibling();
  jresult = new lldb::SBBlock((const lldb::SBBlock &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBBlock_GetFirstChild(void * jarg1) {
  void * jresult ;
  lldb::SBBlock *arg1 = (lldb::SBBlock *) 0 ;
  lldb::SBBlock result;
  
  arg1 = (lldb::SBBlock *)jarg1; 
  result = (arg1)->GetFirstChild();
  jresult = new lldb::SBBlock((const lldb::SBBlock &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBBlock_GetNumRanges(void * jarg1) {
  void * jresult ;
  lldb::SBBlock *arg1 = (lldb::SBBlock *) 0 ;
  uint32_t result;
  
  arg1 = (lldb::SBBlock *)jarg1; 
  result = (arg1)->GetNumRanges();
  jresult = new uint32_t((const uint32_t &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBBlock_GetRangeStartAddress(void * jarg1, void * jarg2) {
  void * jresult ;
  lldb::SBBlock *arg1 = (lldb::SBBlock *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  lldb::SBAddress result;
  
  arg1 = (lldb::SBBlock *)jarg1; 
  argp2 = (uint32_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->GetRangeStartAddress(arg2);
  jresult = new lldb::SBAddress((const lldb::SBAddress &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBBlock_GetRangeEndAddress(void * jarg1, void * jarg2) {
  void * jresult ;
  lldb::SBBlock *arg1 = (lldb::SBBlock *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  lldb::SBAddress result;
  
  arg1 = (lldb::SBBlock *)jarg1; 
  argp2 = (uint32_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->GetRangeEndAddress(arg2);
  jresult = new lldb::SBAddress((const lldb::SBAddress &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBBlock_GetRangeIndexForBlockAddress(void * jarg1, void * jarg2) {
  void * jresult ;
  lldb::SBBlock *arg1 = (lldb::SBBlock *) 0 ;
  lldb::SBAddress arg2 ;
  lldb::SBAddress *argp2 ;
  uint32_t result;
  
  arg1 = (lldb::SBBlock *)jarg1; 
  argp2 = (lldb::SBAddress *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null lldb::SBAddress", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->GetRangeIndexForBlockAddress(arg2);
  jresult = new uint32_t((const uint32_t &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBBlock_GetDescription(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  lldb::SBBlock *arg1 = (lldb::SBBlock *) 0 ;
  lldb::SBStream *arg2 = 0 ;
  bool result;
  
  arg1 = (lldb::SBBlock *)jarg1; 
  arg2 = (lldb::SBStream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBStream & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->GetDescription(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBBlock_GetVariables__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5, int jarg6) {
  void * jresult ;
  lldb::SBBlock *arg1 = (lldb::SBBlock *) 0 ;
  lldb::SBFrame *arg2 = 0 ;
  bool arg3 ;
  bool arg4 ;
  bool arg5 ;
  lldb::DynamicValueType arg6 ;
  lldb::SBValueList result;
  
  arg1 = (lldb::SBBlock *)jarg1; 
  arg2 = (lldb::SBFrame *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBFrame & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  arg6 = (lldb::DynamicValueType)jarg6; 
  result = (arg1)->GetVariables(*arg2,arg3,arg4,arg5,arg6);
  jresult = new lldb::SBValueList((const lldb::SBValueList &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBBlock_GetVariables__SWIG_1(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5) {
  void * jresult ;
  lldb::SBBlock *arg1 = (lldb::SBBlock *) 0 ;
  lldb::SBTarget *arg2 = 0 ;
  bool arg3 ;
  bool arg4 ;
  bool arg5 ;
  lldb::SBValueList result;
  
  arg1 = (lldb::SBBlock *)jarg1; 
  arg2 = (lldb::SBTarget *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBTarget & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  result = (arg1)->GetVariables(*arg2,arg3,arg4,arg5);
  jresult = new lldb::SBValueList((const lldb::SBValueList &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SBBreakpoint__SWIG_0() {
  void * jresult ;
  lldb::SBBreakpoint *result = 0 ;
  
  result = (lldb::SBBreakpoint *)new lldb::SBBreakpoint();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SBBreakpoint__SWIG_1(void * jarg1) {
  void * jresult ;
  lldb::SBBreakpoint *arg1 = 0 ;
  lldb::SBBreakpoint *result = 0 ;
  
  arg1 = (lldb::SBBreakpoint *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBBreakpoint const & type is null", 0);
    return 0;
  } 
  result = (lldb::SBBreakpoint *)new lldb::SBBreakpoint((lldb::SBBreakpoint const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SBBreakpoint(void * jarg1) {
  lldb::SBBreakpoint *arg1 = (lldb::SBBreakpoint *) 0 ;
  
  arg1 = (lldb::SBBreakpoint *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBBreakpoint_GetID(void * jarg1) {
  void * jresult ;
  lldb::SBBreakpoint *arg1 = (lldb::SBBreakpoint *) 0 ;
  lldb::break_id_t result;
  
  arg1 = (lldb::SBBreakpoint *)jarg1; 
  result = ((lldb::SBBreakpoint const *)arg1)->GetID();
  jresult = new lldb::break_id_t((const lldb::break_id_t &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBBreakpoint_IsValid(void * jarg1) {
  unsigned int jresult ;
  lldb::SBBreakpoint *arg1 = (lldb::SBBreakpoint *) 0 ;
  bool result;
  
  arg1 = (lldb::SBBreakpoint *)jarg1; 
  result = (bool)((lldb::SBBreakpoint const *)arg1)->IsValid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBBreakpoint_ClearAllBreakpointSites(void * jarg1) {
  lldb::SBBreakpoint *arg1 = (lldb::SBBreakpoint *) 0 ;
  
  arg1 = (lldb::SBBreakpoint *)jarg1; 
  (arg1)->ClearAllBreakpointSites();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBBreakpoint_FindLocationByAddress(void * jarg1, void * jarg2) {
  void * jresult ;
  lldb::SBBreakpoint *arg1 = (lldb::SBBreakpoint *) 0 ;
  lldb::addr_t arg2 ;
  lldb::addr_t *argp2 ;
  lldb::SBBreakpointLocation result;
  
  arg1 = (lldb::SBBreakpoint *)jarg1; 
  argp2 = (lldb::addr_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null lldb::addr_t", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->FindLocationByAddress(arg2);
  jresult = new lldb::SBBreakpointLocation((const lldb::SBBreakpointLocation &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBBreakpoint_FindLocationIDByAddress(void * jarg1, void * jarg2) {
  void * jresult ;
  lldb::SBBreakpoint *arg1 = (lldb::SBBreakpoint *) 0 ;
  lldb::addr_t arg2 ;
  lldb::addr_t *argp2 ;
  lldb::break_id_t result;
  
  arg1 = (lldb::SBBreakpoint *)jarg1; 
  argp2 = (lldb::addr_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null lldb::addr_t", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->FindLocationIDByAddress(arg2);
  jresult = new lldb::break_id_t((const lldb::break_id_t &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBBreakpoint_FindLocationByID(void * jarg1, void * jarg2) {
  void * jresult ;
  lldb::SBBreakpoint *arg1 = (lldb::SBBreakpoint *) 0 ;
  lldb::break_id_t arg2 ;
  lldb::break_id_t *argp2 ;
  lldb::SBBreakpointLocation result;
  
  arg1 = (lldb::SBBreakpoint *)jarg1; 
  argp2 = (lldb::break_id_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null lldb::break_id_t", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->FindLocationByID(arg2);
  jresult = new lldb::SBBreakpointLocation((const lldb::SBBreakpointLocation &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBBreakpoint_GetLocationAtIndex(void * jarg1, void * jarg2) {
  void * jresult ;
  lldb::SBBreakpoint *arg1 = (lldb::SBBreakpoint *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  lldb::SBBreakpointLocation result;
  
  arg1 = (lldb::SBBreakpoint *)jarg1; 
  argp2 = (uint32_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->GetLocationAtIndex(arg2);
  jresult = new lldb::SBBreakpointLocation((const lldb::SBBreakpointLocation &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBBreakpoint_SetEnabled(void * jarg1, unsigned int jarg2) {
  lldb::SBBreakpoint *arg1 = (lldb::SBBreakpoint *) 0 ;
  bool arg2 ;
  
  arg1 = (lldb::SBBreakpoint *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetEnabled(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBBreakpoint_IsEnabled(void * jarg1) {
  unsigned int jresult ;
  lldb::SBBreakpoint *arg1 = (lldb::SBBreakpoint *) 0 ;
  bool result;
  
  arg1 = (lldb::SBBreakpoint *)jarg1; 
  result = (bool)(arg1)->IsEnabled();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBBreakpoint_GetHitCount(void * jarg1) {
  void * jresult ;
  lldb::SBBreakpoint *arg1 = (lldb::SBBreakpoint *) 0 ;
  uint32_t result;
  
  arg1 = (lldb::SBBreakpoint *)jarg1; 
  result = ((lldb::SBBreakpoint const *)arg1)->GetHitCount();
  jresult = new uint32_t((const uint32_t &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBBreakpoint_SetIgnoreCount(void * jarg1, void * jarg2) {
  lldb::SBBreakpoint *arg1 = (lldb::SBBreakpoint *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  arg1 = (lldb::SBBreakpoint *)jarg1; 
  argp2 = (uint32_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->SetIgnoreCount(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBBreakpoint_GetIgnoreCount(void * jarg1) {
  void * jresult ;
  lldb::SBBreakpoint *arg1 = (lldb::SBBreakpoint *) 0 ;
  uint32_t result;
  
  arg1 = (lldb::SBBreakpoint *)jarg1; 
  result = ((lldb::SBBreakpoint const *)arg1)->GetIgnoreCount();
  jresult = new uint32_t((const uint32_t &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBBreakpoint_SetCondition(void * jarg1, char * jarg2) {
  lldb::SBBreakpoint *arg1 = (lldb::SBBreakpoint *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (lldb::SBBreakpoint *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->SetCondition((char const *)arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SBBreakpoint_GetCondition(void * jarg1) {
  char * jresult ;
  lldb::SBBreakpoint *arg1 = (lldb::SBBreakpoint *) 0 ;
  char *result = 0 ;
  
  arg1 = (lldb::SBBreakpoint *)jarg1; 
  result = (char *)(arg1)->GetCondition();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBBreakpoint_SetThreadID(void * jarg1, void * jarg2) {
  lldb::SBBreakpoint *arg1 = (lldb::SBBreakpoint *) 0 ;
  lldb::tid_t arg2 ;
  lldb::tid_t *argp2 ;
  
  arg1 = (lldb::SBBreakpoint *)jarg1; 
  argp2 = (lldb::tid_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null lldb::tid_t", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->SetThreadID(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBBreakpoint_GetThreadID(void * jarg1) {
  void * jresult ;
  lldb::SBBreakpoint *arg1 = (lldb::SBBreakpoint *) 0 ;
  lldb::tid_t result;
  
  arg1 = (lldb::SBBreakpoint *)jarg1; 
  result = (arg1)->GetThreadID();
  jresult = new lldb::tid_t((const lldb::tid_t &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBBreakpoint_SetThreadIndex(void * jarg1, void * jarg2) {
  lldb::SBBreakpoint *arg1 = (lldb::SBBreakpoint *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  arg1 = (lldb::SBBreakpoint *)jarg1; 
  argp2 = (uint32_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->SetThreadIndex(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBBreakpoint_GetThreadIndex(void * jarg1) {
  void * jresult ;
  lldb::SBBreakpoint *arg1 = (lldb::SBBreakpoint *) 0 ;
  uint32_t result;
  
  arg1 = (lldb::SBBreakpoint *)jarg1; 
  result = ((lldb::SBBreakpoint const *)arg1)->GetThreadIndex();
  jresult = new uint32_t((const uint32_t &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBBreakpoint_SetThreadName(void * jarg1, char * jarg2) {
  lldb::SBBreakpoint *arg1 = (lldb::SBBreakpoint *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (lldb::SBBreakpoint *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->SetThreadName((char const *)arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SBBreakpoint_GetThreadName(void * jarg1) {
  char * jresult ;
  lldb::SBBreakpoint *arg1 = (lldb::SBBreakpoint *) 0 ;
  char *result = 0 ;
  
  arg1 = (lldb::SBBreakpoint *)jarg1; 
  result = (char *)((lldb::SBBreakpoint const *)arg1)->GetThreadName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBBreakpoint_SetQueueName(void * jarg1, char * jarg2) {
  lldb::SBBreakpoint *arg1 = (lldb::SBBreakpoint *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (lldb::SBBreakpoint *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->SetQueueName((char const *)arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SBBreakpoint_GetQueueName(void * jarg1) {
  char * jresult ;
  lldb::SBBreakpoint *arg1 = (lldb::SBBreakpoint *) 0 ;
  char *result = 0 ;
  
  arg1 = (lldb::SBBreakpoint *)jarg1; 
  result = (char *)((lldb::SBBreakpoint const *)arg1)->GetQueueName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBBreakpoint_SetCallback(void * jarg1, void * jarg2, void* jarg3) {
  lldb::SBBreakpoint *arg1 = (lldb::SBBreakpoint *) 0 ;
  lldb::SBBreakpoint::BreakpointHitCallback arg2 = (lldb::SBBreakpoint::BreakpointHitCallback) 0 ;
  void *arg3 = (void *) 0 ;
  
  arg1 = (lldb::SBBreakpoint *)jarg1; 
  arg2 = (lldb::SBBreakpoint::BreakpointHitCallback)jarg2; 
  arg3 = (void *)jarg3; /* IntPtr */ 
  (arg1)->SetCallback(arg2,arg3);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_SBBreakpoint_GetNumResolvedLocations(void * jarg1) {
  unsigned long jresult ;
  lldb::SBBreakpoint *arg1 = (lldb::SBBreakpoint *) 0 ;
  size_t result;
  
  arg1 = (lldb::SBBreakpoint *)jarg1; 
  result = ((lldb::SBBreakpoint const *)arg1)->GetNumResolvedLocations();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_SBBreakpoint_GetNumLocations(void * jarg1) {
  unsigned long jresult ;
  lldb::SBBreakpoint *arg1 = (lldb::SBBreakpoint *) 0 ;
  size_t result;
  
  arg1 = (lldb::SBBreakpoint *)jarg1; 
  result = ((lldb::SBBreakpoint const *)arg1)->GetNumLocations();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBBreakpoint_GetDescription(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  lldb::SBBreakpoint *arg1 = (lldb::SBBreakpoint *) 0 ;
  lldb::SBStream *arg2 = 0 ;
  bool result;
  
  arg1 = (lldb::SBBreakpoint *)jarg1; 
  arg2 = (lldb::SBStream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBStream & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->GetDescription(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBBreakpoint_EventIsBreakpointEvent(void * jarg1) {
  unsigned int jresult ;
  lldb::SBEvent *arg1 = 0 ;
  bool result;
  
  arg1 = (lldb::SBEvent *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBEvent const & type is null", 0);
    return 0;
  } 
  result = (bool)lldb::SBBreakpoint::EventIsBreakpointEvent((lldb::SBEvent const &)*arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SBBreakpoint_GetBreakpointEventTypeFromEvent(void * jarg1) {
  int jresult ;
  lldb::SBEvent *arg1 = 0 ;
  lldb::BreakpointEventType result;
  
  arg1 = (lldb::SBEvent *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBEvent const & type is null", 0);
    return 0;
  } 
  result = (lldb::BreakpointEventType)lldb::SBBreakpoint::GetBreakpointEventTypeFromEvent((lldb::SBEvent const &)*arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBBreakpoint_GetBreakpointFromEvent(void * jarg1) {
  void * jresult ;
  lldb::SBEvent *arg1 = 0 ;
  lldb::SBBreakpoint result;
  
  arg1 = (lldb::SBEvent *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBEvent const & type is null", 0);
    return 0;
  } 
  result = lldb::SBBreakpoint::GetBreakpointFromEvent((lldb::SBEvent const &)*arg1);
  jresult = new lldb::SBBreakpoint((const lldb::SBBreakpoint &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBBreakpoint_GetBreakpointLocationAtIndexFromEvent(void * jarg1, void * jarg2) {
  void * jresult ;
  lldb::SBEvent *arg1 = 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  lldb::SBBreakpointLocation result;
  
  arg1 = (lldb::SBEvent *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBEvent const & type is null", 0);
    return 0;
  } 
  argp2 = (uint32_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = lldb::SBBreakpoint::GetBreakpointLocationAtIndexFromEvent((lldb::SBEvent const &)*arg1,arg2);
  jresult = new lldb::SBBreakpointLocation((const lldb::SBBreakpointLocation &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBBreakpoint_GetNumBreakpointLocationsFromEvent(void * jarg1) {
  void * jresult ;
  lldb::SBEvent *arg1 = 0 ;
  uint32_t result;
  
  arg1 = (lldb::SBEvent *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBEvent const & type is null", 0);
    return 0;
  } 
  result = lldb::SBBreakpoint::GetNumBreakpointLocationsFromEvent((lldb::SBEvent const &)*arg1);
  jresult = new uint32_t((const uint32_t &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SBBreakpointLocation__SWIG_0() {
  void * jresult ;
  lldb::SBBreakpointLocation *result = 0 ;
  
  result = (lldb::SBBreakpointLocation *)new lldb::SBBreakpointLocation();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SBBreakpointLocation__SWIG_1(void * jarg1) {
  void * jresult ;
  lldb::SBBreakpointLocation *arg1 = 0 ;
  lldb::SBBreakpointLocation *result = 0 ;
  
  arg1 = (lldb::SBBreakpointLocation *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBBreakpointLocation const & type is null", 0);
    return 0;
  } 
  result = (lldb::SBBreakpointLocation *)new lldb::SBBreakpointLocation((lldb::SBBreakpointLocation const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SBBreakpointLocation(void * jarg1) {
  lldb::SBBreakpointLocation *arg1 = (lldb::SBBreakpointLocation *) 0 ;
  
  arg1 = (lldb::SBBreakpointLocation *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBBreakpointLocation_GetID(void * jarg1) {
  void * jresult ;
  lldb::SBBreakpointLocation *arg1 = (lldb::SBBreakpointLocation *) 0 ;
  lldb::break_id_t result;
  
  arg1 = (lldb::SBBreakpointLocation *)jarg1; 
  result = (arg1)->GetID();
  jresult = new lldb::break_id_t((const lldb::break_id_t &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBBreakpointLocation_IsValid(void * jarg1) {
  unsigned int jresult ;
  lldb::SBBreakpointLocation *arg1 = (lldb::SBBreakpointLocation *) 0 ;
  bool result;
  
  arg1 = (lldb::SBBreakpointLocation *)jarg1; 
  result = (bool)((lldb::SBBreakpointLocation const *)arg1)->IsValid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBBreakpointLocation_GetAddress(void * jarg1) {
  void * jresult ;
  lldb::SBBreakpointLocation *arg1 = (lldb::SBBreakpointLocation *) 0 ;
  lldb::SBAddress result;
  
  arg1 = (lldb::SBBreakpointLocation *)jarg1; 
  result = (arg1)->GetAddress();
  jresult = new lldb::SBAddress((const lldb::SBAddress &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBBreakpointLocation_GetLoadAddress(void * jarg1) {
  void * jresult ;
  lldb::SBBreakpointLocation *arg1 = (lldb::SBBreakpointLocation *) 0 ;
  lldb::addr_t result;
  
  arg1 = (lldb::SBBreakpointLocation *)jarg1; 
  result = (arg1)->GetLoadAddress();
  jresult = new lldb::addr_t((const lldb::addr_t &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBBreakpointLocation_SetEnabled(void * jarg1, unsigned int jarg2) {
  lldb::SBBreakpointLocation *arg1 = (lldb::SBBreakpointLocation *) 0 ;
  bool arg2 ;
  
  arg1 = (lldb::SBBreakpointLocation *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetEnabled(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBBreakpointLocation_IsEnabled(void * jarg1) {
  unsigned int jresult ;
  lldb::SBBreakpointLocation *arg1 = (lldb::SBBreakpointLocation *) 0 ;
  bool result;
  
  arg1 = (lldb::SBBreakpointLocation *)jarg1; 
  result = (bool)(arg1)->IsEnabled();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBBreakpointLocation_GetIgnoreCount(void * jarg1) {
  void * jresult ;
  lldb::SBBreakpointLocation *arg1 = (lldb::SBBreakpointLocation *) 0 ;
  uint32_t result;
  
  arg1 = (lldb::SBBreakpointLocation *)jarg1; 
  result = (arg1)->GetIgnoreCount();
  jresult = new uint32_t((const uint32_t &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBBreakpointLocation_SetIgnoreCount(void * jarg1, void * jarg2) {
  lldb::SBBreakpointLocation *arg1 = (lldb::SBBreakpointLocation *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  arg1 = (lldb::SBBreakpointLocation *)jarg1; 
  argp2 = (uint32_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->SetIgnoreCount(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBBreakpointLocation_SetCondition(void * jarg1, char * jarg2) {
  lldb::SBBreakpointLocation *arg1 = (lldb::SBBreakpointLocation *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (lldb::SBBreakpointLocation *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->SetCondition((char const *)arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SBBreakpointLocation_GetCondition(void * jarg1) {
  char * jresult ;
  lldb::SBBreakpointLocation *arg1 = (lldb::SBBreakpointLocation *) 0 ;
  char *result = 0 ;
  
  arg1 = (lldb::SBBreakpointLocation *)jarg1; 
  result = (char *)(arg1)->GetCondition();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBBreakpointLocation_SetThreadID(void * jarg1, void * jarg2) {
  lldb::SBBreakpointLocation *arg1 = (lldb::SBBreakpointLocation *) 0 ;
  lldb::tid_t arg2 ;
  lldb::tid_t *argp2 ;
  
  arg1 = (lldb::SBBreakpointLocation *)jarg1; 
  argp2 = (lldb::tid_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null lldb::tid_t", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->SetThreadID(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBBreakpointLocation_GetThreadID(void * jarg1) {
  void * jresult ;
  lldb::SBBreakpointLocation *arg1 = (lldb::SBBreakpointLocation *) 0 ;
  lldb::tid_t result;
  
  arg1 = (lldb::SBBreakpointLocation *)jarg1; 
  result = (arg1)->GetThreadID();
  jresult = new lldb::tid_t((const lldb::tid_t &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBBreakpointLocation_SetThreadIndex(void * jarg1, void * jarg2) {
  lldb::SBBreakpointLocation *arg1 = (lldb::SBBreakpointLocation *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  arg1 = (lldb::SBBreakpointLocation *)jarg1; 
  argp2 = (uint32_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->SetThreadIndex(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBBreakpointLocation_GetThreadIndex(void * jarg1) {
  void * jresult ;
  lldb::SBBreakpointLocation *arg1 = (lldb::SBBreakpointLocation *) 0 ;
  uint32_t result;
  
  arg1 = (lldb::SBBreakpointLocation *)jarg1; 
  result = ((lldb::SBBreakpointLocation const *)arg1)->GetThreadIndex();
  jresult = new uint32_t((const uint32_t &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBBreakpointLocation_SetThreadName(void * jarg1, char * jarg2) {
  lldb::SBBreakpointLocation *arg1 = (lldb::SBBreakpointLocation *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (lldb::SBBreakpointLocation *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->SetThreadName((char const *)arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SBBreakpointLocation_GetThreadName(void * jarg1) {
  char * jresult ;
  lldb::SBBreakpointLocation *arg1 = (lldb::SBBreakpointLocation *) 0 ;
  char *result = 0 ;
  
  arg1 = (lldb::SBBreakpointLocation *)jarg1; 
  result = (char *)((lldb::SBBreakpointLocation const *)arg1)->GetThreadName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBBreakpointLocation_SetQueueName(void * jarg1, char * jarg2) {
  lldb::SBBreakpointLocation *arg1 = (lldb::SBBreakpointLocation *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (lldb::SBBreakpointLocation *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->SetQueueName((char const *)arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SBBreakpointLocation_GetQueueName(void * jarg1) {
  char * jresult ;
  lldb::SBBreakpointLocation *arg1 = (lldb::SBBreakpointLocation *) 0 ;
  char *result = 0 ;
  
  arg1 = (lldb::SBBreakpointLocation *)jarg1; 
  result = (char *)((lldb::SBBreakpointLocation const *)arg1)->GetQueueName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBBreakpointLocation_IsResolved(void * jarg1) {
  unsigned int jresult ;
  lldb::SBBreakpointLocation *arg1 = (lldb::SBBreakpointLocation *) 0 ;
  bool result;
  
  arg1 = (lldb::SBBreakpointLocation *)jarg1; 
  result = (bool)(arg1)->IsResolved();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBBreakpointLocation_GetDescription(void * jarg1, void * jarg2, int jarg3) {
  unsigned int jresult ;
  lldb::SBBreakpointLocation *arg1 = (lldb::SBBreakpointLocation *) 0 ;
  lldb::SBStream *arg2 = 0 ;
  lldb::DescriptionLevel arg3 ;
  bool result;
  
  arg1 = (lldb::SBBreakpointLocation *)jarg1; 
  arg2 = (lldb::SBStream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBStream & type is null", 0);
    return 0;
  } 
  arg3 = (lldb::DescriptionLevel)jarg3; 
  result = (bool)(arg1)->GetDescription(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBBreakpointLocation_GetBreakpoint(void * jarg1) {
  void * jresult ;
  lldb::SBBreakpointLocation *arg1 = (lldb::SBBreakpointLocation *) 0 ;
  lldb::SBBreakpoint result;
  
  arg1 = (lldb::SBBreakpointLocation *)jarg1; 
  result = (arg1)->GetBreakpoint();
  jresult = new lldb::SBBreakpoint((const lldb::SBBreakpoint &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SBBroadcaster__SWIG_0() {
  void * jresult ;
  lldb::SBBroadcaster *result = 0 ;
  
  result = (lldb::SBBroadcaster *)new lldb::SBBroadcaster();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SBBroadcaster__SWIG_1(char * jarg1) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  lldb::SBBroadcaster *result = 0 ;
  
  arg1 = (char *)jarg1; 
  result = (lldb::SBBroadcaster *)new lldb::SBBroadcaster((char const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SBBroadcaster__SWIG_2(void * jarg1) {
  void * jresult ;
  lldb::SBBroadcaster *arg1 = 0 ;
  lldb::SBBroadcaster *result = 0 ;
  
  arg1 = (lldb::SBBroadcaster *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBBroadcaster const & type is null", 0);
    return 0;
  } 
  result = (lldb::SBBroadcaster *)new lldb::SBBroadcaster((lldb::SBBroadcaster const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SBBroadcaster(void * jarg1) {
  lldb::SBBroadcaster *arg1 = (lldb::SBBroadcaster *) 0 ;
  
  arg1 = (lldb::SBBroadcaster *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBBroadcaster_IsValid(void * jarg1) {
  unsigned int jresult ;
  lldb::SBBroadcaster *arg1 = (lldb::SBBroadcaster *) 0 ;
  bool result;
  
  arg1 = (lldb::SBBroadcaster *)jarg1; 
  result = (bool)((lldb::SBBroadcaster const *)arg1)->IsValid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBBroadcaster_Clear(void * jarg1) {
  lldb::SBBroadcaster *arg1 = (lldb::SBBroadcaster *) 0 ;
  
  arg1 = (lldb::SBBroadcaster *)jarg1; 
  (arg1)->Clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBBroadcaster_BroadcastEventByType__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  lldb::SBBroadcaster *arg1 = (lldb::SBBroadcaster *) 0 ;
  uint32_t arg2 ;
  bool arg3 ;
  uint32_t *argp2 ;
  
  arg1 = (lldb::SBBroadcaster *)jarg1; 
  argp2 = (uint32_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return ;
  }
  arg2 = *argp2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->BroadcastEventByType(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBBroadcaster_BroadcastEventByType__SWIG_1(void * jarg1, void * jarg2) {
  lldb::SBBroadcaster *arg1 = (lldb::SBBroadcaster *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  arg1 = (lldb::SBBroadcaster *)jarg1; 
  argp2 = (uint32_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->BroadcastEventByType(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBBroadcaster_BroadcastEvent__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  lldb::SBBroadcaster *arg1 = (lldb::SBBroadcaster *) 0 ;
  lldb::SBEvent *arg2 = 0 ;
  bool arg3 ;
  
  arg1 = (lldb::SBBroadcaster *)jarg1; 
  arg2 = (lldb::SBEvent *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBEvent const & type is null", 0);
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  (arg1)->BroadcastEvent((lldb::SBEvent const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBBroadcaster_BroadcastEvent__SWIG_1(void * jarg1, void * jarg2) {
  lldb::SBBroadcaster *arg1 = (lldb::SBBroadcaster *) 0 ;
  lldb::SBEvent *arg2 = 0 ;
  
  arg1 = (lldb::SBBroadcaster *)jarg1; 
  arg2 = (lldb::SBEvent *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBEvent const & type is null", 0);
    return ;
  } 
  (arg1)->BroadcastEvent((lldb::SBEvent const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBBroadcaster_AddInitialEventsToListener(void * jarg1, void * jarg2, void * jarg3) {
  lldb::SBBroadcaster *arg1 = (lldb::SBBroadcaster *) 0 ;
  lldb::SBListener *arg2 = 0 ;
  uint32_t arg3 ;
  uint32_t *argp3 ;
  
  arg1 = (lldb::SBBroadcaster *)jarg1; 
  arg2 = (lldb::SBListener *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBListener const & type is null", 0);
    return ;
  } 
  argp3 = (uint32_t *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return ;
  }
  arg3 = *argp3; 
  (arg1)->AddInitialEventsToListener((lldb::SBListener const &)*arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBBroadcaster_AddListener(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  lldb::SBBroadcaster *arg1 = (lldb::SBBroadcaster *) 0 ;
  lldb::SBListener *arg2 = 0 ;
  uint32_t arg3 ;
  uint32_t *argp3 ;
  uint32_t result;
  
  arg1 = (lldb::SBBroadcaster *)jarg1; 
  arg2 = (lldb::SBListener *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBListener const & type is null", 0);
    return 0;
  } 
  argp3 = (uint32_t *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return 0;
  }
  arg3 = *argp3; 
  result = (arg1)->AddListener((lldb::SBListener const &)*arg2,arg3);
  jresult = new uint32_t((const uint32_t &)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SBBroadcaster_GetName(void * jarg1) {
  char * jresult ;
  lldb::SBBroadcaster *arg1 = (lldb::SBBroadcaster *) 0 ;
  char *result = 0 ;
  
  arg1 = (lldb::SBBroadcaster *)jarg1; 
  result = (char *)((lldb::SBBroadcaster const *)arg1)->GetName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBBroadcaster_EventTypeHasListeners(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  lldb::SBBroadcaster *arg1 = (lldb::SBBroadcaster *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  bool result;
  
  arg1 = (lldb::SBBroadcaster *)jarg1; 
  argp2 = (uint32_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)(arg1)->EventTypeHasListeners(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBBroadcaster_RemoveListener__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  lldb::SBBroadcaster *arg1 = (lldb::SBBroadcaster *) 0 ;
  lldb::SBListener *arg2 = 0 ;
  uint32_t arg3 ;
  uint32_t *argp3 ;
  bool result;
  
  arg1 = (lldb::SBBroadcaster *)jarg1; 
  arg2 = (lldb::SBListener *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBListener const & type is null", 0);
    return 0;
  } 
  argp3 = (uint32_t *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return 0;
  }
  arg3 = *argp3; 
  result = (bool)(arg1)->RemoveListener((lldb::SBListener const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBBroadcaster_RemoveListener__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  lldb::SBBroadcaster *arg1 = (lldb::SBBroadcaster *) 0 ;
  lldb::SBListener *arg2 = 0 ;
  bool result;
  
  arg1 = (lldb::SBBroadcaster *)jarg1; 
  arg2 = (lldb::SBListener *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBListener const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->RemoveListener((lldb::SBListener const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SBCommandInterpreter_eBroadcastBitThreadShouldExit_get() {
  int jresult ;
  int result;
  
  result = (int)lldb::SBCommandInterpreter::eBroadcastBitThreadShouldExit;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SBCommandInterpreter_eBroadcastBitResetPrompt_get() {
  int jresult ;
  int result;
  
  result = (int)lldb::SBCommandInterpreter::eBroadcastBitResetPrompt;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SBCommandInterpreter_eBroadcastBitQuitCommandReceived_get() {
  int jresult ;
  int result;
  
  result = (int)lldb::SBCommandInterpreter::eBroadcastBitQuitCommandReceived;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SBCommandInterpreter_eBroadcastBitAsynchronousOutputData_get() {
  int jresult ;
  int result;
  
  result = (int)lldb::SBCommandInterpreter::eBroadcastBitAsynchronousOutputData;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SBCommandInterpreter_eBroadcastBitAsynchronousErrorData_get() {
  int jresult ;
  int result;
  
  result = (int)lldb::SBCommandInterpreter::eBroadcastBitAsynchronousErrorData;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SBCommandInterpreter(void * jarg1) {
  void * jresult ;
  lldb::SBCommandInterpreter *arg1 = 0 ;
  lldb::SBCommandInterpreter *result = 0 ;
  
  arg1 = (lldb::SBCommandInterpreter *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBCommandInterpreter const & type is null", 0);
    return 0;
  } 
  result = (lldb::SBCommandInterpreter *)new lldb::SBCommandInterpreter((lldb::SBCommandInterpreter const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SBCommandInterpreter(void * jarg1) {
  lldb::SBCommandInterpreter *arg1 = (lldb::SBCommandInterpreter *) 0 ;
  
  arg1 = (lldb::SBCommandInterpreter *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SBCommandInterpreter_GetArgumentTypeAsCString(int jarg1) {
  char * jresult ;
  lldb::CommandArgumentType arg1 ;
  char *result = 0 ;
  
  arg1 = (lldb::CommandArgumentType)jarg1; 
  result = (char *)lldb::SBCommandInterpreter::GetArgumentTypeAsCString(arg1);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SBCommandInterpreter_GetArgumentDescriptionAsCString(int jarg1) {
  char * jresult ;
  lldb::CommandArgumentType arg1 ;
  char *result = 0 ;
  
  arg1 = (lldb::CommandArgumentType)jarg1; 
  result = (char *)lldb::SBCommandInterpreter::GetArgumentDescriptionAsCString(arg1);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBCommandInterpreter_IsValid(void * jarg1) {
  unsigned int jresult ;
  lldb::SBCommandInterpreter *arg1 = (lldb::SBCommandInterpreter *) 0 ;
  bool result;
  
  arg1 = (lldb::SBCommandInterpreter *)jarg1; 
  result = (bool)((lldb::SBCommandInterpreter const *)arg1)->IsValid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBCommandInterpreter_CommandExists(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  lldb::SBCommandInterpreter *arg1 = (lldb::SBCommandInterpreter *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (lldb::SBCommandInterpreter *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->CommandExists((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBCommandInterpreter_AliasExists(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  lldb::SBCommandInterpreter *arg1 = (lldb::SBCommandInterpreter *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (lldb::SBCommandInterpreter *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->AliasExists((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBCommandInterpreter_GetBroadcaster(void * jarg1) {
  void * jresult ;
  lldb::SBCommandInterpreter *arg1 = (lldb::SBCommandInterpreter *) 0 ;
  lldb::SBBroadcaster result;
  
  arg1 = (lldb::SBCommandInterpreter *)jarg1; 
  result = (arg1)->GetBroadcaster();
  jresult = new lldb::SBBroadcaster((const lldb::SBBroadcaster &)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SBCommandInterpreter_GetBroadcasterClass() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)lldb::SBCommandInterpreter::GetBroadcasterClass();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBCommandInterpreter_HasCommands(void * jarg1) {
  unsigned int jresult ;
  lldb::SBCommandInterpreter *arg1 = (lldb::SBCommandInterpreter *) 0 ;
  bool result;
  
  arg1 = (lldb::SBCommandInterpreter *)jarg1; 
  result = (bool)(arg1)->HasCommands();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBCommandInterpreter_HasAliases(void * jarg1) {
  unsigned int jresult ;
  lldb::SBCommandInterpreter *arg1 = (lldb::SBCommandInterpreter *) 0 ;
  bool result;
  
  arg1 = (lldb::SBCommandInterpreter *)jarg1; 
  result = (bool)(arg1)->HasAliases();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBCommandInterpreter_HasAliasOptions(void * jarg1) {
  unsigned int jresult ;
  lldb::SBCommandInterpreter *arg1 = (lldb::SBCommandInterpreter *) 0 ;
  bool result;
  
  arg1 = (lldb::SBCommandInterpreter *)jarg1; 
  result = (bool)(arg1)->HasAliasOptions();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBCommandInterpreter_GetProcess(void * jarg1) {
  void * jresult ;
  lldb::SBCommandInterpreter *arg1 = (lldb::SBCommandInterpreter *) 0 ;
  lldb::SBProcess result;
  
  arg1 = (lldb::SBCommandInterpreter *)jarg1; 
  result = (arg1)->GetProcess();
  jresult = new lldb::SBProcess((const lldb::SBProcess &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBCommandInterpreter_SourceInitFileInHomeDirectory(void * jarg1, void * jarg2) {
  lldb::SBCommandInterpreter *arg1 = (lldb::SBCommandInterpreter *) 0 ;
  lldb::SBCommandReturnObject *arg2 = 0 ;
  
  arg1 = (lldb::SBCommandInterpreter *)jarg1; 
  arg2 = (lldb::SBCommandReturnObject *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBCommandReturnObject & type is null", 0);
    return ;
  } 
  (arg1)->SourceInitFileInHomeDirectory(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBCommandInterpreter_SourceInitFileInCurrentWorkingDirectory(void * jarg1, void * jarg2) {
  lldb::SBCommandInterpreter *arg1 = (lldb::SBCommandInterpreter *) 0 ;
  lldb::SBCommandReturnObject *arg2 = 0 ;
  
  arg1 = (lldb::SBCommandInterpreter *)jarg1; 
  arg2 = (lldb::SBCommandReturnObject *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBCommandReturnObject & type is null", 0);
    return ;
  } 
  (arg1)->SourceInitFileInCurrentWorkingDirectory(*arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_SBCommandInterpreter_HandleCommand__SWIG_0(void * jarg1, char * jarg2, void * jarg3, unsigned int jarg4) {
  int jresult ;
  lldb::SBCommandInterpreter *arg1 = (lldb::SBCommandInterpreter *) 0 ;
  char *arg2 = (char *) 0 ;
  lldb::SBCommandReturnObject *arg3 = 0 ;
  bool arg4 ;
  lldb::ReturnStatus result;
  
  arg1 = (lldb::SBCommandInterpreter *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (lldb::SBCommandReturnObject *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBCommandReturnObject & type is null", 0);
    return 0;
  } 
  arg4 = jarg4 ? true : false; 
  result = (lldb::ReturnStatus)(arg1)->HandleCommand((char const *)arg2,*arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SBCommandInterpreter_HandleCommand__SWIG_1(void * jarg1, char * jarg2, void * jarg3) {
  int jresult ;
  lldb::SBCommandInterpreter *arg1 = (lldb::SBCommandInterpreter *) 0 ;
  char *arg2 = (char *) 0 ;
  lldb::SBCommandReturnObject *arg3 = 0 ;
  lldb::ReturnStatus result;
  
  arg1 = (lldb::SBCommandInterpreter *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (lldb::SBCommandReturnObject *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBCommandReturnObject & type is null", 0);
    return 0;
  } 
  result = (lldb::ReturnStatus)(arg1)->HandleCommand((char const *)arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SBCommandInterpreter_HandleCompletion(void * jarg1, char * jarg2, void * jarg3, int jarg4, int jarg5, void * jarg6) {
  int jresult ;
  lldb::SBCommandInterpreter *arg1 = (lldb::SBCommandInterpreter *) 0 ;
  char *arg2 = (char *) 0 ;
  uint32_t arg3 ;
  int arg4 ;
  int arg5 ;
  lldb::SBStringList *arg6 = 0 ;
  uint32_t *argp3 ;
  int result;
  
  arg1 = (lldb::SBCommandInterpreter *)jarg1; 
  arg2 = (char *)jarg2; 
  argp3 = (uint32_t *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return 0;
  }
  arg3 = *argp3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (lldb::SBStringList *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBStringList & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HandleCompletion((char const *)arg2,arg3,arg4,arg5,*arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SBCommandReturnObject__SWIG_0() {
  void * jresult ;
  lldb::SBCommandReturnObject *result = 0 ;
  
  result = (lldb::SBCommandReturnObject *)new lldb::SBCommandReturnObject();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SBCommandReturnObject__SWIG_1(void * jarg1) {
  void * jresult ;
  lldb::SBCommandReturnObject *arg1 = 0 ;
  lldb::SBCommandReturnObject *result = 0 ;
  
  arg1 = (lldb::SBCommandReturnObject *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBCommandReturnObject const & type is null", 0);
    return 0;
  } 
  result = (lldb::SBCommandReturnObject *)new lldb::SBCommandReturnObject((lldb::SBCommandReturnObject const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SBCommandReturnObject(void * jarg1) {
  lldb::SBCommandReturnObject *arg1 = (lldb::SBCommandReturnObject *) 0 ;
  
  arg1 = (lldb::SBCommandReturnObject *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBCommandReturnObject_IsValid(void * jarg1) {
  unsigned int jresult ;
  lldb::SBCommandReturnObject *arg1 = (lldb::SBCommandReturnObject *) 0 ;
  bool result;
  
  arg1 = (lldb::SBCommandReturnObject *)jarg1; 
  result = (bool)((lldb::SBCommandReturnObject const *)arg1)->IsValid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SBCommandReturnObject_GetOutput(void * jarg1) {
  char * jresult ;
  lldb::SBCommandReturnObject *arg1 = (lldb::SBCommandReturnObject *) 0 ;
  char *result = 0 ;
  
  arg1 = (lldb::SBCommandReturnObject *)jarg1; 
  result = (char *)(arg1)->GetOutput();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SBCommandReturnObject_GetError(void * jarg1) {
  char * jresult ;
  lldb::SBCommandReturnObject *arg1 = (lldb::SBCommandReturnObject *) 0 ;
  char *result = 0 ;
  
  arg1 = (lldb::SBCommandReturnObject *)jarg1; 
  result = (char *)(arg1)->GetError();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_SBCommandReturnObject_PutOutput(void * jarg1, void * jarg2) {
  unsigned long jresult ;
  lldb::SBCommandReturnObject *arg1 = (lldb::SBCommandReturnObject *) 0 ;
  FILE *arg2 = (FILE *) 0 ;
  size_t result;
  
  arg1 = (lldb::SBCommandReturnObject *)jarg1; 
  arg2 = (FILE *)jarg2; 
  result = (arg1)->PutOutput(arg2);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_SBCommandReturnObject_GetOutputSize(void * jarg1) {
  unsigned long jresult ;
  lldb::SBCommandReturnObject *arg1 = (lldb::SBCommandReturnObject *) 0 ;
  size_t result;
  
  arg1 = (lldb::SBCommandReturnObject *)jarg1; 
  result = (arg1)->GetOutputSize();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_SBCommandReturnObject_GetErrorSize(void * jarg1) {
  unsigned long jresult ;
  lldb::SBCommandReturnObject *arg1 = (lldb::SBCommandReturnObject *) 0 ;
  size_t result;
  
  arg1 = (lldb::SBCommandReturnObject *)jarg1; 
  result = (arg1)->GetErrorSize();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_SBCommandReturnObject_PutError(void * jarg1, void * jarg2) {
  unsigned long jresult ;
  lldb::SBCommandReturnObject *arg1 = (lldb::SBCommandReturnObject *) 0 ;
  FILE *arg2 = (FILE *) 0 ;
  size_t result;
  
  arg1 = (lldb::SBCommandReturnObject *)jarg1; 
  arg2 = (FILE *)jarg2; 
  result = (arg1)->PutError(arg2);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBCommandReturnObject_Clear(void * jarg1) {
  lldb::SBCommandReturnObject *arg1 = (lldb::SBCommandReturnObject *) 0 ;
  
  arg1 = (lldb::SBCommandReturnObject *)jarg1; 
  (arg1)->Clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBCommandReturnObject_SetStatus(void * jarg1, int jarg2) {
  lldb::SBCommandReturnObject *arg1 = (lldb::SBCommandReturnObject *) 0 ;
  lldb::ReturnStatus arg2 ;
  
  arg1 = (lldb::SBCommandReturnObject *)jarg1; 
  arg2 = (lldb::ReturnStatus)jarg2; 
  (arg1)->SetStatus(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_SBCommandReturnObject_GetStatus(void * jarg1) {
  int jresult ;
  lldb::SBCommandReturnObject *arg1 = (lldb::SBCommandReturnObject *) 0 ;
  lldb::ReturnStatus result;
  
  arg1 = (lldb::SBCommandReturnObject *)jarg1; 
  result = (lldb::ReturnStatus)(arg1)->GetStatus();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBCommandReturnObject_Succeeded(void * jarg1) {
  unsigned int jresult ;
  lldb::SBCommandReturnObject *arg1 = (lldb::SBCommandReturnObject *) 0 ;
  bool result;
  
  arg1 = (lldb::SBCommandReturnObject *)jarg1; 
  result = (bool)(arg1)->Succeeded();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBCommandReturnObject_HasResult(void * jarg1) {
  unsigned int jresult ;
  lldb::SBCommandReturnObject *arg1 = (lldb::SBCommandReturnObject *) 0 ;
  bool result;
  
  arg1 = (lldb::SBCommandReturnObject *)jarg1; 
  result = (bool)(arg1)->HasResult();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBCommandReturnObject_AppendMessage(void * jarg1, char * jarg2) {
  lldb::SBCommandReturnObject *arg1 = (lldb::SBCommandReturnObject *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (lldb::SBCommandReturnObject *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->AppendMessage((char const *)arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBCommandReturnObject_GetDescription(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  lldb::SBCommandReturnObject *arg1 = (lldb::SBCommandReturnObject *) 0 ;
  lldb::SBStream *arg2 = 0 ;
  bool result;
  
  arg1 = (lldb::SBCommandReturnObject *)jarg1; 
  arg2 = (lldb::SBStream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBStream & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->GetDescription(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBCommandReturnObject_SetImmediateOutputFile(void * jarg1, void * jarg2) {
  lldb::SBCommandReturnObject *arg1 = (lldb::SBCommandReturnObject *) 0 ;
  FILE *arg2 = (FILE *) 0 ;
  
  arg1 = (lldb::SBCommandReturnObject *)jarg1; 
  arg2 = (FILE *)jarg2; 
  (arg1)->SetImmediateOutputFile(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBCommandReturnObject_SetImmediateErrorFile(void * jarg1, void * jarg2) {
  lldb::SBCommandReturnObject *arg1 = (lldb::SBCommandReturnObject *) 0 ;
  FILE *arg2 = (FILE *) 0 ;
  
  arg1 = (lldb::SBCommandReturnObject *)jarg1; 
  arg2 = (FILE *)jarg2; 
  (arg1)->SetImmediateErrorFile(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBCommandReturnObject_PutCString__SWIG_0(void * jarg1, char * jarg2, int jarg3) {
  lldb::SBCommandReturnObject *arg1 = (lldb::SBCommandReturnObject *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  
  arg1 = (lldb::SBCommandReturnObject *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->PutCString((char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBCommandReturnObject_PutCString__SWIG_1(void * jarg1, char * jarg2) {
  lldb::SBCommandReturnObject *arg1 = (lldb::SBCommandReturnObject *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (lldb::SBCommandReturnObject *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->PutCString((char const *)arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_SBCommandReturnObject_Printf(void * jarg1, char * jarg2) {
  unsigned long jresult ;
  lldb::SBCommandReturnObject *arg1 = (lldb::SBCommandReturnObject *) 0 ;
  char *arg2 = (char *) 0 ;
  void *arg3 = 0 ;
  size_t result;
  
  arg1 = (lldb::SBCommandReturnObject *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (arg1)->Printf((char const *)arg2,arg3);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SBCommunication_eBroadcastBitDisconnected_get() {
  int jresult ;
  int result;
  
  result = (int)lldb::SBCommunication::eBroadcastBitDisconnected;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SBCommunication_eBroadcastBitReadThreadGotBytes_get() {
  int jresult ;
  int result;
  
  result = (int)lldb::SBCommunication::eBroadcastBitReadThreadGotBytes;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SBCommunication_eBroadcastBitReadThreadDidExit_get() {
  int jresult ;
  int result;
  
  result = (int)lldb::SBCommunication::eBroadcastBitReadThreadDidExit;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SBCommunication_eBroadcastBitReadThreadShouldExit_get() {
  int jresult ;
  int result;
  
  result = (int)lldb::SBCommunication::eBroadcastBitReadThreadShouldExit;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SBCommunication_eBroadcastBitPacketAvailable_get() {
  int jresult ;
  int result;
  
  result = (int)lldb::SBCommunication::eBroadcastBitPacketAvailable;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SBCommunication_eAllEventBits_get() {
  int jresult ;
  int result;
  
  result = (int)lldb::SBCommunication::eAllEventBits;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SBCommunication__SWIG_0() {
  void * jresult ;
  lldb::SBCommunication *result = 0 ;
  
  result = (lldb::SBCommunication *)new lldb::SBCommunication();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SBCommunication__SWIG_1(char * jarg1) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  lldb::SBCommunication *result = 0 ;
  
  arg1 = (char *)jarg1; 
  result = (lldb::SBCommunication *)new lldb::SBCommunication((char const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SBCommunication(void * jarg1) {
  lldb::SBCommunication *arg1 = (lldb::SBCommunication *) 0 ;
  
  arg1 = (lldb::SBCommunication *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBCommunication_IsValid(void * jarg1) {
  unsigned int jresult ;
  lldb::SBCommunication *arg1 = (lldb::SBCommunication *) 0 ;
  bool result;
  
  arg1 = (lldb::SBCommunication *)jarg1; 
  result = (bool)((lldb::SBCommunication const *)arg1)->IsValid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBCommunication_GetBroadcaster(void * jarg1) {
  void * jresult ;
  lldb::SBCommunication *arg1 = (lldb::SBCommunication *) 0 ;
  lldb::SBBroadcaster result;
  
  arg1 = (lldb::SBCommunication *)jarg1; 
  result = (arg1)->GetBroadcaster();
  jresult = new lldb::SBBroadcaster((const lldb::SBBroadcaster &)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SBCommunication_GetBroadcasterClass() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)lldb::SBCommunication::GetBroadcasterClass();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SBCommunication_AdoptFileDesriptor(void * jarg1, int jarg2, unsigned int jarg3) {
  int jresult ;
  lldb::SBCommunication *arg1 = (lldb::SBCommunication *) 0 ;
  int arg2 ;
  bool arg3 ;
  lldb::ConnectionStatus result;
  
  arg1 = (lldb::SBCommunication *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (lldb::ConnectionStatus)(arg1)->AdoptFileDesriptor(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SBCommunication_Connect(void * jarg1, char * jarg2) {
  int jresult ;
  lldb::SBCommunication *arg1 = (lldb::SBCommunication *) 0 ;
  char *arg2 = (char *) 0 ;
  lldb::ConnectionStatus result;
  
  arg1 = (lldb::SBCommunication *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (lldb::ConnectionStatus)(arg1)->Connect((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SBCommunication_Disconnect(void * jarg1) {
  int jresult ;
  lldb::SBCommunication *arg1 = (lldb::SBCommunication *) 0 ;
  lldb::ConnectionStatus result;
  
  arg1 = (lldb::SBCommunication *)jarg1; 
  result = (lldb::ConnectionStatus)(arg1)->Disconnect();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBCommunication_IsConnected(void * jarg1) {
  unsigned int jresult ;
  lldb::SBCommunication *arg1 = (lldb::SBCommunication *) 0 ;
  bool result;
  
  arg1 = (lldb::SBCommunication *)jarg1; 
  result = (bool)((lldb::SBCommunication const *)arg1)->IsConnected();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBCommunication_GetCloseOnEOF(void * jarg1) {
  unsigned int jresult ;
  lldb::SBCommunication *arg1 = (lldb::SBCommunication *) 0 ;
  bool result;
  
  arg1 = (lldb::SBCommunication *)jarg1; 
  result = (bool)(arg1)->GetCloseOnEOF();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBCommunication_SetCloseOnEOF(void * jarg1, unsigned int jarg2) {
  lldb::SBCommunication *arg1 = (lldb::SBCommunication *) 0 ;
  bool arg2 ;
  
  arg1 = (lldb::SBCommunication *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetCloseOnEOF(arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_SBCommunication_Read(void * jarg1, void* jarg2, unsigned long jarg3, void * jarg4, void * jarg5) {
  unsigned long jresult ;
  lldb::SBCommunication *arg1 = (lldb::SBCommunication *) 0 ;
  void *arg2 = (void *) 0 ;
  size_t arg3 ;
  uint32_t arg4 ;
  lldb::ConnectionStatus *arg5 = 0 ;
  uint32_t *argp4 ;
  size_t result;
  
  arg1 = (lldb::SBCommunication *)jarg1; 
  arg2 = (void *)jarg2; /* IntPtr */ 
  arg3 = (size_t)jarg3; 
  argp4 = (uint32_t *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return 0;
  }
  arg4 = *argp4; 
  arg5 = (lldb::ConnectionStatus *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::ConnectionStatus & type is null", 0);
    return 0;
  } 
  result = (arg1)->Read(arg2,arg3,arg4,*arg5);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_SBCommunication_Write(void * jarg1, void* jarg2, unsigned long jarg3, void * jarg4) {
  unsigned long jresult ;
  lldb::SBCommunication *arg1 = (lldb::SBCommunication *) 0 ;
  void *arg2 = (void *) 0 ;
  size_t arg3 ;
  lldb::ConnectionStatus *arg4 = 0 ;
  size_t result;
  
  arg1 = (lldb::SBCommunication *)jarg1; 
  arg2 = (void *)jarg2; /* IntPtr */ 
  arg3 = (size_t)jarg3; 
  arg4 = (lldb::ConnectionStatus *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::ConnectionStatus & type is null", 0);
    return 0;
  } 
  result = (arg1)->Write((void const *)arg2,arg3,*arg4);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBCommunication_ReadThreadStart(void * jarg1) {
  unsigned int jresult ;
  lldb::SBCommunication *arg1 = (lldb::SBCommunication *) 0 ;
  bool result;
  
  arg1 = (lldb::SBCommunication *)jarg1; 
  result = (bool)(arg1)->ReadThreadStart();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBCommunication_ReadThreadStop(void * jarg1) {
  unsigned int jresult ;
  lldb::SBCommunication *arg1 = (lldb::SBCommunication *) 0 ;
  bool result;
  
  arg1 = (lldb::SBCommunication *)jarg1; 
  result = (bool)(arg1)->ReadThreadStop();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBCommunication_ReadThreadIsRunning(void * jarg1) {
  unsigned int jresult ;
  lldb::SBCommunication *arg1 = (lldb::SBCommunication *) 0 ;
  bool result;
  
  arg1 = (lldb::SBCommunication *)jarg1; 
  result = (bool)(arg1)->ReadThreadIsRunning();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBCommunication_SetReadThreadBytesReceivedCallback(void * jarg1, void * jarg2, void* jarg3) {
  unsigned int jresult ;
  lldb::SBCommunication *arg1 = (lldb::SBCommunication *) 0 ;
  lldb::SBCommunication::ReadThreadBytesReceived arg2 = (lldb::SBCommunication::ReadThreadBytesReceived) 0 ;
  void *arg3 = (void *) 0 ;
  bool result;
  
  arg1 = (lldb::SBCommunication *)jarg1; 
  arg2 = (lldb::SBCommunication::ReadThreadBytesReceived)jarg2; 
  arg3 = (void *)jarg3; /* IntPtr */ 
  result = (bool)(arg1)->SetReadThreadBytesReceivedCallback(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SBCompileUnit__SWIG_0() {
  void * jresult ;
  lldb::SBCompileUnit *result = 0 ;
  
  result = (lldb::SBCompileUnit *)new lldb::SBCompileUnit();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SBCompileUnit__SWIG_1(void * jarg1) {
  void * jresult ;
  lldb::SBCompileUnit *arg1 = 0 ;
  lldb::SBCompileUnit *result = 0 ;
  
  arg1 = (lldb::SBCompileUnit *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBCompileUnit const & type is null", 0);
    return 0;
  } 
  result = (lldb::SBCompileUnit *)new lldb::SBCompileUnit((lldb::SBCompileUnit const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SBCompileUnit(void * jarg1) {
  lldb::SBCompileUnit *arg1 = (lldb::SBCompileUnit *) 0 ;
  
  arg1 = (lldb::SBCompileUnit *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBCompileUnit_IsValid(void * jarg1) {
  unsigned int jresult ;
  lldb::SBCompileUnit *arg1 = (lldb::SBCompileUnit *) 0 ;
  bool result;
  
  arg1 = (lldb::SBCompileUnit *)jarg1; 
  result = (bool)((lldb::SBCompileUnit const *)arg1)->IsValid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBCompileUnit_GetFileSpec(void * jarg1) {
  void * jresult ;
  lldb::SBCompileUnit *arg1 = (lldb::SBCompileUnit *) 0 ;
  lldb::SBFileSpec result;
  
  arg1 = (lldb::SBCompileUnit *)jarg1; 
  result = ((lldb::SBCompileUnit const *)arg1)->GetFileSpec();
  jresult = new lldb::SBFileSpec((const lldb::SBFileSpec &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBCompileUnit_GetNumLineEntries(void * jarg1) {
  void * jresult ;
  lldb::SBCompileUnit *arg1 = (lldb::SBCompileUnit *) 0 ;
  uint32_t result;
  
  arg1 = (lldb::SBCompileUnit *)jarg1; 
  result = ((lldb::SBCompileUnit const *)arg1)->GetNumLineEntries();
  jresult = new uint32_t((const uint32_t &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBCompileUnit_GetLineEntryAtIndex(void * jarg1, void * jarg2) {
  void * jresult ;
  lldb::SBCompileUnit *arg1 = (lldb::SBCompileUnit *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  lldb::SBLineEntry result;
  
  arg1 = (lldb::SBCompileUnit *)jarg1; 
  argp2 = (uint32_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = ((lldb::SBCompileUnit const *)arg1)->GetLineEntryAtIndex(arg2);
  jresult = new lldb::SBLineEntry((const lldb::SBLineEntry &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBCompileUnit_FindLineEntryIndex__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  lldb::SBCompileUnit *arg1 = (lldb::SBCompileUnit *) 0 ;
  uint32_t arg2 ;
  uint32_t arg3 ;
  lldb::SBFileSpec *arg4 = (lldb::SBFileSpec *) 0 ;
  uint32_t *argp2 ;
  uint32_t *argp3 ;
  uint32_t result;
  
  arg1 = (lldb::SBCompileUnit *)jarg1; 
  argp2 = (uint32_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return 0;
  }
  arg2 = *argp2; 
  argp3 = (uint32_t *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return 0;
  }
  arg3 = *argp3; 
  arg4 = (lldb::SBFileSpec *)jarg4; 
  result = ((lldb::SBCompileUnit const *)arg1)->FindLineEntryIndex(arg2,arg3,arg4);
  jresult = new uint32_t((const uint32_t &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBCompileUnit_FindLineEntryIndex__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, unsigned int jarg5) {
  void * jresult ;
  lldb::SBCompileUnit *arg1 = (lldb::SBCompileUnit *) 0 ;
  uint32_t arg2 ;
  uint32_t arg3 ;
  lldb::SBFileSpec *arg4 = (lldb::SBFileSpec *) 0 ;
  bool arg5 ;
  uint32_t *argp2 ;
  uint32_t *argp3 ;
  uint32_t result;
  
  arg1 = (lldb::SBCompileUnit *)jarg1; 
  argp2 = (uint32_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return 0;
  }
  arg2 = *argp2; 
  argp3 = (uint32_t *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return 0;
  }
  arg3 = *argp3; 
  arg4 = (lldb::SBFileSpec *)jarg4; 
  arg5 = jarg5 ? true : false; 
  result = ((lldb::SBCompileUnit const *)arg1)->FindLineEntryIndex(arg2,arg3,arg4,arg5);
  jresult = new uint32_t((const uint32_t &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBCompileUnit_GetSupportFileAtIndex(void * jarg1, void * jarg2) {
  void * jresult ;
  lldb::SBCompileUnit *arg1 = (lldb::SBCompileUnit *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  lldb::SBFileSpec result;
  
  arg1 = (lldb::SBCompileUnit *)jarg1; 
  argp2 = (uint32_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = ((lldb::SBCompileUnit const *)arg1)->GetSupportFileAtIndex(arg2);
  jresult = new lldb::SBFileSpec((const lldb::SBFileSpec &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBCompileUnit_GetNumSupportFiles(void * jarg1) {
  void * jresult ;
  lldb::SBCompileUnit *arg1 = (lldb::SBCompileUnit *) 0 ;
  uint32_t result;
  
  arg1 = (lldb::SBCompileUnit *)jarg1; 
  result = ((lldb::SBCompileUnit const *)arg1)->GetNumSupportFiles();
  jresult = new uint32_t((const uint32_t &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBCompileUnit_FindSupportFileIndex(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4) {
  void * jresult ;
  lldb::SBCompileUnit *arg1 = (lldb::SBCompileUnit *) 0 ;
  uint32_t arg2 ;
  lldb::SBFileSpec *arg3 = 0 ;
  bool arg4 ;
  uint32_t *argp2 ;
  uint32_t result;
  
  arg1 = (lldb::SBCompileUnit *)jarg1; 
  argp2 = (uint32_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (lldb::SBFileSpec *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBFileSpec const & type is null", 0);
    return 0;
  } 
  arg4 = jarg4 ? true : false; 
  result = (arg1)->FindSupportFileIndex(arg2,(lldb::SBFileSpec const &)*arg3,arg4);
  jresult = new uint32_t((const uint32_t &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBCompileUnit_GetDescription(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  lldb::SBCompileUnit *arg1 = (lldb::SBCompileUnit *) 0 ;
  lldb::SBStream *arg2 = 0 ;
  bool result;
  
  arg1 = (lldb::SBCompileUnit *)jarg1; 
  arg2 = (lldb::SBStream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBStream & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->GetDescription(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SBData__SWIG_0() {
  void * jresult ;
  lldb::SBData *result = 0 ;
  
  result = (lldb::SBData *)new lldb::SBData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SBData__SWIG_1(void * jarg1) {
  void * jresult ;
  lldb::SBData *arg1 = 0 ;
  lldb::SBData *result = 0 ;
  
  arg1 = (lldb::SBData *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBData const & type is null", 0);
    return 0;
  } 
  result = (lldb::SBData *)new lldb::SBData((lldb::SBData const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SBData(void * jarg1) {
  lldb::SBData *arg1 = (lldb::SBData *) 0 ;
  
  arg1 = (lldb::SBData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBData_GetAddressByteSize(void * jarg1) {
  void * jresult ;
  lldb::SBData *arg1 = (lldb::SBData *) 0 ;
  uint8_t result;
  
  arg1 = (lldb::SBData *)jarg1; 
  result = (arg1)->GetAddressByteSize();
  jresult = new uint8_t((const uint8_t &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBData_SetAddressByteSize(void * jarg1, void * jarg2) {
  lldb::SBData *arg1 = (lldb::SBData *) 0 ;
  uint8_t arg2 ;
  uint8_t *argp2 ;
  
  arg1 = (lldb::SBData *)jarg1; 
  argp2 = (uint8_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint8_t", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->SetAddressByteSize(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBData_Clear(void * jarg1) {
  lldb::SBData *arg1 = (lldb::SBData *) 0 ;
  
  arg1 = (lldb::SBData *)jarg1; 
  (arg1)->Clear();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBData_IsValid(void * jarg1) {
  unsigned int jresult ;
  lldb::SBData *arg1 = (lldb::SBData *) 0 ;
  bool result;
  
  arg1 = (lldb::SBData *)jarg1; 
  result = (bool)(arg1)->IsValid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_SBData_GetByteSize(void * jarg1) {
  unsigned long jresult ;
  lldb::SBData *arg1 = (lldb::SBData *) 0 ;
  size_t result;
  
  arg1 = (lldb::SBData *)jarg1; 
  result = (arg1)->GetByteSize();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SBData_GetByteOrder(void * jarg1) {
  int jresult ;
  lldb::SBData *arg1 = (lldb::SBData *) 0 ;
  lldb::ByteOrder result;
  
  arg1 = (lldb::SBData *)jarg1; 
  result = (lldb::ByteOrder)(arg1)->GetByteOrder();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBData_SetByteOrder(void * jarg1, int jarg2) {
  lldb::SBData *arg1 = (lldb::SBData *) 0 ;
  lldb::ByteOrder arg2 ;
  
  arg1 = (lldb::SBData *)jarg1; 
  arg2 = (lldb::ByteOrder)jarg2; 
  (arg1)->SetByteOrder(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_SBData_GetFloat(void * jarg1, void * jarg2, void * jarg3) {
  float jresult ;
  lldb::SBData *arg1 = (lldb::SBData *) 0 ;
  lldb::SBError *arg2 = 0 ;
  uint32_t arg3 ;
  uint32_t *argp3 ;
  float result;
  
  arg1 = (lldb::SBData *)jarg1; 
  arg2 = (lldb::SBError *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBError & type is null", 0);
    return 0;
  } 
  argp3 = (uint32_t *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return 0;
  }
  arg3 = *argp3; 
  result = (float)(arg1)->GetFloat(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_SBData_GetDouble(void * jarg1, void * jarg2, void * jarg3) {
  double jresult ;
  lldb::SBData *arg1 = (lldb::SBData *) 0 ;
  lldb::SBError *arg2 = 0 ;
  uint32_t arg3 ;
  uint32_t *argp3 ;
  double result;
  
  arg1 = (lldb::SBData *)jarg1; 
  arg2 = (lldb::SBError *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBError & type is null", 0);
    return 0;
  } 
  argp3 = (uint32_t *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return 0;
  }
  arg3 = *argp3; 
  result = (double)(arg1)->GetDouble(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBData_GetLongDouble(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  lldb::SBData *arg1 = (lldb::SBData *) 0 ;
  lldb::SBError *arg2 = 0 ;
  uint32_t arg3 ;
  uint32_t *argp3 ;
  long double result;
  
  arg1 = (lldb::SBData *)jarg1; 
  arg2 = (lldb::SBError *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBError & type is null", 0);
    return 0;
  } 
  argp3 = (uint32_t *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return 0;
  }
  arg3 = *argp3; 
  result = (long double)(arg1)->GetLongDouble(*arg2,arg3);
  jresult = new long double((const long double &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBData_GetAddress(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  lldb::SBData *arg1 = (lldb::SBData *) 0 ;
  lldb::SBError *arg2 = 0 ;
  uint32_t arg3 ;
  uint32_t *argp3 ;
  lldb::addr_t result;
  
  arg1 = (lldb::SBData *)jarg1; 
  arg2 = (lldb::SBError *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBError & type is null", 0);
    return 0;
  } 
  argp3 = (uint32_t *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return 0;
  }
  arg3 = *argp3; 
  result = (arg1)->GetAddress(*arg2,arg3);
  jresult = new lldb::addr_t((const lldb::addr_t &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBData_GetUnsignedInt8(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  lldb::SBData *arg1 = (lldb::SBData *) 0 ;
  lldb::SBError *arg2 = 0 ;
  uint32_t arg3 ;
  uint32_t *argp3 ;
  uint8_t result;
  
  arg1 = (lldb::SBData *)jarg1; 
  arg2 = (lldb::SBError *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBError & type is null", 0);
    return 0;
  } 
  argp3 = (uint32_t *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return 0;
  }
  arg3 = *argp3; 
  result = (arg1)->GetUnsignedInt8(*arg2,arg3);
  jresult = new uint8_t((const uint8_t &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBData_GetUnsignedInt16(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  lldb::SBData *arg1 = (lldb::SBData *) 0 ;
  lldb::SBError *arg2 = 0 ;
  uint32_t arg3 ;
  uint32_t *argp3 ;
  uint16_t result;
  
  arg1 = (lldb::SBData *)jarg1; 
  arg2 = (lldb::SBError *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBError & type is null", 0);
    return 0;
  } 
  argp3 = (uint32_t *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return 0;
  }
  arg3 = *argp3; 
  result = (arg1)->GetUnsignedInt16(*arg2,arg3);
  jresult = new uint16_t((const uint16_t &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBData_GetUnsignedInt32(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  lldb::SBData *arg1 = (lldb::SBData *) 0 ;
  lldb::SBError *arg2 = 0 ;
  uint32_t arg3 ;
  uint32_t *argp3 ;
  uint32_t result;
  
  arg1 = (lldb::SBData *)jarg1; 
  arg2 = (lldb::SBError *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBError & type is null", 0);
    return 0;
  } 
  argp3 = (uint32_t *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return 0;
  }
  arg3 = *argp3; 
  result = (arg1)->GetUnsignedInt32(*arg2,arg3);
  jresult = new uint32_t((const uint32_t &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBData_GetUnsignedInt64(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  lldb::SBData *arg1 = (lldb::SBData *) 0 ;
  lldb::SBError *arg2 = 0 ;
  uint32_t arg3 ;
  uint32_t *argp3 ;
  uint64_t result;
  
  arg1 = (lldb::SBData *)jarg1; 
  arg2 = (lldb::SBError *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBError & type is null", 0);
    return 0;
  } 
  argp3 = (uint32_t *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return 0;
  }
  arg3 = *argp3; 
  result = (arg1)->GetUnsignedInt64(*arg2,arg3);
  jresult = new uint64_t((const uint64_t &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBData_GetSignedInt8(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  lldb::SBData *arg1 = (lldb::SBData *) 0 ;
  lldb::SBError *arg2 = 0 ;
  uint32_t arg3 ;
  uint32_t *argp3 ;
  int8_t result;
  
  arg1 = (lldb::SBData *)jarg1; 
  arg2 = (lldb::SBError *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBError & type is null", 0);
    return 0;
  } 
  argp3 = (uint32_t *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return 0;
  }
  arg3 = *argp3; 
  result = (arg1)->GetSignedInt8(*arg2,arg3);
  jresult = new int8_t((const int8_t &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBData_GetSignedInt16(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  lldb::SBData *arg1 = (lldb::SBData *) 0 ;
  lldb::SBError *arg2 = 0 ;
  uint32_t arg3 ;
  uint32_t *argp3 ;
  int16_t result;
  
  arg1 = (lldb::SBData *)jarg1; 
  arg2 = (lldb::SBError *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBError & type is null", 0);
    return 0;
  } 
  argp3 = (uint32_t *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return 0;
  }
  arg3 = *argp3; 
  result = (arg1)->GetSignedInt16(*arg2,arg3);
  jresult = new int16_t((const int16_t &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBData_GetSignedInt32(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  lldb::SBData *arg1 = (lldb::SBData *) 0 ;
  lldb::SBError *arg2 = 0 ;
  uint32_t arg3 ;
  uint32_t *argp3 ;
  int32_t result;
  
  arg1 = (lldb::SBData *)jarg1; 
  arg2 = (lldb::SBError *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBError & type is null", 0);
    return 0;
  } 
  argp3 = (uint32_t *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return 0;
  }
  arg3 = *argp3; 
  result = (arg1)->GetSignedInt32(*arg2,arg3);
  jresult = new int32_t((const int32_t &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBData_GetSignedInt64(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  lldb::SBData *arg1 = (lldb::SBData *) 0 ;
  lldb::SBError *arg2 = 0 ;
  uint32_t arg3 ;
  uint32_t *argp3 ;
  int64_t result;
  
  arg1 = (lldb::SBData *)jarg1; 
  arg2 = (lldb::SBError *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBError & type is null", 0);
    return 0;
  } 
  argp3 = (uint32_t *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return 0;
  }
  arg3 = *argp3; 
  result = (arg1)->GetSignedInt64(*arg2,arg3);
  jresult = new int64_t((const int64_t &)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SBData_GetString(void * jarg1, void * jarg2, void * jarg3) {
  char * jresult ;
  lldb::SBData *arg1 = (lldb::SBData *) 0 ;
  lldb::SBError *arg2 = 0 ;
  uint32_t arg3 ;
  uint32_t *argp3 ;
  char *result = 0 ;
  
  arg1 = (lldb::SBData *)jarg1; 
  arg2 = (lldb::SBError *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBError & type is null", 0);
    return 0;
  } 
  argp3 = (uint32_t *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return 0;
  }
  arg3 = *argp3; 
  result = (char *)(arg1)->GetString(*arg2,arg3);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBData_GetDescription(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  lldb::SBData *arg1 = (lldb::SBData *) 0 ;
  lldb::SBStream *arg2 = 0 ;
  lldb::addr_t arg3 ;
  lldb::addr_t *argp3 ;
  bool result;
  
  arg1 = (lldb::SBData *)jarg1; 
  arg2 = (lldb::SBStream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBStream & type is null", 0);
    return 0;
  } 
  argp3 = (lldb::addr_t *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null lldb::addr_t", 0);
    return 0;
  }
  arg3 = *argp3; 
  result = (bool)(arg1)->GetDescription(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_SBData_ReadRawData(void * jarg1, void * jarg2, void * jarg3, void* jarg4, unsigned long jarg5) {
  unsigned long jresult ;
  lldb::SBData *arg1 = (lldb::SBData *) 0 ;
  lldb::SBError *arg2 = 0 ;
  uint32_t arg3 ;
  void *arg4 = (void *) 0 ;
  size_t arg5 ;
  uint32_t *argp3 ;
  size_t result;
  
  arg1 = (lldb::SBData *)jarg1; 
  arg2 = (lldb::SBError *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBError & type is null", 0);
    return 0;
  } 
  argp3 = (uint32_t *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return 0;
  }
  arg3 = *argp3; 
  arg4 = (void *)jarg4; /* IntPtr */ 
  arg5 = (size_t)jarg5; 
  result = (arg1)->ReadRawData(*arg2,arg3,arg4,arg5);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBData_SetData(void * jarg1, void * jarg2, void* jarg3, unsigned long jarg4, int jarg5, void * jarg6) {
  lldb::SBData *arg1 = (lldb::SBData *) 0 ;
  lldb::SBError *arg2 = 0 ;
  void *arg3 = (void *) 0 ;
  size_t arg4 ;
  lldb::ByteOrder arg5 ;
  uint8_t arg6 ;
  uint8_t *argp6 ;
  
  arg1 = (lldb::SBData *)jarg1; 
  arg2 = (lldb::SBError *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBError & type is null", 0);
    return ;
  } 
  arg3 = (void *)jarg3; /* IntPtr */ 
  arg4 = (size_t)jarg4; 
  arg5 = (lldb::ByteOrder)jarg5; 
  argp6 = (uint8_t *)jarg6; 
  if (!argp6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint8_t", 0);
    return ;
  }
  arg6 = *argp6; 
  (arg1)->SetData(*arg2,(void const *)arg3,arg4,arg5,arg6);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBData_Append(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  lldb::SBData *arg1 = (lldb::SBData *) 0 ;
  lldb::SBData *arg2 = 0 ;
  bool result;
  
  arg1 = (lldb::SBData *)jarg1; 
  arg2 = (lldb::SBData *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBData const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->Append((lldb::SBData const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBData_CreateDataFromCString(int jarg1, void * jarg2, char * jarg3) {
  void * jresult ;
  lldb::ByteOrder arg1 ;
  uint32_t arg2 ;
  char *arg3 = (char *) 0 ;
  uint32_t *argp2 ;
  lldb::SBData result;
  
  arg1 = (lldb::ByteOrder)jarg1; 
  argp2 = (uint32_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (char *)jarg3; 
  result = lldb::SBData::CreateDataFromCString(arg1,arg2,(char const *)arg3);
  jresult = new lldb::SBData((const lldb::SBData &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBData_CreateDataFromUInt64Array(int jarg1, void * jarg2, void * jarg3, unsigned long jarg4) {
  void * jresult ;
  lldb::ByteOrder arg1 ;
  uint32_t arg2 ;
  uint64_t *arg3 = (uint64_t *) 0 ;
  size_t arg4 ;
  uint32_t *argp2 ;
  lldb::SBData result;
  
  arg1 = (lldb::ByteOrder)jarg1; 
  argp2 = (uint32_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (uint64_t *)jarg3; 
  arg4 = (size_t)jarg4; 
  result = lldb::SBData::CreateDataFromUInt64Array(arg1,arg2,arg3,arg4);
  jresult = new lldb::SBData((const lldb::SBData &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBData_CreateDataFromUInt32Array(int jarg1, void * jarg2, void * jarg3, unsigned long jarg4) {
  void * jresult ;
  lldb::ByteOrder arg1 ;
  uint32_t arg2 ;
  uint32_t *arg3 = (uint32_t *) 0 ;
  size_t arg4 ;
  uint32_t *argp2 ;
  lldb::SBData result;
  
  arg1 = (lldb::ByteOrder)jarg1; 
  argp2 = (uint32_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (uint32_t *)jarg3; 
  arg4 = (size_t)jarg4; 
  result = lldb::SBData::CreateDataFromUInt32Array(arg1,arg2,arg3,arg4);
  jresult = new lldb::SBData((const lldb::SBData &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBData_CreateDataFromSInt64Array(int jarg1, void * jarg2, void * jarg3, unsigned long jarg4) {
  void * jresult ;
  lldb::ByteOrder arg1 ;
  uint32_t arg2 ;
  int64_t *arg3 = (int64_t *) 0 ;
  size_t arg4 ;
  uint32_t *argp2 ;
  lldb::SBData result;
  
  arg1 = (lldb::ByteOrder)jarg1; 
  argp2 = (uint32_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (int64_t *)jarg3; 
  arg4 = (size_t)jarg4; 
  result = lldb::SBData::CreateDataFromSInt64Array(arg1,arg2,arg3,arg4);
  jresult = new lldb::SBData((const lldb::SBData &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBData_CreateDataFromSInt32Array(int jarg1, void * jarg2, void * jarg3, unsigned long jarg4) {
  void * jresult ;
  lldb::ByteOrder arg1 ;
  uint32_t arg2 ;
  int32_t *arg3 = (int32_t *) 0 ;
  size_t arg4 ;
  uint32_t *argp2 ;
  lldb::SBData result;
  
  arg1 = (lldb::ByteOrder)jarg1; 
  argp2 = (uint32_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (int32_t *)jarg3; 
  arg4 = (size_t)jarg4; 
  result = lldb::SBData::CreateDataFromSInt32Array(arg1,arg2,arg3,arg4);
  jresult = new lldb::SBData((const lldb::SBData &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBData_CreateDataFromDoubleArray(int jarg1, void * jarg2, void * jarg3, unsigned long jarg4) {
  void * jresult ;
  lldb::ByteOrder arg1 ;
  uint32_t arg2 ;
  double *arg3 = (double *) 0 ;
  size_t arg4 ;
  uint32_t *argp2 ;
  lldb::SBData result;
  
  arg1 = (lldb::ByteOrder)jarg1; 
  argp2 = (uint32_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (double *)jarg3; 
  arg4 = (size_t)jarg4; 
  result = lldb::SBData::CreateDataFromDoubleArray(arg1,arg2,arg3,arg4);
  jresult = new lldb::SBData((const lldb::SBData &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBData_SetDataFromCString(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  lldb::SBData *arg1 = (lldb::SBData *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (lldb::SBData *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->SetDataFromCString((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBData_SetDataFromUInt64Array(void * jarg1, void * jarg2, unsigned long jarg3) {
  unsigned int jresult ;
  lldb::SBData *arg1 = (lldb::SBData *) 0 ;
  uint64_t *arg2 = (uint64_t *) 0 ;
  size_t arg3 ;
  bool result;
  
  arg1 = (lldb::SBData *)jarg1; 
  arg2 = (uint64_t *)jarg2; 
  arg3 = (size_t)jarg3; 
  result = (bool)(arg1)->SetDataFromUInt64Array(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBData_SetDataFromUInt32Array(void * jarg1, void * jarg2, unsigned long jarg3) {
  unsigned int jresult ;
  lldb::SBData *arg1 = (lldb::SBData *) 0 ;
  uint32_t *arg2 = (uint32_t *) 0 ;
  size_t arg3 ;
  bool result;
  
  arg1 = (lldb::SBData *)jarg1; 
  arg2 = (uint32_t *)jarg2; 
  arg3 = (size_t)jarg3; 
  result = (bool)(arg1)->SetDataFromUInt32Array(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBData_SetDataFromSInt64Array(void * jarg1, void * jarg2, unsigned long jarg3) {
  unsigned int jresult ;
  lldb::SBData *arg1 = (lldb::SBData *) 0 ;
  int64_t *arg2 = (int64_t *) 0 ;
  size_t arg3 ;
  bool result;
  
  arg1 = (lldb::SBData *)jarg1; 
  arg2 = (int64_t *)jarg2; 
  arg3 = (size_t)jarg3; 
  result = (bool)(arg1)->SetDataFromSInt64Array(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBData_SetDataFromSInt32Array(void * jarg1, void * jarg2, unsigned long jarg3) {
  unsigned int jresult ;
  lldb::SBData *arg1 = (lldb::SBData *) 0 ;
  int32_t *arg2 = (int32_t *) 0 ;
  size_t arg3 ;
  bool result;
  
  arg1 = (lldb::SBData *)jarg1; 
  arg2 = (int32_t *)jarg2; 
  arg3 = (size_t)jarg3; 
  result = (bool)(arg1)->SetDataFromSInt32Array(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBData_SetDataFromDoubleArray(void * jarg1, void * jarg2, unsigned long jarg3) {
  unsigned int jresult ;
  lldb::SBData *arg1 = (lldb::SBData *) 0 ;
  double *arg2 = (double *) 0 ;
  size_t arg3 ;
  bool result;
  
  arg1 = (lldb::SBData *)jarg1; 
  arg2 = (double *)jarg2; 
  arg3 = (size_t)jarg3; 
  result = (bool)(arg1)->SetDataFromDoubleArray(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBDebugger_Initialize() {
  lldb::SBDebugger::Initialize();
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBDebugger_Terminate() {
  lldb::SBDebugger::Terminate();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBDebugger_Create__SWIG_0() {
  void * jresult ;
  lldb::SBDebugger result;
  
  result = lldb::SBDebugger::Create();
  jresult = new lldb::SBDebugger((const lldb::SBDebugger &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBDebugger_Create__SWIG_1(unsigned int jarg1) {
  void * jresult ;
  bool arg1 ;
  lldb::SBDebugger result;
  
  arg1 = jarg1 ? true : false; 
  result = lldb::SBDebugger::Create(arg1);
  jresult = new lldb::SBDebugger((const lldb::SBDebugger &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBDebugger_Create__SWIG_2(unsigned int jarg1, void * jarg2, void* jarg3) {
  void * jresult ;
  bool arg1 ;
  lldb::LogOutputCallback arg2 = (lldb::LogOutputCallback) 0 ;
  void *arg3 = (void *) 0 ;
  lldb::SBDebugger result;
  
  arg1 = jarg1 ? true : false; 
  arg2 = (lldb::LogOutputCallback)jarg2; 
  arg3 = (void *)jarg3; /* IntPtr */ 
  result = lldb::SBDebugger::Create(arg1,arg2,arg3);
  jresult = new lldb::SBDebugger((const lldb::SBDebugger &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBDebugger_Destroy(void * jarg1) {
  lldb::SBDebugger *arg1 = 0 ;
  
  arg1 = (lldb::SBDebugger *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBDebugger & type is null", 0);
    return ;
  } 
  lldb::SBDebugger::Destroy(*arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBDebugger_MemoryPressureDetected() {
  lldb::SBDebugger::MemoryPressureDetected();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SBDebugger__SWIG_0() {
  void * jresult ;
  lldb::SBDebugger *result = 0 ;
  
  result = (lldb::SBDebugger *)new lldb::SBDebugger();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SBDebugger__SWIG_1(void * jarg1) {
  void * jresult ;
  lldb::SBDebugger *arg1 = 0 ;
  lldb::SBDebugger *result = 0 ;
  
  arg1 = (lldb::SBDebugger *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBDebugger const & type is null", 0);
    return 0;
  } 
  result = (lldb::SBDebugger *)new lldb::SBDebugger((lldb::SBDebugger const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SBDebugger(void * jarg1) {
  lldb::SBDebugger *arg1 = (lldb::SBDebugger *) 0 ;
  
  arg1 = (lldb::SBDebugger *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBDebugger_IsValid(void * jarg1) {
  unsigned int jresult ;
  lldb::SBDebugger *arg1 = (lldb::SBDebugger *) 0 ;
  bool result;
  
  arg1 = (lldb::SBDebugger *)jarg1; 
  result = (bool)((lldb::SBDebugger const *)arg1)->IsValid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBDebugger_Clear(void * jarg1) {
  lldb::SBDebugger *arg1 = (lldb::SBDebugger *) 0 ;
  
  arg1 = (lldb::SBDebugger *)jarg1; 
  (arg1)->Clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBDebugger_SetAsync(void * jarg1, unsigned int jarg2) {
  lldb::SBDebugger *arg1 = (lldb::SBDebugger *) 0 ;
  bool arg2 ;
  
  arg1 = (lldb::SBDebugger *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetAsync(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBDebugger_GetAsync(void * jarg1) {
  unsigned int jresult ;
  lldb::SBDebugger *arg1 = (lldb::SBDebugger *) 0 ;
  bool result;
  
  arg1 = (lldb::SBDebugger *)jarg1; 
  result = (bool)(arg1)->GetAsync();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBDebugger_SkipLLDBInitFiles(void * jarg1, unsigned int jarg2) {
  lldb::SBDebugger *arg1 = (lldb::SBDebugger *) 0 ;
  bool arg2 ;
  
  arg1 = (lldb::SBDebugger *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SkipLLDBInitFiles(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBDebugger_SetInputFileHandle(void * jarg1, void * jarg2, unsigned int jarg3) {
  lldb::SBDebugger *arg1 = (lldb::SBDebugger *) 0 ;
  FILE *arg2 = (FILE *) 0 ;
  bool arg3 ;
  
  arg1 = (lldb::SBDebugger *)jarg1; 
  arg2 = (FILE *)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->SetInputFileHandle(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBDebugger_SetOutputFileHandle(void * jarg1, void * jarg2, unsigned int jarg3) {
  lldb::SBDebugger *arg1 = (lldb::SBDebugger *) 0 ;
  FILE *arg2 = (FILE *) 0 ;
  bool arg3 ;
  
  arg1 = (lldb::SBDebugger *)jarg1; 
  arg2 = (FILE *)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->SetOutputFileHandle(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBDebugger_SetErrorFileHandle(void * jarg1, void * jarg2, unsigned int jarg3) {
  lldb::SBDebugger *arg1 = (lldb::SBDebugger *) 0 ;
  FILE *arg2 = (FILE *) 0 ;
  bool arg3 ;
  
  arg1 = (lldb::SBDebugger *)jarg1; 
  arg2 = (FILE *)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->SetErrorFileHandle(arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBDebugger_GetInputFileHandle(void * jarg1) {
  void * jresult ;
  lldb::SBDebugger *arg1 = (lldb::SBDebugger *) 0 ;
  FILE *result = 0 ;
  
  arg1 = (lldb::SBDebugger *)jarg1; 
  result = (FILE *)(arg1)->GetInputFileHandle();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBDebugger_GetOutputFileHandle(void * jarg1) {
  void * jresult ;
  lldb::SBDebugger *arg1 = (lldb::SBDebugger *) 0 ;
  FILE *result = 0 ;
  
  arg1 = (lldb::SBDebugger *)jarg1; 
  result = (FILE *)(arg1)->GetOutputFileHandle();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBDebugger_GetErrorFileHandle(void * jarg1) {
  void * jresult ;
  lldb::SBDebugger *arg1 = (lldb::SBDebugger *) 0 ;
  FILE *result = 0 ;
  
  arg1 = (lldb::SBDebugger *)jarg1; 
  result = (FILE *)(arg1)->GetErrorFileHandle();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBDebugger_GetCommandInterpreter(void * jarg1) {
  void * jresult ;
  lldb::SBDebugger *arg1 = (lldb::SBDebugger *) 0 ;
  SwigValueWrapper< lldb::SBCommandInterpreter > result;
  
  arg1 = (lldb::SBDebugger *)jarg1; 
  result = (arg1)->GetCommandInterpreter();
  jresult = new lldb::SBCommandInterpreter((const lldb::SBCommandInterpreter &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBDebugger_HandleCommand(void * jarg1, char * jarg2) {
  lldb::SBDebugger *arg1 = (lldb::SBDebugger *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (lldb::SBDebugger *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->HandleCommand((char const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBDebugger_GetListener(void * jarg1) {
  void * jresult ;
  lldb::SBDebugger *arg1 = (lldb::SBDebugger *) 0 ;
  lldb::SBListener result;
  
  arg1 = (lldb::SBDebugger *)jarg1; 
  result = (arg1)->GetListener();
  jresult = new lldb::SBListener((const lldb::SBListener &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBDebugger_HandleProcessEvent(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  lldb::SBDebugger *arg1 = (lldb::SBDebugger *) 0 ;
  lldb::SBProcess *arg2 = 0 ;
  lldb::SBEvent *arg3 = 0 ;
  FILE *arg4 = (FILE *) 0 ;
  FILE *arg5 = (FILE *) 0 ;
  
  arg1 = (lldb::SBDebugger *)jarg1; 
  arg2 = (lldb::SBProcess *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBProcess const & type is null", 0);
    return ;
  } 
  arg3 = (lldb::SBEvent *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBEvent const & type is null", 0);
    return ;
  } 
  arg4 = (FILE *)jarg4; 
  arg5 = (FILE *)jarg5; 
  (arg1)->HandleProcessEvent((lldb::SBProcess const &)*arg2,(lldb::SBEvent const &)*arg3,arg4,arg5);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBDebugger_CreateTarget__SWIG_0(void * jarg1, char * jarg2, char * jarg3, char * jarg4, unsigned int jarg5, void * jarg6) {
  void * jresult ;
  lldb::SBDebugger *arg1 = (lldb::SBDebugger *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  bool arg5 ;
  lldb::SBError *arg6 = 0 ;
  lldb::SBTarget result;
  
  arg1 = (lldb::SBDebugger *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (char *)jarg4; 
  arg5 = jarg5 ? true : false; 
  arg6 = (lldb::SBError *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBError & type is null", 0);
    return 0;
  } 
  result = (arg1)->CreateTarget((char const *)arg2,(char const *)arg3,(char const *)arg4,arg5,*arg6);
  jresult = new lldb::SBTarget((const lldb::SBTarget &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBDebugger_CreateTargetWithFileAndTargetTriple(void * jarg1, char * jarg2, char * jarg3) {
  void * jresult ;
  lldb::SBDebugger *arg1 = (lldb::SBDebugger *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  lldb::SBTarget result;
  
  arg1 = (lldb::SBDebugger *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  result = (arg1)->CreateTargetWithFileAndTargetTriple((char const *)arg2,(char const *)arg3);
  jresult = new lldb::SBTarget((const lldb::SBTarget &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBDebugger_CreateTargetWithFileAndArch(void * jarg1, char * jarg2, char * jarg3) {
  void * jresult ;
  lldb::SBDebugger *arg1 = (lldb::SBDebugger *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  lldb::SBTarget result;
  
  arg1 = (lldb::SBDebugger *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  result = (arg1)->CreateTargetWithFileAndArch((char const *)arg2,(char const *)arg3);
  jresult = new lldb::SBTarget((const lldb::SBTarget &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBDebugger_CreateTarget__SWIG_1(void * jarg1, char * jarg2) {
  void * jresult ;
  lldb::SBDebugger *arg1 = (lldb::SBDebugger *) 0 ;
  char *arg2 = (char *) 0 ;
  lldb::SBTarget result;
  
  arg1 = (lldb::SBDebugger *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (arg1)->CreateTarget((char const *)arg2);
  jresult = new lldb::SBTarget((const lldb::SBTarget &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBDebugger_DeleteTarget(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  lldb::SBDebugger *arg1 = (lldb::SBDebugger *) 0 ;
  lldb::SBTarget *arg2 = 0 ;
  bool result;
  
  arg1 = (lldb::SBDebugger *)jarg1; 
  arg2 = (lldb::SBTarget *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBTarget & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->DeleteTarget(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBDebugger_GetTargetAtIndex(void * jarg1, void * jarg2) {
  void * jresult ;
  lldb::SBDebugger *arg1 = (lldb::SBDebugger *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  lldb::SBTarget result;
  
  arg1 = (lldb::SBDebugger *)jarg1; 
  argp2 = (uint32_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->GetTargetAtIndex(arg2);
  jresult = new lldb::SBTarget((const lldb::SBTarget &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBDebugger_GetIndexOfTarget(void * jarg1, void * jarg2) {
  void * jresult ;
  lldb::SBDebugger *arg1 = (lldb::SBDebugger *) 0 ;
  lldb::SBTarget arg2 ;
  lldb::SBTarget *argp2 ;
  uint32_t result;
  
  arg1 = (lldb::SBDebugger *)jarg1; 
  argp2 = (lldb::SBTarget *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null lldb::SBTarget", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->GetIndexOfTarget(arg2);
  jresult = new uint32_t((const uint32_t &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBDebugger_FindTargetWithProcessID(void * jarg1, void * jarg2) {
  void * jresult ;
  lldb::SBDebugger *arg1 = (lldb::SBDebugger *) 0 ;
  lldb::pid_t arg2 ;
  lldb::pid_t *argp2 ;
  lldb::SBTarget result;
  
  arg1 = (lldb::SBDebugger *)jarg1; 
  argp2 = (lldb::pid_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null lldb::pid_t", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->FindTargetWithProcessID(arg2);
  jresult = new lldb::SBTarget((const lldb::SBTarget &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBDebugger_FindTargetWithFileAndArch(void * jarg1, char * jarg2, char * jarg3) {
  void * jresult ;
  lldb::SBDebugger *arg1 = (lldb::SBDebugger *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  lldb::SBTarget result;
  
  arg1 = (lldb::SBDebugger *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  result = (arg1)->FindTargetWithFileAndArch((char const *)arg2,(char const *)arg3);
  jresult = new lldb::SBTarget((const lldb::SBTarget &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBDebugger_GetNumTargets(void * jarg1) {
  void * jresult ;
  lldb::SBDebugger *arg1 = (lldb::SBDebugger *) 0 ;
  uint32_t result;
  
  arg1 = (lldb::SBDebugger *)jarg1; 
  result = (arg1)->GetNumTargets();
  jresult = new uint32_t((const uint32_t &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBDebugger_GetSelectedTarget(void * jarg1) {
  void * jresult ;
  lldb::SBDebugger *arg1 = (lldb::SBDebugger *) 0 ;
  lldb::SBTarget result;
  
  arg1 = (lldb::SBDebugger *)jarg1; 
  result = (arg1)->GetSelectedTarget();
  jresult = new lldb::SBTarget((const lldb::SBTarget &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBDebugger_SetSelectedTarget(void * jarg1, void * jarg2) {
  lldb::SBDebugger *arg1 = (lldb::SBDebugger *) 0 ;
  lldb::SBTarget *arg2 = 0 ;
  
  arg1 = (lldb::SBDebugger *)jarg1; 
  arg2 = (lldb::SBTarget *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBTarget & type is null", 0);
    return ;
  } 
  (arg1)->SetSelectedTarget(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBDebugger_GetSourceManager(void * jarg1) {
  void * jresult ;
  lldb::SBDebugger *arg1 = (lldb::SBDebugger *) 0 ;
  SwigValueWrapper< lldb::SBSourceManager > result;
  
  arg1 = (lldb::SBDebugger *)jarg1; 
  result = (arg1)->GetSourceManager();
  jresult = new lldb::SBSourceManager((const lldb::SBSourceManager &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBDebugger_SetCurrentPlatform(void * jarg1, char * jarg2) {
  void * jresult ;
  lldb::SBDebugger *arg1 = (lldb::SBDebugger *) 0 ;
  char *arg2 = (char *) 0 ;
  lldb::SBError result;
  
  arg1 = (lldb::SBDebugger *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (arg1)->SetCurrentPlatform((char const *)arg2);
  jresult = new lldb::SBError((const lldb::SBError &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBDebugger_SetCurrentPlatformSDKRoot(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  lldb::SBDebugger *arg1 = (lldb::SBDebugger *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (lldb::SBDebugger *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->SetCurrentPlatformSDKRoot((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBDebugger_SetUseExternalEditor(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  lldb::SBDebugger *arg1 = (lldb::SBDebugger *) 0 ;
  bool arg2 ;
  bool result;
  
  arg1 = (lldb::SBDebugger *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)(arg1)->SetUseExternalEditor(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBDebugger_GetUseExternalEditor(void * jarg1) {
  unsigned int jresult ;
  lldb::SBDebugger *arg1 = (lldb::SBDebugger *) 0 ;
  bool result;
  
  arg1 = (lldb::SBDebugger *)jarg1; 
  result = (bool)(arg1)->GetUseExternalEditor();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBDebugger_GetDefaultArchitecture(char * jarg1, unsigned long jarg2) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  size_t arg2 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (bool)lldb::SBDebugger::GetDefaultArchitecture(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBDebugger_SetDefaultArchitecture(char * jarg1) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  result = (bool)lldb::SBDebugger::SetDefaultArchitecture((char const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SBDebugger_GetScriptingLanguage(void * jarg1, char * jarg2) {
  int jresult ;
  lldb::SBDebugger *arg1 = (lldb::SBDebugger *) 0 ;
  char *arg2 = (char *) 0 ;
  lldb::ScriptLanguage result;
  
  arg1 = (lldb::SBDebugger *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (lldb::ScriptLanguage)(arg1)->GetScriptingLanguage((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SBDebugger_GetVersionString() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)lldb::SBDebugger::GetVersionString();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SBDebugger_StateAsCString(int jarg1) {
  char * jresult ;
  lldb::StateType arg1 ;
  char *result = 0 ;
  
  arg1 = (lldb::StateType)jarg1; 
  result = (char *)lldb::SBDebugger::StateAsCString(arg1);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBDebugger_StateIsRunningState(int jarg1) {
  unsigned int jresult ;
  lldb::StateType arg1 ;
  bool result;
  
  arg1 = (lldb::StateType)jarg1; 
  result = (bool)lldb::SBDebugger::StateIsRunningState(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBDebugger_StateIsStoppedState(int jarg1) {
  unsigned int jresult ;
  lldb::StateType arg1 ;
  bool result;
  
  arg1 = (lldb::StateType)jarg1; 
  result = (bool)lldb::SBDebugger::StateIsStoppedState(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBDebugger_EnableLog(void * jarg1, char * jarg2, void * jarg3) {
  unsigned int jresult ;
  lldb::SBDebugger *arg1 = (lldb::SBDebugger *) 0 ;
  char *arg2 = (char *) 0 ;
  char **arg3 = (char **) 0 ;
  bool result;
  
  arg1 = (lldb::SBDebugger *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char **)jarg3; 
  result = (bool)(arg1)->EnableLog((char const *)arg2,(char const **)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBDebugger_SetLoggingCallback(void * jarg1, void * jarg2, void* jarg3) {
  lldb::SBDebugger *arg1 = (lldb::SBDebugger *) 0 ;
  lldb::LogOutputCallback arg2 = (lldb::LogOutputCallback) 0 ;
  void *arg3 = (void *) 0 ;
  
  arg1 = (lldb::SBDebugger *)jarg1; 
  arg2 = (lldb::LogOutputCallback)jarg2; 
  arg3 = (void *)jarg3; /* IntPtr */ 
  (arg1)->SetLoggingCallback(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBDebugger_DispatchInput(void * jarg1, void* jarg2, unsigned long jarg3) {
  lldb::SBDebugger *arg1 = (lldb::SBDebugger *) 0 ;
  void *arg2 = (void *) 0 ;
  size_t arg3 ;
  
  arg1 = (lldb::SBDebugger *)jarg1; 
  arg2 = (void *)jarg2; /* IntPtr */ 
  arg3 = (size_t)jarg3; 
  (arg1)->DispatchInput((void const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBDebugger_DispatchInputInterrupt(void * jarg1) {
  lldb::SBDebugger *arg1 = (lldb::SBDebugger *) 0 ;
  
  arg1 = (lldb::SBDebugger *)jarg1; 
  (arg1)->DispatchInputInterrupt();
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBDebugger_DispatchInputEndOfFile(void * jarg1) {
  lldb::SBDebugger *arg1 = (lldb::SBDebugger *) 0 ;
  
  arg1 = (lldb::SBDebugger *)jarg1; 
  (arg1)->DispatchInputEndOfFile();
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBDebugger_PushInputReader(void * jarg1, void * jarg2) {
  lldb::SBDebugger *arg1 = (lldb::SBDebugger *) 0 ;
  lldb::SBInputReader *arg2 = 0 ;
  
  arg1 = (lldb::SBDebugger *)jarg1; 
  arg2 = (lldb::SBInputReader *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBInputReader & type is null", 0);
    return ;
  } 
  (arg1)->PushInputReader(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBDebugger_NotifyTopInputReader(void * jarg1, int jarg2) {
  lldb::SBDebugger *arg1 = (lldb::SBDebugger *) 0 ;
  lldb::InputReaderAction arg2 ;
  
  arg1 = (lldb::SBDebugger *)jarg1; 
  arg2 = (lldb::InputReaderAction)jarg2; 
  (arg1)->NotifyTopInputReader(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBDebugger_InputReaderIsTopReader(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  lldb::SBDebugger *arg1 = (lldb::SBDebugger *) 0 ;
  lldb::SBInputReader *arg2 = 0 ;
  bool result;
  
  arg1 = (lldb::SBDebugger *)jarg1; 
  arg2 = (lldb::SBInputReader *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBInputReader const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->InputReaderIsTopReader((lldb::SBInputReader const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SBDebugger_GetInstanceName(void * jarg1) {
  char * jresult ;
  lldb::SBDebugger *arg1 = (lldb::SBDebugger *) 0 ;
  char *result = 0 ;
  
  arg1 = (lldb::SBDebugger *)jarg1; 
  result = (char *)(arg1)->GetInstanceName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBDebugger_FindDebuggerWithID(int jarg1) {
  void * jresult ;
  int arg1 ;
  lldb::SBDebugger result;
  
  arg1 = (int)jarg1; 
  result = lldb::SBDebugger::FindDebuggerWithID(arg1);
  jresult = new lldb::SBDebugger((const lldb::SBDebugger &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBDebugger_SetInternalVariable(char * jarg1, char * jarg2, char * jarg3) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  lldb::SBError result;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  result = lldb::SBDebugger::SetInternalVariable((char const *)arg1,(char const *)arg2,(char const *)arg3);
  jresult = new lldb::SBError((const lldb::SBError &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBDebugger_GetInternalVariableValue(char * jarg1, char * jarg2) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  lldb::SBStringList result;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  result = lldb::SBDebugger::GetInternalVariableValue((char const *)arg1,(char const *)arg2);
  jresult = new lldb::SBStringList((const lldb::SBStringList &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBDebugger_GetDescription(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  lldb::SBDebugger *arg1 = (lldb::SBDebugger *) 0 ;
  lldb::SBStream *arg2 = 0 ;
  bool result;
  
  arg1 = (lldb::SBDebugger *)jarg1; 
  arg2 = (lldb::SBStream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBStream & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->GetDescription(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBDebugger_GetTerminalWidth(void * jarg1) {
  void * jresult ;
  lldb::SBDebugger *arg1 = (lldb::SBDebugger *) 0 ;
  uint32_t result;
  
  arg1 = (lldb::SBDebugger *)jarg1; 
  result = ((lldb::SBDebugger const *)arg1)->GetTerminalWidth();
  jresult = new uint32_t((const uint32_t &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBDebugger_SetTerminalWidth(void * jarg1, void * jarg2) {
  lldb::SBDebugger *arg1 = (lldb::SBDebugger *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  arg1 = (lldb::SBDebugger *)jarg1; 
  argp2 = (uint32_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->SetTerminalWidth(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBDebugger_GetID(void * jarg1) {
  void * jresult ;
  lldb::SBDebugger *arg1 = (lldb::SBDebugger *) 0 ;
  lldb::user_id_t result;
  
  arg1 = (lldb::SBDebugger *)jarg1; 
  result = (arg1)->GetID();
  jresult = new lldb::user_id_t((const lldb::user_id_t &)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SBDebugger_GetPrompt(void * jarg1) {
  char * jresult ;
  lldb::SBDebugger *arg1 = (lldb::SBDebugger *) 0 ;
  char *result = 0 ;
  
  arg1 = (lldb::SBDebugger *)jarg1; 
  result = (char *)((lldb::SBDebugger const *)arg1)->GetPrompt();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBDebugger_SetPrompt(void * jarg1, char * jarg2) {
  lldb::SBDebugger *arg1 = (lldb::SBDebugger *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (lldb::SBDebugger *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->SetPrompt((char const *)arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_SBDebugger_GetScriptLanguage(void * jarg1) {
  int jresult ;
  lldb::SBDebugger *arg1 = (lldb::SBDebugger *) 0 ;
  lldb::ScriptLanguage result;
  
  arg1 = (lldb::SBDebugger *)jarg1; 
  result = (lldb::ScriptLanguage)((lldb::SBDebugger const *)arg1)->GetScriptLanguage();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBDebugger_SetScriptLanguage(void * jarg1, int jarg2) {
  lldb::SBDebugger *arg1 = (lldb::SBDebugger *) 0 ;
  lldb::ScriptLanguage arg2 ;
  
  arg1 = (lldb::SBDebugger *)jarg1; 
  arg2 = (lldb::ScriptLanguage)jarg2; 
  (arg1)->SetScriptLanguage(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBDebugger_GetCloseInputOnEOF(void * jarg1) {
  unsigned int jresult ;
  lldb::SBDebugger *arg1 = (lldb::SBDebugger *) 0 ;
  bool result;
  
  arg1 = (lldb::SBDebugger *)jarg1; 
  result = (bool)((lldb::SBDebugger const *)arg1)->GetCloseInputOnEOF();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBDebugger_SetCloseInputOnEOF(void * jarg1, unsigned int jarg2) {
  lldb::SBDebugger *arg1 = (lldb::SBDebugger *) 0 ;
  bool arg2 ;
  
  arg1 = (lldb::SBDebugger *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetCloseInputOnEOF(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBDebugger_GetCategory(void * jarg1, char * jarg2) {
  void * jresult ;
  lldb::SBDebugger *arg1 = (lldb::SBDebugger *) 0 ;
  char *arg2 = (char *) 0 ;
  lldb::SBTypeCategory result;
  
  arg1 = (lldb::SBDebugger *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (arg1)->GetCategory((char const *)arg2);
  jresult = new lldb::SBTypeCategory((const lldb::SBTypeCategory &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBDebugger_CreateCategory(void * jarg1, char * jarg2) {
  void * jresult ;
  lldb::SBDebugger *arg1 = (lldb::SBDebugger *) 0 ;
  char *arg2 = (char *) 0 ;
  lldb::SBTypeCategory result;
  
  arg1 = (lldb::SBDebugger *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (arg1)->CreateCategory((char const *)arg2);
  jresult = new lldb::SBTypeCategory((const lldb::SBTypeCategory &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBDebugger_DeleteCategory(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  lldb::SBDebugger *arg1 = (lldb::SBDebugger *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (lldb::SBDebugger *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->DeleteCategory((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBDebugger_GetNumCategories(void * jarg1) {
  void * jresult ;
  lldb::SBDebugger *arg1 = (lldb::SBDebugger *) 0 ;
  uint32_t result;
  
  arg1 = (lldb::SBDebugger *)jarg1; 
  result = (arg1)->GetNumCategories();
  jresult = new uint32_t((const uint32_t &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBDebugger_GetCategoryAtIndex(void * jarg1, void * jarg2) {
  void * jresult ;
  lldb::SBDebugger *arg1 = (lldb::SBDebugger *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  lldb::SBTypeCategory result;
  
  arg1 = (lldb::SBDebugger *)jarg1; 
  argp2 = (uint32_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->GetCategoryAtIndex(arg2);
  jresult = new lldb::SBTypeCategory((const lldb::SBTypeCategory &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBDebugger_GetDefaultCategory(void * jarg1) {
  void * jresult ;
  lldb::SBDebugger *arg1 = (lldb::SBDebugger *) 0 ;
  lldb::SBTypeCategory result;
  
  arg1 = (lldb::SBDebugger *)jarg1; 
  result = (arg1)->GetDefaultCategory();
  jresult = new lldb::SBTypeCategory((const lldb::SBTypeCategory &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBDebugger_GetFormatForType(void * jarg1, void * jarg2) {
  void * jresult ;
  lldb::SBDebugger *arg1 = (lldb::SBDebugger *) 0 ;
  lldb::SBTypeNameSpecifier arg2 ;
  lldb::SBTypeNameSpecifier *argp2 ;
  lldb::SBTypeFormat result;
  
  arg1 = (lldb::SBDebugger *)jarg1; 
  argp2 = (lldb::SBTypeNameSpecifier *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null lldb::SBTypeNameSpecifier", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->GetFormatForType(arg2);
  jresult = new lldb::SBTypeFormat((const lldb::SBTypeFormat &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBDebugger_GetSummaryForType(void * jarg1, void * jarg2) {
  void * jresult ;
  lldb::SBDebugger *arg1 = (lldb::SBDebugger *) 0 ;
  lldb::SBTypeNameSpecifier arg2 ;
  lldb::SBTypeNameSpecifier *argp2 ;
  lldb::SBTypeSummary result;
  
  arg1 = (lldb::SBDebugger *)jarg1; 
  argp2 = (lldb::SBTypeNameSpecifier *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null lldb::SBTypeNameSpecifier", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->GetSummaryForType(arg2);
  jresult = new lldb::SBTypeSummary((const lldb::SBTypeSummary &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBDebugger_GetFilterForType(void * jarg1, void * jarg2) {
  void * jresult ;
  lldb::SBDebugger *arg1 = (lldb::SBDebugger *) 0 ;
  lldb::SBTypeNameSpecifier arg2 ;
  lldb::SBTypeNameSpecifier *argp2 ;
  lldb::SBTypeFilter result;
  
  arg1 = (lldb::SBDebugger *)jarg1; 
  argp2 = (lldb::SBTypeNameSpecifier *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null lldb::SBTypeNameSpecifier", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->GetFilterForType(arg2);
  jresult = new lldb::SBTypeFilter((const lldb::SBTypeFilter &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBDebugger_GetSyntheticForType(void * jarg1, void * jarg2) {
  void * jresult ;
  lldb::SBDebugger *arg1 = (lldb::SBDebugger *) 0 ;
  lldb::SBTypeNameSpecifier arg2 ;
  lldb::SBTypeNameSpecifier *argp2 ;
  lldb::SBTypeSynthetic result;
  
  arg1 = (lldb::SBDebugger *)jarg1; 
  argp2 = (lldb::SBTypeNameSpecifier *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null lldb::SBTypeNameSpecifier", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->GetSyntheticForType(arg2);
  jresult = new lldb::SBTypeSynthetic((const lldb::SBTypeSynthetic &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SBError__SWIG_0() {
  void * jresult ;
  lldb::SBError *result = 0 ;
  
  result = (lldb::SBError *)new lldb::SBError();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SBError__SWIG_1(void * jarg1) {
  void * jresult ;
  lldb::SBError *arg1 = 0 ;
  lldb::SBError *result = 0 ;
  
  arg1 = (lldb::SBError *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBError const & type is null", 0);
    return 0;
  } 
  result = (lldb::SBError *)new lldb::SBError((lldb::SBError const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SBError(void * jarg1) {
  lldb::SBError *arg1 = (lldb::SBError *) 0 ;
  
  arg1 = (lldb::SBError *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SBError_GetCString(void * jarg1) {
  char * jresult ;
  lldb::SBError *arg1 = (lldb::SBError *) 0 ;
  char *result = 0 ;
  
  arg1 = (lldb::SBError *)jarg1; 
  result = (char *)((lldb::SBError const *)arg1)->GetCString();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBError_Clear(void * jarg1) {
  lldb::SBError *arg1 = (lldb::SBError *) 0 ;
  
  arg1 = (lldb::SBError *)jarg1; 
  (arg1)->Clear();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBError_Fail(void * jarg1) {
  unsigned int jresult ;
  lldb::SBError *arg1 = (lldb::SBError *) 0 ;
  bool result;
  
  arg1 = (lldb::SBError *)jarg1; 
  result = (bool)((lldb::SBError const *)arg1)->Fail();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBError_Success(void * jarg1) {
  unsigned int jresult ;
  lldb::SBError *arg1 = (lldb::SBError *) 0 ;
  bool result;
  
  arg1 = (lldb::SBError *)jarg1; 
  result = (bool)((lldb::SBError const *)arg1)->Success();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBError_GetError(void * jarg1) {
  void * jresult ;
  lldb::SBError *arg1 = (lldb::SBError *) 0 ;
  uint32_t result;
  
  arg1 = (lldb::SBError *)jarg1; 
  result = ((lldb::SBError const *)arg1)->GetError();
  jresult = new uint32_t((const uint32_t &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SBError_GetType(void * jarg1) {
  int jresult ;
  lldb::SBError *arg1 = (lldb::SBError *) 0 ;
  lldb::ErrorType result;
  
  arg1 = (lldb::SBError *)jarg1; 
  result = (lldb::ErrorType)((lldb::SBError const *)arg1)->GetType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBError_SetError(void * jarg1, void * jarg2, int jarg3) {
  lldb::SBError *arg1 = (lldb::SBError *) 0 ;
  uint32_t arg2 ;
  lldb::ErrorType arg3 ;
  uint32_t *argp2 ;
  
  arg1 = (lldb::SBError *)jarg1; 
  argp2 = (uint32_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return ;
  }
  arg2 = *argp2; 
  arg3 = (lldb::ErrorType)jarg3; 
  (arg1)->SetError(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBError_SetErrorToErrno(void * jarg1) {
  lldb::SBError *arg1 = (lldb::SBError *) 0 ;
  
  arg1 = (lldb::SBError *)jarg1; 
  (arg1)->SetErrorToErrno();
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBError_SetErrorToGenericError(void * jarg1) {
  lldb::SBError *arg1 = (lldb::SBError *) 0 ;
  
  arg1 = (lldb::SBError *)jarg1; 
  (arg1)->SetErrorToGenericError();
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBError_SetErrorString(void * jarg1, char * jarg2) {
  lldb::SBError *arg1 = (lldb::SBError *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (lldb::SBError *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->SetErrorString((char const *)arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_SBError_SetErrorStringWithFormat(void * jarg1, char * jarg2) {
  int jresult ;
  lldb::SBError *arg1 = (lldb::SBError *) 0 ;
  char *arg2 = (char *) 0 ;
  void *arg3 = 0 ;
  int result;
  
  arg1 = (lldb::SBError *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (int)(arg1)->SetErrorStringWithFormat((char const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBError_IsValid(void * jarg1) {
  unsigned int jresult ;
  lldb::SBError *arg1 = (lldb::SBError *) 0 ;
  bool result;
  
  arg1 = (lldb::SBError *)jarg1; 
  result = (bool)((lldb::SBError const *)arg1)->IsValid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBError_GetDescription(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  lldb::SBError *arg1 = (lldb::SBError *) 0 ;
  lldb::SBStream *arg2 = 0 ;
  bool result;
  
  arg1 = (lldb::SBError *)jarg1; 
  arg2 = (lldb::SBStream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBStream & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->GetDescription(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SBEvent__SWIG_0() {
  void * jresult ;
  lldb::SBEvent *result = 0 ;
  
  result = (lldb::SBEvent *)new lldb::SBEvent();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SBEvent__SWIG_1(void * jarg1) {
  void * jresult ;
  lldb::SBEvent *arg1 = 0 ;
  lldb::SBEvent *result = 0 ;
  
  arg1 = (lldb::SBEvent *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBEvent const & type is null", 0);
    return 0;
  } 
  result = (lldb::SBEvent *)new lldb::SBEvent((lldb::SBEvent const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SBEvent__SWIG_2(void * jarg1, char * jarg2, void * jarg3) {
  void * jresult ;
  uint32_t arg1 ;
  char *arg2 = (char *) 0 ;
  uint32_t arg3 ;
  uint32_t *argp1 ;
  uint32_t *argp3 ;
  lldb::SBEvent *result = 0 ;
  
  argp1 = (uint32_t *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (char *)jarg2; 
  argp3 = (uint32_t *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return 0;
  }
  arg3 = *argp3; 
  result = (lldb::SBEvent *)new lldb::SBEvent(arg1,(char const *)arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SBEvent(void * jarg1) {
  lldb::SBEvent *arg1 = (lldb::SBEvent *) 0 ;
  
  arg1 = (lldb::SBEvent *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBEvent_IsValid(void * jarg1) {
  unsigned int jresult ;
  lldb::SBEvent *arg1 = (lldb::SBEvent *) 0 ;
  bool result;
  
  arg1 = (lldb::SBEvent *)jarg1; 
  result = (bool)((lldb::SBEvent const *)arg1)->IsValid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SBEvent_GetDataFlavor(void * jarg1) {
  char * jresult ;
  lldb::SBEvent *arg1 = (lldb::SBEvent *) 0 ;
  char *result = 0 ;
  
  arg1 = (lldb::SBEvent *)jarg1; 
  result = (char *)(arg1)->GetDataFlavor();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBEvent_GetType(void * jarg1) {
  void * jresult ;
  lldb::SBEvent *arg1 = (lldb::SBEvent *) 0 ;
  uint32_t result;
  
  arg1 = (lldb::SBEvent *)jarg1; 
  result = ((lldb::SBEvent const *)arg1)->GetType();
  jresult = new uint32_t((const uint32_t &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBEvent_GetBroadcaster(void * jarg1) {
  void * jresult ;
  lldb::SBEvent *arg1 = (lldb::SBEvent *) 0 ;
  lldb::SBBroadcaster result;
  
  arg1 = (lldb::SBEvent *)jarg1; 
  result = ((lldb::SBEvent const *)arg1)->GetBroadcaster();
  jresult = new lldb::SBBroadcaster((const lldb::SBBroadcaster &)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SBEvent_GetBroadcasterClass(void * jarg1) {
  char * jresult ;
  lldb::SBEvent *arg1 = (lldb::SBEvent *) 0 ;
  char *result = 0 ;
  
  arg1 = (lldb::SBEvent *)jarg1; 
  result = (char *)((lldb::SBEvent const *)arg1)->GetBroadcasterClass();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBEvent_BroadcasterMatchesRef(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  lldb::SBEvent *arg1 = (lldb::SBEvent *) 0 ;
  lldb::SBBroadcaster *arg2 = 0 ;
  bool result;
  
  arg1 = (lldb::SBEvent *)jarg1; 
  arg2 = (lldb::SBBroadcaster *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBBroadcaster const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->BroadcasterMatchesRef((lldb::SBBroadcaster const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBEvent_Clear(void * jarg1) {
  lldb::SBEvent *arg1 = (lldb::SBEvent *) 0 ;
  
  arg1 = (lldb::SBEvent *)jarg1; 
  (arg1)->Clear();
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SBEvent_GetCStringFromEvent(void * jarg1) {
  char * jresult ;
  lldb::SBEvent *arg1 = 0 ;
  char *result = 0 ;
  
  arg1 = (lldb::SBEvent *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBEvent const & type is null", 0);
    return 0;
  } 
  result = (char *)lldb::SBEvent::GetCStringFromEvent((lldb::SBEvent const &)*arg1);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBEvent_GetDescription(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  lldb::SBEvent *arg1 = (lldb::SBEvent *) 0 ;
  lldb::SBStream *arg2 = 0 ;
  bool result;
  
  arg1 = (lldb::SBEvent *)jarg1; 
  arg2 = (lldb::SBStream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBStream & type is null", 0);
    return 0;
  } 
  result = (bool)((lldb::SBEvent const *)arg1)->GetDescription(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SBFileSpec__SWIG_0() {
  void * jresult ;
  lldb::SBFileSpec *result = 0 ;
  
  result = (lldb::SBFileSpec *)new lldb::SBFileSpec();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SBFileSpec__SWIG_1(void * jarg1) {
  void * jresult ;
  lldb::SBFileSpec *arg1 = 0 ;
  lldb::SBFileSpec *result = 0 ;
  
  arg1 = (lldb::SBFileSpec *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBFileSpec const & type is null", 0);
    return 0;
  } 
  result = (lldb::SBFileSpec *)new lldb::SBFileSpec((lldb::SBFileSpec const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SBFileSpec__SWIG_2(char * jarg1) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  lldb::SBFileSpec *result = 0 ;
  
  arg1 = (char *)jarg1; 
  result = (lldb::SBFileSpec *)new lldb::SBFileSpec((char const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SBFileSpec__SWIG_3(char * jarg1, unsigned int jarg2) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  bool arg2 ;
  lldb::SBFileSpec *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (lldb::SBFileSpec *)new lldb::SBFileSpec((char const *)arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SBFileSpec(void * jarg1) {
  lldb::SBFileSpec *arg1 = (lldb::SBFileSpec *) 0 ;
  
  arg1 = (lldb::SBFileSpec *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBFileSpec_IsValid(void * jarg1) {
  unsigned int jresult ;
  lldb::SBFileSpec *arg1 = (lldb::SBFileSpec *) 0 ;
  bool result;
  
  arg1 = (lldb::SBFileSpec *)jarg1; 
  result = (bool)((lldb::SBFileSpec const *)arg1)->IsValid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBFileSpec_Exists(void * jarg1) {
  unsigned int jresult ;
  lldb::SBFileSpec *arg1 = (lldb::SBFileSpec *) 0 ;
  bool result;
  
  arg1 = (lldb::SBFileSpec *)jarg1; 
  result = (bool)((lldb::SBFileSpec const *)arg1)->Exists();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBFileSpec_ResolveExecutableLocation(void * jarg1) {
  unsigned int jresult ;
  lldb::SBFileSpec *arg1 = (lldb::SBFileSpec *) 0 ;
  bool result;
  
  arg1 = (lldb::SBFileSpec *)jarg1; 
  result = (bool)(arg1)->ResolveExecutableLocation();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SBFileSpec_GetFilename(void * jarg1) {
  char * jresult ;
  lldb::SBFileSpec *arg1 = (lldb::SBFileSpec *) 0 ;
  char *result = 0 ;
  
  arg1 = (lldb::SBFileSpec *)jarg1; 
  result = (char *)((lldb::SBFileSpec const *)arg1)->GetFilename();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SBFileSpec_GetDirectory(void * jarg1) {
  char * jresult ;
  lldb::SBFileSpec *arg1 = (lldb::SBFileSpec *) 0 ;
  char *result = 0 ;
  
  arg1 = (lldb::SBFileSpec *)jarg1; 
  result = (char *)((lldb::SBFileSpec const *)arg1)->GetDirectory();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBFileSpec_GetPath(void * jarg1, char * jarg2, unsigned long jarg3) {
  void * jresult ;
  lldb::SBFileSpec *arg1 = (lldb::SBFileSpec *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  uint32_t result;
  
  arg1 = (lldb::SBFileSpec *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (size_t)jarg3; 
  result = ((lldb::SBFileSpec const *)arg1)->GetPath(arg2,arg3);
  jresult = new uint32_t((const uint32_t &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SBFileSpec_ResolvePath(char * jarg1, char * jarg2, unsigned long jarg3) {
  int jresult ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  int result;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (size_t)jarg3; 
  result = (int)lldb::SBFileSpec::ResolvePath((char const *)arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBFileSpec_GetDescription(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  lldb::SBFileSpec *arg1 = (lldb::SBFileSpec *) 0 ;
  lldb::SBStream *arg2 = 0 ;
  bool result;
  
  arg1 = (lldb::SBFileSpec *)jarg1; 
  arg2 = (lldb::SBStream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBStream & type is null", 0);
    return 0;
  } 
  result = (bool)((lldb::SBFileSpec const *)arg1)->GetDescription(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SBFileSpecList__SWIG_0() {
  void * jresult ;
  lldb::SBFileSpecList *result = 0 ;
  
  result = (lldb::SBFileSpecList *)new lldb::SBFileSpecList();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SBFileSpecList__SWIG_1(void * jarg1) {
  void * jresult ;
  lldb::SBFileSpecList *arg1 = 0 ;
  lldb::SBFileSpecList *result = 0 ;
  
  arg1 = (lldb::SBFileSpecList *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBFileSpecList const & type is null", 0);
    return 0;
  } 
  result = (lldb::SBFileSpecList *)new lldb::SBFileSpecList((lldb::SBFileSpecList const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SBFileSpecList(void * jarg1) {
  lldb::SBFileSpecList *arg1 = (lldb::SBFileSpecList *) 0 ;
  
  arg1 = (lldb::SBFileSpecList *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBFileSpecList_GetSize(void * jarg1) {
  void * jresult ;
  lldb::SBFileSpecList *arg1 = (lldb::SBFileSpecList *) 0 ;
  uint32_t result;
  
  arg1 = (lldb::SBFileSpecList *)jarg1; 
  result = ((lldb::SBFileSpecList const *)arg1)->GetSize();
  jresult = new uint32_t((const uint32_t &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBFileSpecList_GetDescription(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  lldb::SBFileSpecList *arg1 = (lldb::SBFileSpecList *) 0 ;
  lldb::SBStream *arg2 = 0 ;
  bool result;
  
  arg1 = (lldb::SBFileSpecList *)jarg1; 
  arg2 = (lldb::SBStream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBStream & type is null", 0);
    return 0;
  } 
  result = (bool)((lldb::SBFileSpecList const *)arg1)->GetDescription(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBFileSpecList_Append(void * jarg1, void * jarg2) {
  lldb::SBFileSpecList *arg1 = (lldb::SBFileSpecList *) 0 ;
  lldb::SBFileSpec *arg2 = 0 ;
  
  arg1 = (lldb::SBFileSpecList *)jarg1; 
  arg2 = (lldb::SBFileSpec *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBFileSpec const & type is null", 0);
    return ;
  } 
  (arg1)->Append((lldb::SBFileSpec const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBFileSpecList_AppendIfUnique(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  lldb::SBFileSpecList *arg1 = (lldb::SBFileSpecList *) 0 ;
  lldb::SBFileSpec *arg2 = 0 ;
  bool result;
  
  arg1 = (lldb::SBFileSpecList *)jarg1; 
  arg2 = (lldb::SBFileSpec *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBFileSpec const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->AppendIfUnique((lldb::SBFileSpec const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBFileSpecList_Clear(void * jarg1) {
  lldb::SBFileSpecList *arg1 = (lldb::SBFileSpecList *) 0 ;
  
  arg1 = (lldb::SBFileSpecList *)jarg1; 
  (arg1)->Clear();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBFileSpecList_FindFileIndex(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4) {
  void * jresult ;
  lldb::SBFileSpecList *arg1 = (lldb::SBFileSpecList *) 0 ;
  uint32_t arg2 ;
  lldb::SBFileSpec *arg3 = 0 ;
  bool arg4 ;
  uint32_t *argp2 ;
  uint32_t result;
  
  arg1 = (lldb::SBFileSpecList *)jarg1; 
  argp2 = (uint32_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (lldb::SBFileSpec *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBFileSpec const & type is null", 0);
    return 0;
  } 
  arg4 = jarg4 ? true : false; 
  result = (arg1)->FindFileIndex(arg2,(lldb::SBFileSpec const &)*arg3,arg4);
  jresult = new uint32_t((const uint32_t &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBFileSpecList_GetFileSpecAtIndex(void * jarg1, void * jarg2) {
  void * jresult ;
  lldb::SBFileSpecList *arg1 = (lldb::SBFileSpecList *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  lldb::SBFileSpec result;
  
  arg1 = (lldb::SBFileSpecList *)jarg1; 
  argp2 = (uint32_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = ((lldb::SBFileSpecList const *)arg1)->GetFileSpecAtIndex(arg2);
  jresult = new lldb::SBFileSpec((const lldb::SBFileSpec &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SBFrame__SWIG_0() {
  void * jresult ;
  lldb::SBFrame *result = 0 ;
  
  result = (lldb::SBFrame *)new lldb::SBFrame();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SBFrame__SWIG_1(void * jarg1) {
  void * jresult ;
  lldb::SBFrame *arg1 = 0 ;
  lldb::SBFrame *result = 0 ;
  
  arg1 = (lldb::SBFrame *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBFrame const & type is null", 0);
    return 0;
  } 
  result = (lldb::SBFrame *)new lldb::SBFrame((lldb::SBFrame const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SBFrame(void * jarg1) {
  lldb::SBFrame *arg1 = (lldb::SBFrame *) 0 ;
  
  arg1 = (lldb::SBFrame *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBFrame_IsEqual(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  lldb::SBFrame *arg1 = (lldb::SBFrame *) 0 ;
  lldb::SBFrame *arg2 = 0 ;
  bool result;
  
  arg1 = (lldb::SBFrame *)jarg1; 
  arg2 = (lldb::SBFrame *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBFrame const & type is null", 0);
    return 0;
  } 
  result = (bool)((lldb::SBFrame const *)arg1)->IsEqual((lldb::SBFrame const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBFrame_IsValid(void * jarg1) {
  unsigned int jresult ;
  lldb::SBFrame *arg1 = (lldb::SBFrame *) 0 ;
  bool result;
  
  arg1 = (lldb::SBFrame *)jarg1; 
  result = (bool)((lldb::SBFrame const *)arg1)->IsValid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBFrame_GetFrameID(void * jarg1) {
  void * jresult ;
  lldb::SBFrame *arg1 = (lldb::SBFrame *) 0 ;
  uint32_t result;
  
  arg1 = (lldb::SBFrame *)jarg1; 
  result = ((lldb::SBFrame const *)arg1)->GetFrameID();
  jresult = new uint32_t((const uint32_t &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBFrame_GetPC(void * jarg1) {
  void * jresult ;
  lldb::SBFrame *arg1 = (lldb::SBFrame *) 0 ;
  lldb::addr_t result;
  
  arg1 = (lldb::SBFrame *)jarg1; 
  result = ((lldb::SBFrame const *)arg1)->GetPC();
  jresult = new lldb::addr_t((const lldb::addr_t &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBFrame_SetPC(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  lldb::SBFrame *arg1 = (lldb::SBFrame *) 0 ;
  lldb::addr_t arg2 ;
  lldb::addr_t *argp2 ;
  bool result;
  
  arg1 = (lldb::SBFrame *)jarg1; 
  argp2 = (lldb::addr_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null lldb::addr_t", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)(arg1)->SetPC(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBFrame_GetSP(void * jarg1) {
  void * jresult ;
  lldb::SBFrame *arg1 = (lldb::SBFrame *) 0 ;
  lldb::addr_t result;
  
  arg1 = (lldb::SBFrame *)jarg1; 
  result = ((lldb::SBFrame const *)arg1)->GetSP();
  jresult = new lldb::addr_t((const lldb::addr_t &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBFrame_GetFP(void * jarg1) {
  void * jresult ;
  lldb::SBFrame *arg1 = (lldb::SBFrame *) 0 ;
  lldb::addr_t result;
  
  arg1 = (lldb::SBFrame *)jarg1; 
  result = ((lldb::SBFrame const *)arg1)->GetFP();
  jresult = new lldb::addr_t((const lldb::addr_t &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBFrame_GetPCAddress(void * jarg1) {
  void * jresult ;
  lldb::SBFrame *arg1 = (lldb::SBFrame *) 0 ;
  lldb::SBAddress result;
  
  arg1 = (lldb::SBFrame *)jarg1; 
  result = ((lldb::SBFrame const *)arg1)->GetPCAddress();
  jresult = new lldb::SBAddress((const lldb::SBAddress &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBFrame_GetSymbolContext(void * jarg1, void * jarg2) {
  void * jresult ;
  lldb::SBFrame *arg1 = (lldb::SBFrame *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  lldb::SBSymbolContext result;
  
  arg1 = (lldb::SBFrame *)jarg1; 
  argp2 = (uint32_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = ((lldb::SBFrame const *)arg1)->GetSymbolContext(arg2);
  jresult = new lldb::SBSymbolContext((const lldb::SBSymbolContext &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBFrame_GetModule(void * jarg1) {
  void * jresult ;
  lldb::SBFrame *arg1 = (lldb::SBFrame *) 0 ;
  lldb::SBModule result;
  
  arg1 = (lldb::SBFrame *)jarg1; 
  result = ((lldb::SBFrame const *)arg1)->GetModule();
  jresult = new lldb::SBModule((const lldb::SBModule &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBFrame_GetCompileUnit(void * jarg1) {
  void * jresult ;
  lldb::SBFrame *arg1 = (lldb::SBFrame *) 0 ;
  lldb::SBCompileUnit result;
  
  arg1 = (lldb::SBFrame *)jarg1; 
  result = ((lldb::SBFrame const *)arg1)->GetCompileUnit();
  jresult = new lldb::SBCompileUnit((const lldb::SBCompileUnit &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBFrame_GetFunction(void * jarg1) {
  void * jresult ;
  lldb::SBFrame *arg1 = (lldb::SBFrame *) 0 ;
  lldb::SBFunction result;
  
  arg1 = (lldb::SBFrame *)jarg1; 
  result = ((lldb::SBFrame const *)arg1)->GetFunction();
  jresult = new lldb::SBFunction((const lldb::SBFunction &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBFrame_GetSymbol(void * jarg1) {
  void * jresult ;
  lldb::SBFrame *arg1 = (lldb::SBFrame *) 0 ;
  lldb::SBSymbol result;
  
  arg1 = (lldb::SBFrame *)jarg1; 
  result = ((lldb::SBFrame const *)arg1)->GetSymbol();
  jresult = new lldb::SBSymbol((const lldb::SBSymbol &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBFrame_GetBlock(void * jarg1) {
  void * jresult ;
  lldb::SBFrame *arg1 = (lldb::SBFrame *) 0 ;
  lldb::SBBlock result;
  
  arg1 = (lldb::SBFrame *)jarg1; 
  result = ((lldb::SBFrame const *)arg1)->GetBlock();
  jresult = new lldb::SBBlock((const lldb::SBBlock &)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SBFrame_GetFunctionName(void * jarg1) {
  char * jresult ;
  lldb::SBFrame *arg1 = (lldb::SBFrame *) 0 ;
  char *result = 0 ;
  
  arg1 = (lldb::SBFrame *)jarg1; 
  result = (char *)(arg1)->GetFunctionName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBFrame_IsInlined(void * jarg1) {
  unsigned int jresult ;
  lldb::SBFrame *arg1 = (lldb::SBFrame *) 0 ;
  bool result;
  
  arg1 = (lldb::SBFrame *)jarg1; 
  result = (bool)(arg1)->IsInlined();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBFrame_EvaluateExpression__SWIG_0(void * jarg1, char * jarg2) {
  void * jresult ;
  lldb::SBFrame *arg1 = (lldb::SBFrame *) 0 ;
  char *arg2 = (char *) 0 ;
  lldb::SBValue result;
  
  arg1 = (lldb::SBFrame *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (arg1)->EvaluateExpression((char const *)arg2);
  jresult = new lldb::SBValue((const lldb::SBValue &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBFrame_EvaluateExpression__SWIG_1(void * jarg1, char * jarg2, int jarg3) {
  void * jresult ;
  lldb::SBFrame *arg1 = (lldb::SBFrame *) 0 ;
  char *arg2 = (char *) 0 ;
  lldb::DynamicValueType arg3 ;
  lldb::SBValue result;
  
  arg1 = (lldb::SBFrame *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (lldb::DynamicValueType)jarg3; 
  result = (arg1)->EvaluateExpression((char const *)arg2,arg3);
  jresult = new lldb::SBValue((const lldb::SBValue &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBFrame_EvaluateExpression__SWIG_2(void * jarg1, char * jarg2, int jarg3, unsigned int jarg4) {
  void * jresult ;
  lldb::SBFrame *arg1 = (lldb::SBFrame *) 0 ;
  char *arg2 = (char *) 0 ;
  lldb::DynamicValueType arg3 ;
  bool arg4 ;
  lldb::SBValue result;
  
  arg1 = (lldb::SBFrame *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (lldb::DynamicValueType)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (arg1)->EvaluateExpression((char const *)arg2,arg3,arg4);
  jresult = new lldb::SBValue((const lldb::SBValue &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBFrame_GetFrameBlock(void * jarg1) {
  void * jresult ;
  lldb::SBFrame *arg1 = (lldb::SBFrame *) 0 ;
  lldb::SBBlock result;
  
  arg1 = (lldb::SBFrame *)jarg1; 
  result = ((lldb::SBFrame const *)arg1)->GetFrameBlock();
  jresult = new lldb::SBBlock((const lldb::SBBlock &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBFrame_GetLineEntry(void * jarg1) {
  void * jresult ;
  lldb::SBFrame *arg1 = (lldb::SBFrame *) 0 ;
  lldb::SBLineEntry result;
  
  arg1 = (lldb::SBFrame *)jarg1; 
  result = ((lldb::SBFrame const *)arg1)->GetLineEntry();
  jresult = new lldb::SBLineEntry((const lldb::SBLineEntry &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBFrame_GetThread(void * jarg1) {
  void * jresult ;
  lldb::SBFrame *arg1 = (lldb::SBFrame *) 0 ;
  lldb::SBThread result;
  
  arg1 = (lldb::SBFrame *)jarg1; 
  result = ((lldb::SBFrame const *)arg1)->GetThread();
  jresult = new lldb::SBThread((const lldb::SBThread &)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SBFrame_Disassemble(void * jarg1) {
  char * jresult ;
  lldb::SBFrame *arg1 = (lldb::SBFrame *) 0 ;
  char *result = 0 ;
  
  arg1 = (lldb::SBFrame *)jarg1; 
  result = (char *)((lldb::SBFrame const *)arg1)->Disassemble();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBFrame_Clear(void * jarg1) {
  lldb::SBFrame *arg1 = (lldb::SBFrame *) 0 ;
  
  arg1 = (lldb::SBFrame *)jarg1; 
  (arg1)->Clear();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBFrame_GetVariables__SWIG_0(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5) {
  void * jresult ;
  lldb::SBFrame *arg1 = (lldb::SBFrame *) 0 ;
  bool arg2 ;
  bool arg3 ;
  bool arg4 ;
  bool arg5 ;
  lldb::SBValueList result;
  
  arg1 = (lldb::SBFrame *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  result = (arg1)->GetVariables(arg2,arg3,arg4,arg5);
  jresult = new lldb::SBValueList((const lldb::SBValueList &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBFrame_GetVariables__SWIG_1(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5, int jarg6) {
  void * jresult ;
  lldb::SBFrame *arg1 = (lldb::SBFrame *) 0 ;
  bool arg2 ;
  bool arg3 ;
  bool arg4 ;
  bool arg5 ;
  lldb::DynamicValueType arg6 ;
  lldb::SBValueList result;
  
  arg1 = (lldb::SBFrame *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  arg6 = (lldb::DynamicValueType)jarg6; 
  result = (arg1)->GetVariables(arg2,arg3,arg4,arg5,arg6);
  jresult = new lldb::SBValueList((const lldb::SBValueList &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBFrame_GetRegisters(void * jarg1) {
  void * jresult ;
  lldb::SBFrame *arg1 = (lldb::SBFrame *) 0 ;
  lldb::SBValueList result;
  
  arg1 = (lldb::SBFrame *)jarg1; 
  result = (arg1)->GetRegisters();
  jresult = new lldb::SBValueList((const lldb::SBValueList &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBFrame_FindVariable__SWIG_0(void * jarg1, char * jarg2) {
  void * jresult ;
  lldb::SBFrame *arg1 = (lldb::SBFrame *) 0 ;
  char *arg2 = (char *) 0 ;
  lldb::SBValue result;
  
  arg1 = (lldb::SBFrame *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (arg1)->FindVariable((char const *)arg2);
  jresult = new lldb::SBValue((const lldb::SBValue &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBFrame_FindVariable__SWIG_1(void * jarg1, char * jarg2, int jarg3) {
  void * jresult ;
  lldb::SBFrame *arg1 = (lldb::SBFrame *) 0 ;
  char *arg2 = (char *) 0 ;
  lldb::DynamicValueType arg3 ;
  lldb::SBValue result;
  
  arg1 = (lldb::SBFrame *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (lldb::DynamicValueType)jarg3; 
  result = (arg1)->FindVariable((char const *)arg2,arg3);
  jresult = new lldb::SBValue((const lldb::SBValue &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBFrame_GetValueForVariablePath__SWIG_0(void * jarg1, char * jarg2) {
  void * jresult ;
  lldb::SBFrame *arg1 = (lldb::SBFrame *) 0 ;
  char *arg2 = (char *) 0 ;
  lldb::SBValue result;
  
  arg1 = (lldb::SBFrame *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (arg1)->GetValueForVariablePath((char const *)arg2);
  jresult = new lldb::SBValue((const lldb::SBValue &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBFrame_GetValueForVariablePath__SWIG_1(void * jarg1, char * jarg2, int jarg3) {
  void * jresult ;
  lldb::SBFrame *arg1 = (lldb::SBFrame *) 0 ;
  char *arg2 = (char *) 0 ;
  lldb::DynamicValueType arg3 ;
  lldb::SBValue result;
  
  arg1 = (lldb::SBFrame *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (lldb::DynamicValueType)jarg3; 
  result = (arg1)->GetValueForVariablePath((char const *)arg2,arg3);
  jresult = new lldb::SBValue((const lldb::SBValue &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBFrame_FindValue__SWIG_0(void * jarg1, char * jarg2, int jarg3) {
  void * jresult ;
  lldb::SBFrame *arg1 = (lldb::SBFrame *) 0 ;
  char *arg2 = (char *) 0 ;
  lldb::ValueType arg3 ;
  lldb::SBValue result;
  
  arg1 = (lldb::SBFrame *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (lldb::ValueType)jarg3; 
  result = (arg1)->FindValue((char const *)arg2,arg3);
  jresult = new lldb::SBValue((const lldb::SBValue &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBFrame_FindValue__SWIG_1(void * jarg1, char * jarg2, int jarg3, int jarg4) {
  void * jresult ;
  lldb::SBFrame *arg1 = (lldb::SBFrame *) 0 ;
  char *arg2 = (char *) 0 ;
  lldb::ValueType arg3 ;
  lldb::DynamicValueType arg4 ;
  lldb::SBValue result;
  
  arg1 = (lldb::SBFrame *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (lldb::ValueType)jarg3; 
  arg4 = (lldb::DynamicValueType)jarg4; 
  result = (arg1)->FindValue((char const *)arg2,arg3,arg4);
  jresult = new lldb::SBValue((const lldb::SBValue &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBFrame_GetDescription(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  lldb::SBFrame *arg1 = (lldb::SBFrame *) 0 ;
  lldb::SBStream *arg2 = 0 ;
  bool result;
  
  arg1 = (lldb::SBFrame *)jarg1; 
  arg2 = (lldb::SBStream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBStream & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->GetDescription(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SBFunction__SWIG_0() {
  void * jresult ;
  lldb::SBFunction *result = 0 ;
  
  result = (lldb::SBFunction *)new lldb::SBFunction();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SBFunction__SWIG_1(void * jarg1) {
  void * jresult ;
  lldb::SBFunction *arg1 = 0 ;
  lldb::SBFunction *result = 0 ;
  
  arg1 = (lldb::SBFunction *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBFunction const & type is null", 0);
    return 0;
  } 
  result = (lldb::SBFunction *)new lldb::SBFunction((lldb::SBFunction const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SBFunction(void * jarg1) {
  lldb::SBFunction *arg1 = (lldb::SBFunction *) 0 ;
  
  arg1 = (lldb::SBFunction *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBFunction_IsValid(void * jarg1) {
  unsigned int jresult ;
  lldb::SBFunction *arg1 = (lldb::SBFunction *) 0 ;
  bool result;
  
  arg1 = (lldb::SBFunction *)jarg1; 
  result = (bool)((lldb::SBFunction const *)arg1)->IsValid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SBFunction_GetName(void * jarg1) {
  char * jresult ;
  lldb::SBFunction *arg1 = (lldb::SBFunction *) 0 ;
  char *result = 0 ;
  
  arg1 = (lldb::SBFunction *)jarg1; 
  result = (char *)((lldb::SBFunction const *)arg1)->GetName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SBFunction_GetMangledName(void * jarg1) {
  char * jresult ;
  lldb::SBFunction *arg1 = (lldb::SBFunction *) 0 ;
  char *result = 0 ;
  
  arg1 = (lldb::SBFunction *)jarg1; 
  result = (char *)((lldb::SBFunction const *)arg1)->GetMangledName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBFunction_GetInstructions(void * jarg1, void * jarg2) {
  void * jresult ;
  lldb::SBFunction *arg1 = (lldb::SBFunction *) 0 ;
  lldb::SBTarget arg2 ;
  lldb::SBTarget *argp2 ;
  lldb::SBInstructionList result;
  
  arg1 = (lldb::SBFunction *)jarg1; 
  argp2 = (lldb::SBTarget *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null lldb::SBTarget", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->GetInstructions(arg2);
  jresult = new lldb::SBInstructionList((const lldb::SBInstructionList &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBFunction_GetStartAddress(void * jarg1) {
  void * jresult ;
  lldb::SBFunction *arg1 = (lldb::SBFunction *) 0 ;
  lldb::SBAddress result;
  
  arg1 = (lldb::SBFunction *)jarg1; 
  result = (arg1)->GetStartAddress();
  jresult = new lldb::SBAddress((const lldb::SBAddress &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBFunction_GetEndAddress(void * jarg1) {
  void * jresult ;
  lldb::SBFunction *arg1 = (lldb::SBFunction *) 0 ;
  lldb::SBAddress result;
  
  arg1 = (lldb::SBFunction *)jarg1; 
  result = (arg1)->GetEndAddress();
  jresult = new lldb::SBAddress((const lldb::SBAddress &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBFunction_GetPrologueByteSize(void * jarg1) {
  void * jresult ;
  lldb::SBFunction *arg1 = (lldb::SBFunction *) 0 ;
  uint32_t result;
  
  arg1 = (lldb::SBFunction *)jarg1; 
  result = (arg1)->GetPrologueByteSize();
  jresult = new uint32_t((const uint32_t &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBFunction_GetType(void * jarg1) {
  void * jresult ;
  lldb::SBFunction *arg1 = (lldb::SBFunction *) 0 ;
  lldb::SBType result;
  
  arg1 = (lldb::SBFunction *)jarg1; 
  result = (arg1)->GetType();
  jresult = new lldb::SBType((const lldb::SBType &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBFunction_GetBlock(void * jarg1) {
  void * jresult ;
  lldb::SBFunction *arg1 = (lldb::SBFunction *) 0 ;
  lldb::SBBlock result;
  
  arg1 = (lldb::SBFunction *)jarg1; 
  result = (arg1)->GetBlock();
  jresult = new lldb::SBBlock((const lldb::SBBlock &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBFunction_GetDescription(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  lldb::SBFunction *arg1 = (lldb::SBFunction *) 0 ;
  lldb::SBStream *arg2 = 0 ;
  bool result;
  
  arg1 = (lldb::SBFunction *)jarg1; 
  arg2 = (lldb::SBStream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBStream & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->GetDescription(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBHostOS_GetProgramFileSpec() {
  void * jresult ;
  lldb::SBFileSpec result;
  
  result = lldb::SBHostOS::GetProgramFileSpec();
  jresult = new lldb::SBFileSpec((const lldb::SBFileSpec &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBHostOS_ThreadCreated(char * jarg1) {
  char *arg1 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  lldb::SBHostOS::ThreadCreated((char const *)arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBHostOS_ThreadCreate(char * jarg1, void * jarg2, void* jarg3, void * jarg4) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  void *(*arg2)(void *) = (void *(*)(void *)) 0 ;
  void *arg3 = (void *) 0 ;
  lldb::SBError *arg4 = (lldb::SBError *) 0 ;
  lldb::thread_t result;
  
  arg1 = (char *)jarg1; 
  arg2 = (void *(*)(void *))jarg2; 
  arg3 = (void *)jarg3; /* IntPtr */ 
  arg4 = (lldb::SBError *)jarg4; 
  result = lldb::SBHostOS::ThreadCreate((char const *)arg1,arg2,arg3,arg4);
  jresult = new lldb::thread_t((const lldb::thread_t &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBHostOS_ThreadCancel(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  lldb::thread_t arg1 ;
  lldb::SBError *arg2 = (lldb::SBError *) 0 ;
  lldb::thread_t *argp1 ;
  bool result;
  
  argp1 = (lldb::thread_t *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null lldb::thread_t", 0);
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (lldb::SBError *)jarg2; 
  result = (bool)lldb::SBHostOS::ThreadCancel(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBHostOS_ThreadDetach(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  lldb::thread_t arg1 ;
  lldb::SBError *arg2 = (lldb::SBError *) 0 ;
  lldb::thread_t *argp1 ;
  bool result;
  
  argp1 = (lldb::thread_t *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null lldb::thread_t", 0);
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (lldb::SBError *)jarg2; 
  result = (bool)lldb::SBHostOS::ThreadDetach(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBHostOS_ThreadJoin(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  lldb::thread_t arg1 ;
  void **arg2 = (void **) 0 ;
  lldb::SBError *arg3 = (lldb::SBError *) 0 ;
  lldb::thread_t *argp1 ;
  bool result;
  
  argp1 = (lldb::thread_t *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null lldb::thread_t", 0);
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (void **)jarg2; 
  arg3 = (lldb::SBError *)jarg3; 
  result = (bool)lldb::SBHostOS::ThreadJoin(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SBHostOS() {
  void * jresult ;
  lldb::SBHostOS *result = 0 ;
  
  result = (lldb::SBHostOS *)new lldb::SBHostOS();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SBHostOS(void * jarg1) {
  lldb::SBHostOS *arg1 = (lldb::SBHostOS *) 0 ;
  
  arg1 = (lldb::SBHostOS *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SBInputReader__SWIG_0() {
  void * jresult ;
  lldb::SBInputReader *result = 0 ;
  
  result = (lldb::SBInputReader *)new lldb::SBInputReader();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SBInputReader__SWIG_1(void * jarg1) {
  void * jresult ;
  lldb::SBInputReader *arg1 = 0 ;
  lldb::SBInputReader *result = 0 ;
  
  arg1 = (lldb::SBInputReader *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBInputReader const & type is null", 0);
    return 0;
  } 
  result = (lldb::SBInputReader *)new lldb::SBInputReader((lldb::SBInputReader const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SBInputReader(void * jarg1) {
  lldb::SBInputReader *arg1 = (lldb::SBInputReader *) 0 ;
  
  arg1 = (lldb::SBInputReader *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBInputReader_Initialize(void * jarg1, void * jarg2, void * jarg3, void* jarg4, int jarg5, char * jarg6, char * jarg7, unsigned int jarg8) {
  void * jresult ;
  lldb::SBInputReader *arg1 = (lldb::SBInputReader *) 0 ;
  lldb::SBDebugger *arg2 = 0 ;
  lldb::SBInputReader::Callback arg3 = (lldb::SBInputReader::Callback) 0 ;
  void *arg4 = (void *) 0 ;
  lldb::InputReaderGranularity arg5 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  bool arg8 ;
  lldb::SBError result;
  
  arg1 = (lldb::SBInputReader *)jarg1; 
  arg2 = (lldb::SBDebugger *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBDebugger & type is null", 0);
    return 0;
  } 
  arg3 = (lldb::SBInputReader::Callback)jarg3; 
  arg4 = (void *)jarg4; /* IntPtr */ 
  arg5 = (lldb::InputReaderGranularity)jarg5; 
  arg6 = (char *)jarg6; 
  arg7 = (char *)jarg7; 
  arg8 = jarg8 ? true : false; 
  result = (arg1)->Initialize(*arg2,arg3,arg4,arg5,(char const *)arg6,(char const *)arg7,arg8);
  jresult = new lldb::SBError((const lldb::SBError &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBInputReader_IsValid(void * jarg1) {
  unsigned int jresult ;
  lldb::SBInputReader *arg1 = (lldb::SBInputReader *) 0 ;
  bool result;
  
  arg1 = (lldb::SBInputReader *)jarg1; 
  result = (bool)((lldb::SBInputReader const *)arg1)->IsValid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBInputReader_IsActive(void * jarg1) {
  unsigned int jresult ;
  lldb::SBInputReader *arg1 = (lldb::SBInputReader *) 0 ;
  bool result;
  
  arg1 = (lldb::SBInputReader *)jarg1; 
  result = (bool)((lldb::SBInputReader const *)arg1)->IsActive();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBInputReader_IsDone(void * jarg1) {
  unsigned int jresult ;
  lldb::SBInputReader *arg1 = (lldb::SBInputReader *) 0 ;
  bool result;
  
  arg1 = (lldb::SBInputReader *)jarg1; 
  result = (bool)((lldb::SBInputReader const *)arg1)->IsDone();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBInputReader_SetIsDone(void * jarg1, unsigned int jarg2) {
  lldb::SBInputReader *arg1 = (lldb::SBInputReader *) 0 ;
  bool arg2 ;
  
  arg1 = (lldb::SBInputReader *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetIsDone(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_SBInputReader_GetGranularity(void * jarg1) {
  int jresult ;
  lldb::SBInputReader *arg1 = (lldb::SBInputReader *) 0 ;
  lldb::InputReaderGranularity result;
  
  arg1 = (lldb::SBInputReader *)jarg1; 
  result = (lldb::InputReaderGranularity)(arg1)->GetGranularity();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SBInstruction__SWIG_0() {
  void * jresult ;
  lldb::SBInstruction *result = 0 ;
  
  result = (lldb::SBInstruction *)new lldb::SBInstruction();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SBInstruction__SWIG_1(void * jarg1) {
  void * jresult ;
  lldb::SBInstruction *arg1 = 0 ;
  lldb::SBInstruction *result = 0 ;
  
  arg1 = (lldb::SBInstruction *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBInstruction const & type is null", 0);
    return 0;
  } 
  result = (lldb::SBInstruction *)new lldb::SBInstruction((lldb::SBInstruction const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SBInstruction(void * jarg1) {
  lldb::SBInstruction *arg1 = (lldb::SBInstruction *) 0 ;
  
  arg1 = (lldb::SBInstruction *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBInstruction_IsValid(void * jarg1) {
  unsigned int jresult ;
  lldb::SBInstruction *arg1 = (lldb::SBInstruction *) 0 ;
  bool result;
  
  arg1 = (lldb::SBInstruction *)jarg1; 
  result = (bool)(arg1)->IsValid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBInstruction_GetAddress(void * jarg1) {
  void * jresult ;
  lldb::SBInstruction *arg1 = (lldb::SBInstruction *) 0 ;
  lldb::SBAddress result;
  
  arg1 = (lldb::SBInstruction *)jarg1; 
  result = (arg1)->GetAddress();
  jresult = new lldb::SBAddress((const lldb::SBAddress &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SBInstruction_GetAddressClass(void * jarg1) {
  int jresult ;
  lldb::SBInstruction *arg1 = (lldb::SBInstruction *) 0 ;
  lldb::AddressClass result;
  
  arg1 = (lldb::SBInstruction *)jarg1; 
  result = (lldb::AddressClass)(arg1)->GetAddressClass();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SBInstruction_GetMnemonic(void * jarg1, void * jarg2) {
  char * jresult ;
  lldb::SBInstruction *arg1 = (lldb::SBInstruction *) 0 ;
  lldb::SBTarget arg2 ;
  lldb::SBTarget *argp2 ;
  char *result = 0 ;
  
  arg1 = (lldb::SBInstruction *)jarg1; 
  argp2 = (lldb::SBTarget *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null lldb::SBTarget", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (char *)(arg1)->GetMnemonic(arg2);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SBInstruction_GetOperands(void * jarg1, void * jarg2) {
  char * jresult ;
  lldb::SBInstruction *arg1 = (lldb::SBInstruction *) 0 ;
  lldb::SBTarget arg2 ;
  lldb::SBTarget *argp2 ;
  char *result = 0 ;
  
  arg1 = (lldb::SBInstruction *)jarg1; 
  argp2 = (lldb::SBTarget *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null lldb::SBTarget", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (char *)(arg1)->GetOperands(arg2);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SBInstruction_GetComment(void * jarg1, void * jarg2) {
  char * jresult ;
  lldb::SBInstruction *arg1 = (lldb::SBInstruction *) 0 ;
  lldb::SBTarget arg2 ;
  lldb::SBTarget *argp2 ;
  char *result = 0 ;
  
  arg1 = (lldb::SBInstruction *)jarg1; 
  argp2 = (lldb::SBTarget *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null lldb::SBTarget", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (char *)(arg1)->GetComment(arg2);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBInstruction_GetData(void * jarg1, void * jarg2) {
  void * jresult ;
  lldb::SBInstruction *arg1 = (lldb::SBInstruction *) 0 ;
  lldb::SBTarget arg2 ;
  lldb::SBTarget *argp2 ;
  lldb::SBData result;
  
  arg1 = (lldb::SBInstruction *)jarg1; 
  argp2 = (lldb::SBTarget *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null lldb::SBTarget", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->GetData(arg2);
  jresult = new lldb::SBData((const lldb::SBData &)result); 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_SBInstruction_GetByteSize(void * jarg1) {
  unsigned long jresult ;
  lldb::SBInstruction *arg1 = (lldb::SBInstruction *) 0 ;
  size_t result;
  
  arg1 = (lldb::SBInstruction *)jarg1; 
  result = (arg1)->GetByteSize();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBInstruction_DoesBranch(void * jarg1) {
  unsigned int jresult ;
  lldb::SBInstruction *arg1 = (lldb::SBInstruction *) 0 ;
  bool result;
  
  arg1 = (lldb::SBInstruction *)jarg1; 
  result = (bool)(arg1)->DoesBranch();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBInstruction_Print(void * jarg1, void * jarg2) {
  lldb::SBInstruction *arg1 = (lldb::SBInstruction *) 0 ;
  FILE *arg2 = (FILE *) 0 ;
  
  arg1 = (lldb::SBInstruction *)jarg1; 
  arg2 = (FILE *)jarg2; 
  (arg1)->Print(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBInstruction_GetDescription(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  lldb::SBInstruction *arg1 = (lldb::SBInstruction *) 0 ;
  lldb::SBStream *arg2 = 0 ;
  bool result;
  
  arg1 = (lldb::SBInstruction *)jarg1; 
  arg2 = (lldb::SBStream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBStream & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->GetDescription(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBInstruction_EmulateWithFrame(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  lldb::SBInstruction *arg1 = (lldb::SBInstruction *) 0 ;
  lldb::SBFrame *arg2 = 0 ;
  uint32_t arg3 ;
  uint32_t *argp3 ;
  bool result;
  
  arg1 = (lldb::SBInstruction *)jarg1; 
  arg2 = (lldb::SBFrame *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBFrame & type is null", 0);
    return 0;
  } 
  argp3 = (uint32_t *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return 0;
  }
  arg3 = *argp3; 
  result = (bool)(arg1)->EmulateWithFrame(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBInstruction_DumpEmulation(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  lldb::SBInstruction *arg1 = (lldb::SBInstruction *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (lldb::SBInstruction *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->DumpEmulation((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBInstruction_TestEmulation(void * jarg1, void * jarg2, char * jarg3) {
  unsigned int jresult ;
  lldb::SBInstruction *arg1 = (lldb::SBInstruction *) 0 ;
  lldb::SBStream *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  arg1 = (lldb::SBInstruction *)jarg1; 
  arg2 = (lldb::SBStream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBStream & type is null", 0);
    return 0;
  } 
  arg3 = (char *)jarg3; 
  result = (bool)(arg1)->TestEmulation(*arg2,(char const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SBInstructionList__SWIG_0() {
  void * jresult ;
  lldb::SBInstructionList *result = 0 ;
  
  result = (lldb::SBInstructionList *)new lldb::SBInstructionList();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SBInstructionList__SWIG_1(void * jarg1) {
  void * jresult ;
  lldb::SBInstructionList *arg1 = 0 ;
  lldb::SBInstructionList *result = 0 ;
  
  arg1 = (lldb::SBInstructionList *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBInstructionList const & type is null", 0);
    return 0;
  } 
  result = (lldb::SBInstructionList *)new lldb::SBInstructionList((lldb::SBInstructionList const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SBInstructionList(void * jarg1) {
  lldb::SBInstructionList *arg1 = (lldb::SBInstructionList *) 0 ;
  
  arg1 = (lldb::SBInstructionList *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBInstructionList_IsValid(void * jarg1) {
  unsigned int jresult ;
  lldb::SBInstructionList *arg1 = (lldb::SBInstructionList *) 0 ;
  bool result;
  
  arg1 = (lldb::SBInstructionList *)jarg1; 
  result = (bool)((lldb::SBInstructionList const *)arg1)->IsValid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_SBInstructionList_GetSize(void * jarg1) {
  unsigned long jresult ;
  lldb::SBInstructionList *arg1 = (lldb::SBInstructionList *) 0 ;
  size_t result;
  
  arg1 = (lldb::SBInstructionList *)jarg1; 
  result = (arg1)->GetSize();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBInstructionList_GetInstructionAtIndex(void * jarg1, void * jarg2) {
  void * jresult ;
  lldb::SBInstructionList *arg1 = (lldb::SBInstructionList *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  lldb::SBInstruction result;
  
  arg1 = (lldb::SBInstructionList *)jarg1; 
  argp2 = (uint32_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->GetInstructionAtIndex(arg2);
  jresult = new lldb::SBInstruction((const lldb::SBInstruction &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBInstructionList_Clear(void * jarg1) {
  lldb::SBInstructionList *arg1 = (lldb::SBInstructionList *) 0 ;
  
  arg1 = (lldb::SBInstructionList *)jarg1; 
  (arg1)->Clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBInstructionList_AppendInstruction(void * jarg1, void * jarg2) {
  lldb::SBInstructionList *arg1 = (lldb::SBInstructionList *) 0 ;
  lldb::SBInstruction arg2 ;
  lldb::SBInstruction *argp2 ;
  
  arg1 = (lldb::SBInstructionList *)jarg1; 
  argp2 = (lldb::SBInstruction *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null lldb::SBInstruction", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->AppendInstruction(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBInstructionList_Print(void * jarg1, void * jarg2) {
  lldb::SBInstructionList *arg1 = (lldb::SBInstructionList *) 0 ;
  FILE *arg2 = (FILE *) 0 ;
  
  arg1 = (lldb::SBInstructionList *)jarg1; 
  arg2 = (FILE *)jarg2; 
  (arg1)->Print(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBInstructionList_GetDescription(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  lldb::SBInstructionList *arg1 = (lldb::SBInstructionList *) 0 ;
  lldb::SBStream *arg2 = 0 ;
  bool result;
  
  arg1 = (lldb::SBInstructionList *)jarg1; 
  arg2 = (lldb::SBStream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBStream & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->GetDescription(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBInstructionList_DumpEmulationForAllInstructions(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  lldb::SBInstructionList *arg1 = (lldb::SBInstructionList *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (lldb::SBInstructionList *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->DumpEmulationForAllInstructions((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SBLineEntry__SWIG_0() {
  void * jresult ;
  lldb::SBLineEntry *result = 0 ;
  
  result = (lldb::SBLineEntry *)new lldb::SBLineEntry();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SBLineEntry__SWIG_1(void * jarg1) {
  void * jresult ;
  lldb::SBLineEntry *arg1 = 0 ;
  lldb::SBLineEntry *result = 0 ;
  
  arg1 = (lldb::SBLineEntry *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBLineEntry const & type is null", 0);
    return 0;
  } 
  result = (lldb::SBLineEntry *)new lldb::SBLineEntry((lldb::SBLineEntry const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SBLineEntry(void * jarg1) {
  lldb::SBLineEntry *arg1 = (lldb::SBLineEntry *) 0 ;
  
  arg1 = (lldb::SBLineEntry *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBLineEntry_GetStartAddress(void * jarg1) {
  void * jresult ;
  lldb::SBLineEntry *arg1 = (lldb::SBLineEntry *) 0 ;
  lldb::SBAddress result;
  
  arg1 = (lldb::SBLineEntry *)jarg1; 
  result = ((lldb::SBLineEntry const *)arg1)->GetStartAddress();
  jresult = new lldb::SBAddress((const lldb::SBAddress &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBLineEntry_GetEndAddress(void * jarg1) {
  void * jresult ;
  lldb::SBLineEntry *arg1 = (lldb::SBLineEntry *) 0 ;
  lldb::SBAddress result;
  
  arg1 = (lldb::SBLineEntry *)jarg1; 
  result = ((lldb::SBLineEntry const *)arg1)->GetEndAddress();
  jresult = new lldb::SBAddress((const lldb::SBAddress &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBLineEntry_IsValid(void * jarg1) {
  unsigned int jresult ;
  lldb::SBLineEntry *arg1 = (lldb::SBLineEntry *) 0 ;
  bool result;
  
  arg1 = (lldb::SBLineEntry *)jarg1; 
  result = (bool)((lldb::SBLineEntry const *)arg1)->IsValid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBLineEntry_GetFileSpec(void * jarg1) {
  void * jresult ;
  lldb::SBLineEntry *arg1 = (lldb::SBLineEntry *) 0 ;
  lldb::SBFileSpec result;
  
  arg1 = (lldb::SBLineEntry *)jarg1; 
  result = ((lldb::SBLineEntry const *)arg1)->GetFileSpec();
  jresult = new lldb::SBFileSpec((const lldb::SBFileSpec &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBLineEntry_GetLine(void * jarg1) {
  void * jresult ;
  lldb::SBLineEntry *arg1 = (lldb::SBLineEntry *) 0 ;
  uint32_t result;
  
  arg1 = (lldb::SBLineEntry *)jarg1; 
  result = ((lldb::SBLineEntry const *)arg1)->GetLine();
  jresult = new uint32_t((const uint32_t &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBLineEntry_GetColumn(void * jarg1) {
  void * jresult ;
  lldb::SBLineEntry *arg1 = (lldb::SBLineEntry *) 0 ;
  uint32_t result;
  
  arg1 = (lldb::SBLineEntry *)jarg1; 
  result = ((lldb::SBLineEntry const *)arg1)->GetColumn();
  jresult = new uint32_t((const uint32_t &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBLineEntry_GetDescription(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  lldb::SBLineEntry *arg1 = (lldb::SBLineEntry *) 0 ;
  lldb::SBStream *arg2 = 0 ;
  bool result;
  
  arg1 = (lldb::SBLineEntry *)jarg1; 
  arg2 = (lldb::SBStream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBStream & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->GetDescription(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBLineEntry_SetFileSpec(void * jarg1, void * jarg2) {
  lldb::SBLineEntry *arg1 = (lldb::SBLineEntry *) 0 ;
  lldb::SBFileSpec arg2 ;
  lldb::SBFileSpec *argp2 ;
  
  arg1 = (lldb::SBLineEntry *)jarg1; 
  argp2 = (lldb::SBFileSpec *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null lldb::SBFileSpec", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->SetFileSpec(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBLineEntry_SetLine(void * jarg1, void * jarg2) {
  lldb::SBLineEntry *arg1 = (lldb::SBLineEntry *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  arg1 = (lldb::SBLineEntry *)jarg1; 
  argp2 = (uint32_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->SetLine(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBLineEntry_SetColumn(void * jarg1, void * jarg2) {
  lldb::SBLineEntry *arg1 = (lldb::SBLineEntry *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  arg1 = (lldb::SBLineEntry *)jarg1; 
  argp2 = (uint32_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->SetColumn(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SBListener__SWIG_0() {
  void * jresult ;
  lldb::SBListener *result = 0 ;
  
  result = (lldb::SBListener *)new lldb::SBListener();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SBListener__SWIG_1(char * jarg1) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  lldb::SBListener *result = 0 ;
  
  arg1 = (char *)jarg1; 
  result = (lldb::SBListener *)new lldb::SBListener((char const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SBListener__SWIG_2(void * jarg1) {
  void * jresult ;
  lldb::SBListener *arg1 = 0 ;
  lldb::SBListener *result = 0 ;
  
  arg1 = (lldb::SBListener *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBListener const & type is null", 0);
    return 0;
  } 
  result = (lldb::SBListener *)new lldb::SBListener((lldb::SBListener const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SBListener(void * jarg1) {
  lldb::SBListener *arg1 = (lldb::SBListener *) 0 ;
  
  arg1 = (lldb::SBListener *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBListener_AddEvent(void * jarg1, void * jarg2) {
  lldb::SBListener *arg1 = (lldb::SBListener *) 0 ;
  lldb::SBEvent *arg2 = 0 ;
  
  arg1 = (lldb::SBListener *)jarg1; 
  arg2 = (lldb::SBEvent *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBEvent const & type is null", 0);
    return ;
  } 
  (arg1)->AddEvent((lldb::SBEvent const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBListener_Clear(void * jarg1) {
  lldb::SBListener *arg1 = (lldb::SBListener *) 0 ;
  
  arg1 = (lldb::SBListener *)jarg1; 
  (arg1)->Clear();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBListener_IsValid(void * jarg1) {
  unsigned int jresult ;
  lldb::SBListener *arg1 = (lldb::SBListener *) 0 ;
  bool result;
  
  arg1 = (lldb::SBListener *)jarg1; 
  result = (bool)((lldb::SBListener const *)arg1)->IsValid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBListener_StartListeningForEventClass(void * jarg1, void * jarg2, char * jarg3, void * jarg4) {
  void * jresult ;
  lldb::SBListener *arg1 = (lldb::SBListener *) 0 ;
  lldb::SBDebugger *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  uint32_t arg4 ;
  uint32_t *argp4 ;
  uint32_t result;
  
  arg1 = (lldb::SBListener *)jarg1; 
  arg2 = (lldb::SBDebugger *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBDebugger & type is null", 0);
    return 0;
  } 
  arg3 = (char *)jarg3; 
  argp4 = (uint32_t *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return 0;
  }
  arg4 = *argp4; 
  result = (arg1)->StartListeningForEventClass(*arg2,(char const *)arg3,arg4);
  jresult = new uint32_t((const uint32_t &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBListener_StopListeningForEventClass(void * jarg1, void * jarg2, char * jarg3, void * jarg4) {
  void * jresult ;
  lldb::SBListener *arg1 = (lldb::SBListener *) 0 ;
  lldb::SBDebugger *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  uint32_t arg4 ;
  uint32_t *argp4 ;
  uint32_t result;
  
  arg1 = (lldb::SBListener *)jarg1; 
  arg2 = (lldb::SBDebugger *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBDebugger & type is null", 0);
    return 0;
  } 
  arg3 = (char *)jarg3; 
  argp4 = (uint32_t *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return 0;
  }
  arg4 = *argp4; 
  result = (arg1)->StopListeningForEventClass(*arg2,(char const *)arg3,arg4);
  jresult = new uint32_t((const uint32_t &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBListener_StartListeningForEvents(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  lldb::SBListener *arg1 = (lldb::SBListener *) 0 ;
  lldb::SBBroadcaster *arg2 = 0 ;
  uint32_t arg3 ;
  uint32_t *argp3 ;
  uint32_t result;
  
  arg1 = (lldb::SBListener *)jarg1; 
  arg2 = (lldb::SBBroadcaster *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBBroadcaster const & type is null", 0);
    return 0;
  } 
  argp3 = (uint32_t *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return 0;
  }
  arg3 = *argp3; 
  result = (arg1)->StartListeningForEvents((lldb::SBBroadcaster const &)*arg2,arg3);
  jresult = new uint32_t((const uint32_t &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBListener_StopListeningForEvents(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  lldb::SBListener *arg1 = (lldb::SBListener *) 0 ;
  lldb::SBBroadcaster *arg2 = 0 ;
  uint32_t arg3 ;
  uint32_t *argp3 ;
  bool result;
  
  arg1 = (lldb::SBListener *)jarg1; 
  arg2 = (lldb::SBBroadcaster *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBBroadcaster const & type is null", 0);
    return 0;
  } 
  argp3 = (uint32_t *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return 0;
  }
  arg3 = *argp3; 
  result = (bool)(arg1)->StopListeningForEvents((lldb::SBBroadcaster const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBListener_WaitForEvent(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  lldb::SBListener *arg1 = (lldb::SBListener *) 0 ;
  uint32_t arg2 ;
  lldb::SBEvent *arg3 = 0 ;
  uint32_t *argp2 ;
  bool result;
  
  arg1 = (lldb::SBListener *)jarg1; 
  argp2 = (uint32_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (lldb::SBEvent *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBEvent & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->WaitForEvent(arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBListener_WaitForEventForBroadcaster(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  lldb::SBListener *arg1 = (lldb::SBListener *) 0 ;
  uint32_t arg2 ;
  lldb::SBBroadcaster *arg3 = 0 ;
  lldb::SBEvent *arg4 = 0 ;
  uint32_t *argp2 ;
  bool result;
  
  arg1 = (lldb::SBListener *)jarg1; 
  argp2 = (uint32_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (lldb::SBBroadcaster *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBBroadcaster const & type is null", 0);
    return 0;
  } 
  arg4 = (lldb::SBEvent *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBEvent & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->WaitForEventForBroadcaster(arg2,(lldb::SBBroadcaster const &)*arg3,*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBListener_WaitForEventForBroadcasterWithType(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  unsigned int jresult ;
  lldb::SBListener *arg1 = (lldb::SBListener *) 0 ;
  uint32_t arg2 ;
  lldb::SBBroadcaster *arg3 = 0 ;
  uint32_t arg4 ;
  lldb::SBEvent *arg5 = 0 ;
  uint32_t *argp2 ;
  uint32_t *argp4 ;
  bool result;
  
  arg1 = (lldb::SBListener *)jarg1; 
  argp2 = (uint32_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (lldb::SBBroadcaster *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBBroadcaster const & type is null", 0);
    return 0;
  } 
  argp4 = (uint32_t *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return 0;
  }
  arg4 = *argp4; 
  arg5 = (lldb::SBEvent *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBEvent & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->WaitForEventForBroadcasterWithType(arg2,(lldb::SBBroadcaster const &)*arg3,arg4,*arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBListener_PeekAtNextEvent(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  lldb::SBListener *arg1 = (lldb::SBListener *) 0 ;
  lldb::SBEvent *arg2 = 0 ;
  bool result;
  
  arg1 = (lldb::SBListener *)jarg1; 
  arg2 = (lldb::SBEvent *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBEvent & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->PeekAtNextEvent(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBListener_PeekAtNextEventForBroadcaster(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  lldb::SBListener *arg1 = (lldb::SBListener *) 0 ;
  lldb::SBBroadcaster *arg2 = 0 ;
  lldb::SBEvent *arg3 = 0 ;
  bool result;
  
  arg1 = (lldb::SBListener *)jarg1; 
  arg2 = (lldb::SBBroadcaster *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBBroadcaster const & type is null", 0);
    return 0;
  } 
  arg3 = (lldb::SBEvent *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBEvent & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->PeekAtNextEventForBroadcaster((lldb::SBBroadcaster const &)*arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBListener_PeekAtNextEventForBroadcasterWithType(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  lldb::SBListener *arg1 = (lldb::SBListener *) 0 ;
  lldb::SBBroadcaster *arg2 = 0 ;
  uint32_t arg3 ;
  lldb::SBEvent *arg4 = 0 ;
  uint32_t *argp3 ;
  bool result;
  
  arg1 = (lldb::SBListener *)jarg1; 
  arg2 = (lldb::SBBroadcaster *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBBroadcaster const & type is null", 0);
    return 0;
  } 
  argp3 = (uint32_t *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return 0;
  }
  arg3 = *argp3; 
  arg4 = (lldb::SBEvent *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBEvent & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->PeekAtNextEventForBroadcasterWithType((lldb::SBBroadcaster const &)*arg2,arg3,*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBListener_GetNextEvent(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  lldb::SBListener *arg1 = (lldb::SBListener *) 0 ;
  lldb::SBEvent *arg2 = 0 ;
  bool result;
  
  arg1 = (lldb::SBListener *)jarg1; 
  arg2 = (lldb::SBEvent *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBEvent & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->GetNextEvent(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBListener_GetNextEventForBroadcaster(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  lldb::SBListener *arg1 = (lldb::SBListener *) 0 ;
  lldb::SBBroadcaster *arg2 = 0 ;
  lldb::SBEvent *arg3 = 0 ;
  bool result;
  
  arg1 = (lldb::SBListener *)jarg1; 
  arg2 = (lldb::SBBroadcaster *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBBroadcaster const & type is null", 0);
    return 0;
  } 
  arg3 = (lldb::SBEvent *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBEvent & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->GetNextEventForBroadcaster((lldb::SBBroadcaster const &)*arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBListener_GetNextEventForBroadcasterWithType(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  lldb::SBListener *arg1 = (lldb::SBListener *) 0 ;
  lldb::SBBroadcaster *arg2 = 0 ;
  uint32_t arg3 ;
  lldb::SBEvent *arg4 = 0 ;
  uint32_t *argp3 ;
  bool result;
  
  arg1 = (lldb::SBListener *)jarg1; 
  arg2 = (lldb::SBBroadcaster *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBBroadcaster const & type is null", 0);
    return 0;
  } 
  argp3 = (uint32_t *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return 0;
  }
  arg3 = *argp3; 
  arg4 = (lldb::SBEvent *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBEvent & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->GetNextEventForBroadcasterWithType((lldb::SBBroadcaster const &)*arg2,arg3,*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBListener_HandleBroadcastEvent(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  lldb::SBListener *arg1 = (lldb::SBListener *) 0 ;
  lldb::SBEvent *arg2 = 0 ;
  bool result;
  
  arg1 = (lldb::SBListener *)jarg1; 
  arg2 = (lldb::SBEvent *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBEvent const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->HandleBroadcastEvent((lldb::SBEvent const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SBModule__SWIG_0() {
  void * jresult ;
  lldb::SBModule *result = 0 ;
  
  result = (lldb::SBModule *)new lldb::SBModule();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SBModule__SWIG_1(void * jarg1) {
  void * jresult ;
  lldb::SBModule *arg1 = 0 ;
  lldb::SBModule *result = 0 ;
  
  arg1 = (lldb::SBModule *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBModule const & type is null", 0);
    return 0;
  } 
  result = (lldb::SBModule *)new lldb::SBModule((lldb::SBModule const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SBModule__SWIG_2(void * jarg1, void * jarg2) {
  void * jresult ;
  lldb::SBProcess *arg1 = 0 ;
  lldb::addr_t arg2 ;
  lldb::addr_t *argp2 ;
  lldb::SBModule *result = 0 ;
  
  arg1 = (lldb::SBProcess *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBProcess & type is null", 0);
    return 0;
  } 
  argp2 = (lldb::addr_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null lldb::addr_t", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (lldb::SBModule *)new lldb::SBModule(*arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SBModule(void * jarg1) {
  lldb::SBModule *arg1 = (lldb::SBModule *) 0 ;
  
  arg1 = (lldb::SBModule *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBModule_IsValid(void * jarg1) {
  unsigned int jresult ;
  lldb::SBModule *arg1 = (lldb::SBModule *) 0 ;
  bool result;
  
  arg1 = (lldb::SBModule *)jarg1; 
  result = (bool)((lldb::SBModule const *)arg1)->IsValid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBModule_Clear(void * jarg1) {
  lldb::SBModule *arg1 = (lldb::SBModule *) 0 ;
  
  arg1 = (lldb::SBModule *)jarg1; 
  (arg1)->Clear();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBModule_GetFileSpec(void * jarg1) {
  void * jresult ;
  lldb::SBModule *arg1 = (lldb::SBModule *) 0 ;
  lldb::SBFileSpec result;
  
  arg1 = (lldb::SBModule *)jarg1; 
  result = ((lldb::SBModule const *)arg1)->GetFileSpec();
  jresult = new lldb::SBFileSpec((const lldb::SBFileSpec &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBModule_GetPlatformFileSpec(void * jarg1) {
  void * jresult ;
  lldb::SBModule *arg1 = (lldb::SBModule *) 0 ;
  lldb::SBFileSpec result;
  
  arg1 = (lldb::SBModule *)jarg1; 
  result = ((lldb::SBModule const *)arg1)->GetPlatformFileSpec();
  jresult = new lldb::SBFileSpec((const lldb::SBFileSpec &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBModule_SetPlatformFileSpec(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  lldb::SBModule *arg1 = (lldb::SBModule *) 0 ;
  lldb::SBFileSpec *arg2 = 0 ;
  bool result;
  
  arg1 = (lldb::SBModule *)jarg1; 
  arg2 = (lldb::SBFileSpec *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBFileSpec const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->SetPlatformFileSpec((lldb::SBFileSpec const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SBModule_GetUUIDString(void * jarg1) {
  char * jresult ;
  lldb::SBModule *arg1 = (lldb::SBModule *) 0 ;
  char *result = 0 ;
  
  arg1 = (lldb::SBModule *)jarg1; 
  result = (char *)((lldb::SBModule const *)arg1)->GetUUIDString();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBModule_FindSection(void * jarg1, char * jarg2) {
  void * jresult ;
  lldb::SBModule *arg1 = (lldb::SBModule *) 0 ;
  char *arg2 = (char *) 0 ;
  lldb::SBSection result;
  
  arg1 = (lldb::SBModule *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (arg1)->FindSection((char const *)arg2);
  jresult = new lldb::SBSection((const lldb::SBSection &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBModule_ResolveFileAddress(void * jarg1, void * jarg2) {
  void * jresult ;
  lldb::SBModule *arg1 = (lldb::SBModule *) 0 ;
  lldb::addr_t arg2 ;
  lldb::addr_t *argp2 ;
  lldb::SBAddress result;
  
  arg1 = (lldb::SBModule *)jarg1; 
  argp2 = (lldb::addr_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null lldb::addr_t", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->ResolveFileAddress(arg2);
  jresult = new lldb::SBAddress((const lldb::SBAddress &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBModule_ResolveSymbolContextForAddress(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  lldb::SBModule *arg1 = (lldb::SBModule *) 0 ;
  lldb::SBAddress *arg2 = 0 ;
  uint32_t arg3 ;
  uint32_t *argp3 ;
  lldb::SBSymbolContext result;
  
  arg1 = (lldb::SBModule *)jarg1; 
  arg2 = (lldb::SBAddress *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBAddress const & type is null", 0);
    return 0;
  } 
  argp3 = (uint32_t *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return 0;
  }
  arg3 = *argp3; 
  result = (arg1)->ResolveSymbolContextForAddress((lldb::SBAddress const &)*arg2,arg3);
  jresult = new lldb::SBSymbolContext((const lldb::SBSymbolContext &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBModule_GetDescription(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  lldb::SBModule *arg1 = (lldb::SBModule *) 0 ;
  lldb::SBStream *arg2 = 0 ;
  bool result;
  
  arg1 = (lldb::SBModule *)jarg1; 
  arg2 = (lldb::SBStream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBStream & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->GetDescription(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBModule_GetNumCompileUnits(void * jarg1) {
  void * jresult ;
  lldb::SBModule *arg1 = (lldb::SBModule *) 0 ;
  uint32_t result;
  
  arg1 = (lldb::SBModule *)jarg1; 
  result = (arg1)->GetNumCompileUnits();
  jresult = new uint32_t((const uint32_t &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBModule_GetCompileUnitAtIndex(void * jarg1, void * jarg2) {
  void * jresult ;
  lldb::SBModule *arg1 = (lldb::SBModule *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  lldb::SBCompileUnit result;
  
  arg1 = (lldb::SBModule *)jarg1; 
  argp2 = (uint32_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->GetCompileUnitAtIndex(arg2);
  jresult = new lldb::SBCompileUnit((const lldb::SBCompileUnit &)result); 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_SBModule_GetNumSymbols(void * jarg1) {
  unsigned long jresult ;
  lldb::SBModule *arg1 = (lldb::SBModule *) 0 ;
  size_t result;
  
  arg1 = (lldb::SBModule *)jarg1; 
  result = (arg1)->GetNumSymbols();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBModule_GetSymbolAtIndex(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  lldb::SBModule *arg1 = (lldb::SBModule *) 0 ;
  size_t arg2 ;
  lldb::SBSymbol result;
  
  arg1 = (lldb::SBModule *)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (arg1)->GetSymbolAtIndex(arg2);
  jresult = new lldb::SBSymbol((const lldb::SBSymbol &)result); 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_SBModule_GetNumSections(void * jarg1) {
  unsigned long jresult ;
  lldb::SBModule *arg1 = (lldb::SBModule *) 0 ;
  size_t result;
  
  arg1 = (lldb::SBModule *)jarg1; 
  result = (arg1)->GetNumSections();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBModule_GetSectionAtIndex(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  lldb::SBModule *arg1 = (lldb::SBModule *) 0 ;
  size_t arg2 ;
  lldb::SBSection result;
  
  arg1 = (lldb::SBModule *)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (arg1)->GetSectionAtIndex(arg2);
  jresult = new lldb::SBSection((const lldb::SBSection &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBModule_FindFunctions__SWIG_0(void * jarg1, char * jarg2, void * jarg3) {
  void * jresult ;
  lldb::SBModule *arg1 = (lldb::SBModule *) 0 ;
  char *arg2 = (char *) 0 ;
  uint32_t arg3 ;
  uint32_t *argp3 ;
  lldb::SBSymbolContextList result;
  
  arg1 = (lldb::SBModule *)jarg1; 
  arg2 = (char *)jarg2; 
  argp3 = (uint32_t *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return 0;
  }
  arg3 = *argp3; 
  result = (arg1)->FindFunctions((char const *)arg2,arg3);
  jresult = new lldb::SBSymbolContextList((const lldb::SBSymbolContextList &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBModule_FindFunctions__SWIG_1(void * jarg1, char * jarg2) {
  void * jresult ;
  lldb::SBModule *arg1 = (lldb::SBModule *) 0 ;
  char *arg2 = (char *) 0 ;
  lldb::SBSymbolContextList result;
  
  arg1 = (lldb::SBModule *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (arg1)->FindFunctions((char const *)arg2);
  jresult = new lldb::SBSymbolContextList((const lldb::SBSymbolContextList &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBModule_FindFirstType(void * jarg1, char * jarg2) {
  void * jresult ;
  lldb::SBModule *arg1 = (lldb::SBModule *) 0 ;
  char *arg2 = (char *) 0 ;
  lldb::SBType result;
  
  arg1 = (lldb::SBModule *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (arg1)->FindFirstType((char const *)arg2);
  jresult = new lldb::SBType((const lldb::SBType &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBModule_FindTypes(void * jarg1, char * jarg2) {
  void * jresult ;
  lldb::SBModule *arg1 = (lldb::SBModule *) 0 ;
  char *arg2 = (char *) 0 ;
  lldb::SBTypeList result;
  
  arg1 = (lldb::SBModule *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (arg1)->FindTypes((char const *)arg2);
  jresult = new lldb::SBTypeList((const lldb::SBTypeList &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBModule_FindGlobalVariables(void * jarg1, void * jarg2, char * jarg3, void * jarg4) {
  void * jresult ;
  lldb::SBModule *arg1 = (lldb::SBModule *) 0 ;
  lldb::SBTarget *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  uint32_t arg4 ;
  uint32_t *argp4 ;
  lldb::SBValueList result;
  
  arg1 = (lldb::SBModule *)jarg1; 
  arg2 = (lldb::SBTarget *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBTarget & type is null", 0);
    return 0;
  } 
  arg3 = (char *)jarg3; 
  argp4 = (uint32_t *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return 0;
  }
  arg4 = *argp4; 
  result = (arg1)->FindGlobalVariables(*arg2,(char const *)arg3,arg4);
  jresult = new lldb::SBValueList((const lldb::SBValueList &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SBModule_GetByteOrder(void * jarg1) {
  int jresult ;
  lldb::SBModule *arg1 = (lldb::SBModule *) 0 ;
  lldb::ByteOrder result;
  
  arg1 = (lldb::SBModule *)jarg1; 
  result = (lldb::ByteOrder)(arg1)->GetByteOrder();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBModule_GetAddressByteSize(void * jarg1) {
  void * jresult ;
  lldb::SBModule *arg1 = (lldb::SBModule *) 0 ;
  uint32_t result;
  
  arg1 = (lldb::SBModule *)jarg1; 
  result = (arg1)->GetAddressByteSize();
  jresult = new uint32_t((const uint32_t &)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SBModule_GetTriple(void * jarg1) {
  char * jresult ;
  lldb::SBModule *arg1 = (lldb::SBModule *) 0 ;
  char *result = 0 ;
  
  arg1 = (lldb::SBModule *)jarg1; 
  result = (char *)(arg1)->GetTriple();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBModule_GetVersion(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  lldb::SBModule *arg1 = (lldb::SBModule *) 0 ;
  uint32_t *arg2 = (uint32_t *) 0 ;
  uint32_t arg3 ;
  uint32_t *argp3 ;
  uint32_t result;
  
  arg1 = (lldb::SBModule *)jarg1; 
  arg2 = (uint32_t *)jarg2; 
  argp3 = (uint32_t *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return 0;
  }
  arg3 = *argp3; 
  result = (arg1)->GetVersion(arg2,arg3);
  jresult = new uint32_t((const uint32_t &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SBProcess_eBroadcastBitStateChanged_get() {
  int jresult ;
  int result;
  
  result = (int)lldb::SBProcess::eBroadcastBitStateChanged;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SBProcess_eBroadcastBitInterrupt_get() {
  int jresult ;
  int result;
  
  result = (int)lldb::SBProcess::eBroadcastBitInterrupt;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SBProcess_eBroadcastBitSTDOUT_get() {
  int jresult ;
  int result;
  
  result = (int)lldb::SBProcess::eBroadcastBitSTDOUT;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SBProcess_eBroadcastBitSTDERR_get() {
  int jresult ;
  int result;
  
  result = (int)lldb::SBProcess::eBroadcastBitSTDERR;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SBProcess__SWIG_0() {
  void * jresult ;
  lldb::SBProcess *result = 0 ;
  
  result = (lldb::SBProcess *)new lldb::SBProcess();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SBProcess__SWIG_1(void * jarg1) {
  void * jresult ;
  lldb::SBProcess *arg1 = 0 ;
  lldb::SBProcess *result = 0 ;
  
  arg1 = (lldb::SBProcess *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBProcess const & type is null", 0);
    return 0;
  } 
  result = (lldb::SBProcess *)new lldb::SBProcess((lldb::SBProcess const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SBProcess(void * jarg1) {
  lldb::SBProcess *arg1 = (lldb::SBProcess *) 0 ;
  
  arg1 = (lldb::SBProcess *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SBProcess_GetBroadcasterClassName() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)lldb::SBProcess::GetBroadcasterClassName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBProcess_Clear(void * jarg1) {
  lldb::SBProcess *arg1 = (lldb::SBProcess *) 0 ;
  
  arg1 = (lldb::SBProcess *)jarg1; 
  (arg1)->Clear();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBProcess_IsValid(void * jarg1) {
  unsigned int jresult ;
  lldb::SBProcess *arg1 = (lldb::SBProcess *) 0 ;
  bool result;
  
  arg1 = (lldb::SBProcess *)jarg1; 
  result = (bool)((lldb::SBProcess const *)arg1)->IsValid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBProcess_GetTarget(void * jarg1) {
  void * jresult ;
  lldb::SBProcess *arg1 = (lldb::SBProcess *) 0 ;
  lldb::SBTarget result;
  
  arg1 = (lldb::SBProcess *)jarg1; 
  result = ((lldb::SBProcess const *)arg1)->GetTarget();
  jresult = new lldb::SBTarget((const lldb::SBTarget &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SBProcess_GetByteOrder(void * jarg1) {
  int jresult ;
  lldb::SBProcess *arg1 = (lldb::SBProcess *) 0 ;
  lldb::ByteOrder result;
  
  arg1 = (lldb::SBProcess *)jarg1; 
  result = (lldb::ByteOrder)((lldb::SBProcess const *)arg1)->GetByteOrder();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_SBProcess_PutSTDIN(void * jarg1, char * jarg2, unsigned long jarg3) {
  unsigned long jresult ;
  lldb::SBProcess *arg1 = (lldb::SBProcess *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  size_t result;
  
  arg1 = (lldb::SBProcess *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (size_t)jarg3; 
  result = (arg1)->PutSTDIN((char const *)arg2,arg3);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_SBProcess_GetSTDOUT(void * jarg1, char * jarg2, unsigned long jarg3) {
  unsigned long jresult ;
  lldb::SBProcess *arg1 = (lldb::SBProcess *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  size_t result;
  
  arg1 = (lldb::SBProcess *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (size_t)jarg3; 
  result = ((lldb::SBProcess const *)arg1)->GetSTDOUT(arg2,arg3);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_SBProcess_GetSTDERR(void * jarg1, char * jarg2, unsigned long jarg3) {
  unsigned long jresult ;
  lldb::SBProcess *arg1 = (lldb::SBProcess *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  size_t result;
  
  arg1 = (lldb::SBProcess *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (size_t)jarg3; 
  result = ((lldb::SBProcess const *)arg1)->GetSTDERR(arg2,arg3);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBProcess_ReportEventState(void * jarg1, void * jarg2, void * jarg3) {
  lldb::SBProcess *arg1 = (lldb::SBProcess *) 0 ;
  lldb::SBEvent *arg2 = 0 ;
  FILE *arg3 = (FILE *) 0 ;
  
  arg1 = (lldb::SBProcess *)jarg1; 
  arg2 = (lldb::SBEvent *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBEvent const & type is null", 0);
    return ;
  } 
  arg3 = (FILE *)jarg3; 
  ((lldb::SBProcess const *)arg1)->ReportEventState((lldb::SBEvent const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBProcess_AppendEventStateReport(void * jarg1, void * jarg2, void * jarg3) {
  lldb::SBProcess *arg1 = (lldb::SBProcess *) 0 ;
  lldb::SBEvent *arg2 = 0 ;
  lldb::SBCommandReturnObject *arg3 = 0 ;
  
  arg1 = (lldb::SBProcess *)jarg1; 
  arg2 = (lldb::SBEvent *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBEvent const & type is null", 0);
    return ;
  } 
  arg3 = (lldb::SBCommandReturnObject *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBCommandReturnObject & type is null", 0);
    return ;
  } 
  (arg1)->AppendEventStateReport((lldb::SBEvent const &)*arg2,*arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBProcess_RemoteAttachToProcessWithID(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  lldb::SBProcess *arg1 = (lldb::SBProcess *) 0 ;
  lldb::pid_t arg2 ;
  lldb::SBError *arg3 = 0 ;
  lldb::pid_t *argp2 ;
  bool result;
  
  arg1 = (lldb::SBProcess *)jarg1; 
  argp2 = (lldb::pid_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null lldb::pid_t", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (lldb::SBError *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBError & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->RemoteAttachToProcessWithID(arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBProcess_RemoteLaunch(void * jarg1, void * jarg2, void * jarg3, char * jarg4, char * jarg5, char * jarg6, char * jarg7, void * jarg8, unsigned int jarg9, void * jarg10) {
  unsigned int jresult ;
  lldb::SBProcess *arg1 = (lldb::SBProcess *) 0 ;
  char **arg2 = (char **) 0 ;
  char **arg3 = (char **) 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  uint32_t arg8 ;
  bool arg9 ;
  lldb::SBError *arg10 = 0 ;
  uint32_t *argp8 ;
  bool result;
  
  arg1 = (lldb::SBProcess *)jarg1; 
  arg2 = (char **)jarg2; 
  arg3 = (char **)jarg3; 
  arg4 = (char *)jarg4; 
  arg5 = (char *)jarg5; 
  arg6 = (char *)jarg6; 
  arg7 = (char *)jarg7; 
  argp8 = (uint32_t *)jarg8; 
  if (!argp8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return 0;
  }
  arg8 = *argp8; 
  arg9 = jarg9 ? true : false; 
  arg10 = (lldb::SBError *)jarg10;
  if (!arg10) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBError & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->RemoteLaunch((char const **)arg2,(char const **)arg3,(char const *)arg4,(char const *)arg5,(char const *)arg6,(char const *)arg7,arg8,arg9,*arg10);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBProcess_GetNumThreads(void * jarg1) {
  void * jresult ;
  lldb::SBProcess *arg1 = (lldb::SBProcess *) 0 ;
  uint32_t result;
  
  arg1 = (lldb::SBProcess *)jarg1; 
  result = (arg1)->GetNumThreads();
  jresult = new uint32_t((const uint32_t &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBProcess_GetThreadAtIndex(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  lldb::SBProcess *arg1 = (lldb::SBProcess *) 0 ;
  size_t arg2 ;
  lldb::SBThread result;
  
  arg1 = (lldb::SBProcess *)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (arg1)->GetThreadAtIndex(arg2);
  jresult = new lldb::SBThread((const lldb::SBThread &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBProcess_GetThreadByID(void * jarg1, void * jarg2) {
  void * jresult ;
  lldb::SBProcess *arg1 = (lldb::SBProcess *) 0 ;
  lldb::tid_t arg2 ;
  lldb::tid_t *argp2 ;
  lldb::SBThread result;
  
  arg1 = (lldb::SBProcess *)jarg1; 
  argp2 = (lldb::tid_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null lldb::tid_t", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->GetThreadByID(arg2);
  jresult = new lldb::SBThread((const lldb::SBThread &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBProcess_GetThreadByIndexID(void * jarg1, void * jarg2) {
  void * jresult ;
  lldb::SBProcess *arg1 = (lldb::SBProcess *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  lldb::SBThread result;
  
  arg1 = (lldb::SBProcess *)jarg1; 
  argp2 = (uint32_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->GetThreadByIndexID(arg2);
  jresult = new lldb::SBThread((const lldb::SBThread &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBProcess_GetSelectedThread(void * jarg1) {
  void * jresult ;
  lldb::SBProcess *arg1 = (lldb::SBProcess *) 0 ;
  lldb::SBThread result;
  
  arg1 = (lldb::SBProcess *)jarg1; 
  result = ((lldb::SBProcess const *)arg1)->GetSelectedThread();
  jresult = new lldb::SBThread((const lldb::SBThread &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBProcess_SetSelectedThread(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  lldb::SBProcess *arg1 = (lldb::SBProcess *) 0 ;
  lldb::SBThread *arg2 = 0 ;
  bool result;
  
  arg1 = (lldb::SBProcess *)jarg1; 
  arg2 = (lldb::SBThread *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBThread const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->SetSelectedThread((lldb::SBThread const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBProcess_SetSelectedThreadByID(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  lldb::SBProcess *arg1 = (lldb::SBProcess *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  bool result;
  
  arg1 = (lldb::SBProcess *)jarg1; 
  argp2 = (uint32_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)(arg1)->SetSelectedThreadByID(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBProcess_SetSelectedThreadByIndexID(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  lldb::SBProcess *arg1 = (lldb::SBProcess *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  bool result;
  
  arg1 = (lldb::SBProcess *)jarg1; 
  argp2 = (uint32_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)(arg1)->SetSelectedThreadByIndexID(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SBProcess_GetState(void * jarg1) {
  int jresult ;
  lldb::SBProcess *arg1 = (lldb::SBProcess *) 0 ;
  lldb::StateType result;
  
  arg1 = (lldb::SBProcess *)jarg1; 
  result = (lldb::StateType)(arg1)->GetState();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SBProcess_GetExitStatus(void * jarg1) {
  int jresult ;
  lldb::SBProcess *arg1 = (lldb::SBProcess *) 0 ;
  int result;
  
  arg1 = (lldb::SBProcess *)jarg1; 
  result = (int)(arg1)->GetExitStatus();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SBProcess_GetExitDescription(void * jarg1) {
  char * jresult ;
  lldb::SBProcess *arg1 = (lldb::SBProcess *) 0 ;
  char *result = 0 ;
  
  arg1 = (lldb::SBProcess *)jarg1; 
  result = (char *)(arg1)->GetExitDescription();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBProcess_GetProcessID(void * jarg1) {
  void * jresult ;
  lldb::SBProcess *arg1 = (lldb::SBProcess *) 0 ;
  lldb::pid_t result;
  
  arg1 = (lldb::SBProcess *)jarg1; 
  result = (arg1)->GetProcessID();
  jresult = new lldb::pid_t((const lldb::pid_t &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBProcess_GetAddressByteSize(void * jarg1) {
  void * jresult ;
  lldb::SBProcess *arg1 = (lldb::SBProcess *) 0 ;
  uint32_t result;
  
  arg1 = (lldb::SBProcess *)jarg1; 
  result = ((lldb::SBProcess const *)arg1)->GetAddressByteSize();
  jresult = new uint32_t((const uint32_t &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBProcess_Destroy(void * jarg1) {
  void * jresult ;
  lldb::SBProcess *arg1 = (lldb::SBProcess *) 0 ;
  lldb::SBError result;
  
  arg1 = (lldb::SBProcess *)jarg1; 
  result = (arg1)->Destroy();
  jresult = new lldb::SBError((const lldb::SBError &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBProcess_Continue(void * jarg1) {
  void * jresult ;
  lldb::SBProcess *arg1 = (lldb::SBProcess *) 0 ;
  lldb::SBError result;
  
  arg1 = (lldb::SBProcess *)jarg1; 
  result = (arg1)->Continue();
  jresult = new lldb::SBError((const lldb::SBError &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBProcess_Stop(void * jarg1) {
  void * jresult ;
  lldb::SBProcess *arg1 = (lldb::SBProcess *) 0 ;
  lldb::SBError result;
  
  arg1 = (lldb::SBProcess *)jarg1; 
  result = (arg1)->Stop();
  jresult = new lldb::SBError((const lldb::SBError &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBProcess_Kill(void * jarg1) {
  void * jresult ;
  lldb::SBProcess *arg1 = (lldb::SBProcess *) 0 ;
  lldb::SBError result;
  
  arg1 = (lldb::SBProcess *)jarg1; 
  result = (arg1)->Kill();
  jresult = new lldb::SBError((const lldb::SBError &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBProcess_Detach(void * jarg1) {
  void * jresult ;
  lldb::SBProcess *arg1 = (lldb::SBProcess *) 0 ;
  lldb::SBError result;
  
  arg1 = (lldb::SBProcess *)jarg1; 
  result = (arg1)->Detach();
  jresult = new lldb::SBError((const lldb::SBError &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBProcess_Signal(void * jarg1, int jarg2) {
  void * jresult ;
  lldb::SBProcess *arg1 = (lldb::SBProcess *) 0 ;
  int arg2 ;
  lldb::SBError result;
  
  arg1 = (lldb::SBProcess *)jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->Signal(arg2);
  jresult = new lldb::SBError((const lldb::SBError &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBProcess_SendAsyncInterrupt(void * jarg1) {
  lldb::SBProcess *arg1 = (lldb::SBProcess *) 0 ;
  
  arg1 = (lldb::SBProcess *)jarg1; 
  (arg1)->SendAsyncInterrupt();
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_SBProcess_ReadMemory(void * jarg1, void * jarg2, void* jarg3, unsigned long jarg4, void * jarg5) {
  unsigned long jresult ;
  lldb::SBProcess *arg1 = (lldb::SBProcess *) 0 ;
  lldb::addr_t arg2 ;
  void *arg3 = (void *) 0 ;
  size_t arg4 ;
  lldb::SBError *arg5 = 0 ;
  lldb::addr_t *argp2 ;
  size_t result;
  
  arg1 = (lldb::SBProcess *)jarg1; 
  argp2 = (lldb::addr_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null lldb::addr_t", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (void *)jarg3; /* IntPtr */ 
  arg4 = (size_t)jarg4; 
  arg5 = (lldb::SBError *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBError & type is null", 0);
    return 0;
  } 
  result = (arg1)->ReadMemory(arg2,arg3,arg4,*arg5);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_SBProcess_WriteMemory(void * jarg1, void * jarg2, void* jarg3, unsigned long jarg4, void * jarg5) {
  unsigned long jresult ;
  lldb::SBProcess *arg1 = (lldb::SBProcess *) 0 ;
  lldb::addr_t arg2 ;
  void *arg3 = (void *) 0 ;
  size_t arg4 ;
  lldb::SBError *arg5 = 0 ;
  lldb::addr_t *argp2 ;
  size_t result;
  
  arg1 = (lldb::SBProcess *)jarg1; 
  argp2 = (lldb::addr_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null lldb::addr_t", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (void *)jarg3; /* IntPtr */ 
  arg4 = (size_t)jarg4; 
  arg5 = (lldb::SBError *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBError & type is null", 0);
    return 0;
  } 
  result = (arg1)->WriteMemory(arg2,(void const *)arg3,arg4,*arg5);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_SBProcess_ReadCStringFromMemory(void * jarg1, void * jarg2, void* jarg3, unsigned long jarg4, void * jarg5) {
  unsigned long jresult ;
  lldb::SBProcess *arg1 = (lldb::SBProcess *) 0 ;
  lldb::addr_t arg2 ;
  void *arg3 = (void *) 0 ;
  size_t arg4 ;
  lldb::SBError *arg5 = 0 ;
  lldb::addr_t *argp2 ;
  size_t result;
  
  arg1 = (lldb::SBProcess *)jarg1; 
  argp2 = (lldb::addr_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null lldb::addr_t", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (void *)jarg3; /* IntPtr */ 
  arg4 = (size_t)jarg4; 
  arg5 = (lldb::SBError *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBError & type is null", 0);
    return 0;
  } 
  result = (arg1)->ReadCStringFromMemory(arg2,arg3,arg4,*arg5);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBProcess_ReadUnsignedFromMemory(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  lldb::SBProcess *arg1 = (lldb::SBProcess *) 0 ;
  lldb::addr_t arg2 ;
  uint32_t arg3 ;
  lldb::SBError *arg4 = 0 ;
  lldb::addr_t *argp2 ;
  uint32_t *argp3 ;
  uint64_t result;
  
  arg1 = (lldb::SBProcess *)jarg1; 
  argp2 = (lldb::addr_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null lldb::addr_t", 0);
    return 0;
  }
  arg2 = *argp2; 
  argp3 = (uint32_t *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return 0;
  }
  arg3 = *argp3; 
  arg4 = (lldb::SBError *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBError & type is null", 0);
    return 0;
  } 
  result = (arg1)->ReadUnsignedFromMemory(arg2,arg3,*arg4);
  jresult = new uint64_t((const uint64_t &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBProcess_ReadPointerFromMemory(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  lldb::SBProcess *arg1 = (lldb::SBProcess *) 0 ;
  lldb::addr_t arg2 ;
  lldb::SBError *arg3 = 0 ;
  lldb::addr_t *argp2 ;
  lldb::addr_t result;
  
  arg1 = (lldb::SBProcess *)jarg1; 
  argp2 = (lldb::addr_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null lldb::addr_t", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (lldb::SBError *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBError & type is null", 0);
    return 0;
  } 
  result = (arg1)->ReadPointerFromMemory(arg2,*arg3);
  jresult = new lldb::addr_t((const lldb::addr_t &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SBProcess_GetStateFromEvent(void * jarg1) {
  int jresult ;
  lldb::SBEvent *arg1 = 0 ;
  lldb::StateType result;
  
  arg1 = (lldb::SBEvent *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBEvent const & type is null", 0);
    return 0;
  } 
  result = (lldb::StateType)lldb::SBProcess::GetStateFromEvent((lldb::SBEvent const &)*arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBProcess_GetRestartedFromEvent(void * jarg1) {
  unsigned int jresult ;
  lldb::SBEvent *arg1 = 0 ;
  bool result;
  
  arg1 = (lldb::SBEvent *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBEvent const & type is null", 0);
    return 0;
  } 
  result = (bool)lldb::SBProcess::GetRestartedFromEvent((lldb::SBEvent const &)*arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBProcess_GetProcessFromEvent(void * jarg1) {
  void * jresult ;
  lldb::SBEvent *arg1 = 0 ;
  lldb::SBProcess result;
  
  arg1 = (lldb::SBEvent *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBEvent const & type is null", 0);
    return 0;
  } 
  result = lldb::SBProcess::GetProcessFromEvent((lldb::SBEvent const &)*arg1);
  jresult = new lldb::SBProcess((const lldb::SBProcess &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBProcess_EventIsProcessEvent(void * jarg1) {
  unsigned int jresult ;
  lldb::SBEvent *arg1 = 0 ;
  bool result;
  
  arg1 = (lldb::SBEvent *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBEvent const & type is null", 0);
    return 0;
  } 
  result = (bool)lldb::SBProcess::EventIsProcessEvent((lldb::SBEvent const &)*arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBProcess_GetBroadcaster(void * jarg1) {
  void * jresult ;
  lldb::SBProcess *arg1 = (lldb::SBProcess *) 0 ;
  lldb::SBBroadcaster result;
  
  arg1 = (lldb::SBProcess *)jarg1; 
  result = ((lldb::SBProcess const *)arg1)->GetBroadcaster();
  jresult = new lldb::SBBroadcaster((const lldb::SBBroadcaster &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBProcess_GetDescription(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  lldb::SBProcess *arg1 = (lldb::SBProcess *) 0 ;
  lldb::SBStream *arg2 = 0 ;
  bool result;
  
  arg1 = (lldb::SBProcess *)jarg1; 
  arg2 = (lldb::SBStream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBStream & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->GetDescription(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBProcess_GetNumSupportedHardwareWatchpoints(void * jarg1, void * jarg2) {
  void * jresult ;
  lldb::SBProcess *arg1 = (lldb::SBProcess *) 0 ;
  lldb::SBError *arg2 = 0 ;
  uint32_t result;
  
  arg1 = (lldb::SBProcess *)jarg1; 
  arg2 = (lldb::SBError *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBError & type is null", 0);
    return 0;
  } 
  result = ((lldb::SBProcess const *)arg1)->GetNumSupportedHardwareWatchpoints(*arg2);
  jresult = new uint32_t((const uint32_t &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBProcess_LoadImage(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  lldb::SBProcess *arg1 = (lldb::SBProcess *) 0 ;
  lldb::SBFileSpec *arg2 = 0 ;
  lldb::SBError *arg3 = 0 ;
  uint32_t result;
  
  arg1 = (lldb::SBProcess *)jarg1; 
  arg2 = (lldb::SBFileSpec *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBFileSpec & type is null", 0);
    return 0;
  } 
  arg3 = (lldb::SBError *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBError & type is null", 0);
    return 0;
  } 
  result = (arg1)->LoadImage(*arg2,*arg3);
  jresult = new uint32_t((const uint32_t &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBProcess_UnloadImage(void * jarg1, void * jarg2) {
  void * jresult ;
  lldb::SBProcess *arg1 = (lldb::SBProcess *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  lldb::SBError result;
  
  arg1 = (lldb::SBProcess *)jarg1; 
  argp2 = (uint32_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->UnloadImage(arg2);
  jresult = new lldb::SBError((const lldb::SBError &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SBSection__SWIG_0() {
  void * jresult ;
  lldb::SBSection *result = 0 ;
  
  result = (lldb::SBSection *)new lldb::SBSection();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SBSection__SWIG_1(void * jarg1) {
  void * jresult ;
  lldb::SBSection *arg1 = 0 ;
  lldb::SBSection *result = 0 ;
  
  arg1 = (lldb::SBSection *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBSection const & type is null", 0);
    return 0;
  } 
  result = (lldb::SBSection *)new lldb::SBSection((lldb::SBSection const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SBSection(void * jarg1) {
  lldb::SBSection *arg1 = (lldb::SBSection *) 0 ;
  
  arg1 = (lldb::SBSection *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBSection_IsValid(void * jarg1) {
  unsigned int jresult ;
  lldb::SBSection *arg1 = (lldb::SBSection *) 0 ;
  bool result;
  
  arg1 = (lldb::SBSection *)jarg1; 
  result = (bool)((lldb::SBSection const *)arg1)->IsValid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SBSection_GetName(void * jarg1) {
  char * jresult ;
  lldb::SBSection *arg1 = (lldb::SBSection *) 0 ;
  char *result = 0 ;
  
  arg1 = (lldb::SBSection *)jarg1; 
  result = (char *)(arg1)->GetName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBSection_FindSubSection(void * jarg1, char * jarg2) {
  void * jresult ;
  lldb::SBSection *arg1 = (lldb::SBSection *) 0 ;
  char *arg2 = (char *) 0 ;
  lldb::SBSection result;
  
  arg1 = (lldb::SBSection *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (arg1)->FindSubSection((char const *)arg2);
  jresult = new lldb::SBSection((const lldb::SBSection &)result); 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_SBSection_GetNumSubSections(void * jarg1) {
  unsigned long jresult ;
  lldb::SBSection *arg1 = (lldb::SBSection *) 0 ;
  size_t result;
  
  arg1 = (lldb::SBSection *)jarg1; 
  result = (arg1)->GetNumSubSections();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBSection_GetSubSectionAtIndex(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  lldb::SBSection *arg1 = (lldb::SBSection *) 0 ;
  size_t arg2 ;
  lldb::SBSection result;
  
  arg1 = (lldb::SBSection *)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (arg1)->GetSubSectionAtIndex(arg2);
  jresult = new lldb::SBSection((const lldb::SBSection &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBSection_GetFileAddress(void * jarg1) {
  void * jresult ;
  lldb::SBSection *arg1 = (lldb::SBSection *) 0 ;
  lldb::addr_t result;
  
  arg1 = (lldb::SBSection *)jarg1; 
  result = (arg1)->GetFileAddress();
  jresult = new lldb::addr_t((const lldb::addr_t &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBSection_GetLoadAddress(void * jarg1, void * jarg2) {
  void * jresult ;
  lldb::SBSection *arg1 = (lldb::SBSection *) 0 ;
  lldb::SBTarget *arg2 = 0 ;
  lldb::addr_t result;
  
  arg1 = (lldb::SBSection *)jarg1; 
  arg2 = (lldb::SBTarget *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBTarget & type is null", 0);
    return 0;
  } 
  result = (arg1)->GetLoadAddress(*arg2);
  jresult = new lldb::addr_t((const lldb::addr_t &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBSection_GetByteSize(void * jarg1) {
  void * jresult ;
  lldb::SBSection *arg1 = (lldb::SBSection *) 0 ;
  lldb::addr_t result;
  
  arg1 = (lldb::SBSection *)jarg1; 
  result = (arg1)->GetByteSize();
  jresult = new lldb::addr_t((const lldb::addr_t &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBSection_GetFileOffset(void * jarg1) {
  void * jresult ;
  lldb::SBSection *arg1 = (lldb::SBSection *) 0 ;
  uint64_t result;
  
  arg1 = (lldb::SBSection *)jarg1; 
  result = (arg1)->GetFileOffset();
  jresult = new uint64_t((const uint64_t &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBSection_GetFileByteSize(void * jarg1) {
  void * jresult ;
  lldb::SBSection *arg1 = (lldb::SBSection *) 0 ;
  uint64_t result;
  
  arg1 = (lldb::SBSection *)jarg1; 
  result = (arg1)->GetFileByteSize();
  jresult = new uint64_t((const uint64_t &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBSection_GetSectionData__SWIG_0(void * jarg1) {
  void * jresult ;
  lldb::SBSection *arg1 = (lldb::SBSection *) 0 ;
  lldb::SBData result;
  
  arg1 = (lldb::SBSection *)jarg1; 
  result = (arg1)->GetSectionData();
  jresult = new lldb::SBData((const lldb::SBData &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBSection_GetSectionData__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  lldb::SBSection *arg1 = (lldb::SBSection *) 0 ;
  uint64_t arg2 ;
  uint64_t arg3 ;
  uint64_t *argp2 ;
  uint64_t *argp3 ;
  lldb::SBData result;
  
  arg1 = (lldb::SBSection *)jarg1; 
  argp2 = (uint64_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint64_t", 0);
    return 0;
  }
  arg2 = *argp2; 
  argp3 = (uint64_t *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint64_t", 0);
    return 0;
  }
  arg3 = *argp3; 
  result = (arg1)->GetSectionData(arg2,arg3);
  jresult = new lldb::SBData((const lldb::SBData &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SBSection_GetSectionType(void * jarg1) {
  int jresult ;
  lldb::SBSection *arg1 = (lldb::SBSection *) 0 ;
  lldb::SectionType result;
  
  arg1 = (lldb::SBSection *)jarg1; 
  result = (lldb::SectionType)(arg1)->GetSectionType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBSection_GetDescription(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  lldb::SBSection *arg1 = (lldb::SBSection *) 0 ;
  lldb::SBStream *arg2 = 0 ;
  bool result;
  
  arg1 = (lldb::SBSection *)jarg1; 
  arg2 = (lldb::SBStream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBStream & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->GetDescription(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SBSourceManager(void * jarg1) {
  void * jresult ;
  lldb::SBSourceManager *arg1 = 0 ;
  lldb::SBSourceManager *result = 0 ;
  
  arg1 = (lldb::SBSourceManager *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBSourceManager const & type is null", 0);
    return 0;
  } 
  result = (lldb::SBSourceManager *)new lldb::SBSourceManager((lldb::SBSourceManager const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SBSourceManager(void * jarg1) {
  lldb::SBSourceManager *arg1 = (lldb::SBSourceManager *) 0 ;
  
  arg1 = (lldb::SBSourceManager *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_SBSourceManager_DisplaySourceLinesWithLineNumbers(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, char * jarg6, void * jarg7) {
  unsigned long jresult ;
  lldb::SBSourceManager *arg1 = (lldb::SBSourceManager *) 0 ;
  lldb::SBFileSpec *arg2 = 0 ;
  uint32_t arg3 ;
  uint32_t arg4 ;
  uint32_t arg5 ;
  char *arg6 = (char *) 0 ;
  lldb::SBStream *arg7 = 0 ;
  uint32_t *argp3 ;
  uint32_t *argp4 ;
  uint32_t *argp5 ;
  size_t result;
  
  arg1 = (lldb::SBSourceManager *)jarg1; 
  arg2 = (lldb::SBFileSpec *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBFileSpec const & type is null", 0);
    return 0;
  } 
  argp3 = (uint32_t *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return 0;
  }
  arg3 = *argp3; 
  argp4 = (uint32_t *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return 0;
  }
  arg4 = *argp4; 
  argp5 = (uint32_t *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return 0;
  }
  arg5 = *argp5; 
  arg6 = (char *)jarg6; 
  arg7 = (lldb::SBStream *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBStream & type is null", 0);
    return 0;
  } 
  result = (arg1)->DisplaySourceLinesWithLineNumbers((lldb::SBFileSpec const &)*arg2,arg3,arg4,arg5,(char const *)arg6,*arg7);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SBStream() {
  void * jresult ;
  lldb::SBStream *result = 0 ;
  
  result = (lldb::SBStream *)new lldb::SBStream();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SBStream(void * jarg1) {
  lldb::SBStream *arg1 = (lldb::SBStream *) 0 ;
  
  arg1 = (lldb::SBStream *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBStream_IsValid(void * jarg1) {
  unsigned int jresult ;
  lldb::SBStream *arg1 = (lldb::SBStream *) 0 ;
  bool result;
  
  arg1 = (lldb::SBStream *)jarg1; 
  result = (bool)((lldb::SBStream const *)arg1)->IsValid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SBStream_GetData(void * jarg1) {
  char * jresult ;
  lldb::SBStream *arg1 = (lldb::SBStream *) 0 ;
  char *result = 0 ;
  
  arg1 = (lldb::SBStream *)jarg1; 
  result = (char *)(arg1)->GetData();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_SBStream_GetSize(void * jarg1) {
  unsigned long jresult ;
  lldb::SBStream *arg1 = (lldb::SBStream *) 0 ;
  size_t result;
  
  arg1 = (lldb::SBStream *)jarg1; 
  result = (arg1)->GetSize();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBStream_Printf(void * jarg1, char * jarg2) {
  lldb::SBStream *arg1 = (lldb::SBStream *) 0 ;
  char *arg2 = (char *) 0 ;
  void *arg3 = 0 ;
  
  arg1 = (lldb::SBStream *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->Printf((char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBStream_RedirectToFile(void * jarg1, char * jarg2, unsigned int jarg3) {
  lldb::SBStream *arg1 = (lldb::SBStream *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  
  arg1 = (lldb::SBStream *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->RedirectToFile((char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBStream_RedirectToFileHandle(void * jarg1, void * jarg2, unsigned int jarg3) {
  lldb::SBStream *arg1 = (lldb::SBStream *) 0 ;
  FILE *arg2 = (FILE *) 0 ;
  bool arg3 ;
  
  arg1 = (lldb::SBStream *)jarg1; 
  arg2 = (FILE *)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->RedirectToFileHandle(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBStream_RedirectToFileDescriptor(void * jarg1, int jarg2, unsigned int jarg3) {
  lldb::SBStream *arg1 = (lldb::SBStream *) 0 ;
  int arg2 ;
  bool arg3 ;
  
  arg1 = (lldb::SBStream *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->RedirectToFileDescriptor(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBStream_Clear(void * jarg1) {
  lldb::SBStream *arg1 = (lldb::SBStream *) 0 ;
  
  arg1 = (lldb::SBStream *)jarg1; 
  (arg1)->Clear();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SBStringList__SWIG_0() {
  void * jresult ;
  lldb::SBStringList *result = 0 ;
  
  result = (lldb::SBStringList *)new lldb::SBStringList();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SBStringList__SWIG_1(void * jarg1) {
  void * jresult ;
  lldb::SBStringList *arg1 = 0 ;
  lldb::SBStringList *result = 0 ;
  
  arg1 = (lldb::SBStringList *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBStringList const & type is null", 0);
    return 0;
  } 
  result = (lldb::SBStringList *)new lldb::SBStringList((lldb::SBStringList const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SBStringList(void * jarg1) {
  lldb::SBStringList *arg1 = (lldb::SBStringList *) 0 ;
  
  arg1 = (lldb::SBStringList *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBStringList_IsValid(void * jarg1) {
  unsigned int jresult ;
  lldb::SBStringList *arg1 = (lldb::SBStringList *) 0 ;
  bool result;
  
  arg1 = (lldb::SBStringList *)jarg1; 
  result = (bool)((lldb::SBStringList const *)arg1)->IsValid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBStringList_AppendString(void * jarg1, char * jarg2) {
  lldb::SBStringList *arg1 = (lldb::SBStringList *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (lldb::SBStringList *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->AppendString((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBStringList_AppendList__SWIG_0(void * jarg1, void * jarg2, int jarg3) {
  lldb::SBStringList *arg1 = (lldb::SBStringList *) 0 ;
  char **arg2 = (char **) 0 ;
  int arg3 ;
  
  arg1 = (lldb::SBStringList *)jarg1; 
  arg2 = (char **)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->AppendList((char const **)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBStringList_AppendList__SWIG_1(void * jarg1, void * jarg2) {
  lldb::SBStringList *arg1 = (lldb::SBStringList *) 0 ;
  lldb::SBStringList *arg2 = 0 ;
  
  arg1 = (lldb::SBStringList *)jarg1; 
  arg2 = (lldb::SBStringList *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBStringList const & type is null", 0);
    return ;
  } 
  (arg1)->AppendList((lldb::SBStringList const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBStringList_GetSize(void * jarg1) {
  void * jresult ;
  lldb::SBStringList *arg1 = (lldb::SBStringList *) 0 ;
  uint32_t result;
  
  arg1 = (lldb::SBStringList *)jarg1; 
  result = ((lldb::SBStringList const *)arg1)->GetSize();
  jresult = new uint32_t((const uint32_t &)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SBStringList_GetStringAtIndex(void * jarg1, unsigned long jarg2) {
  char * jresult ;
  lldb::SBStringList *arg1 = (lldb::SBStringList *) 0 ;
  size_t arg2 ;
  char *result = 0 ;
  
  arg1 = (lldb::SBStringList *)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (char *)(arg1)->GetStringAtIndex(arg2);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBStringList_Clear(void * jarg1) {
  lldb::SBStringList *arg1 = (lldb::SBStringList *) 0 ;
  
  arg1 = (lldb::SBStringList *)jarg1; 
  (arg1)->Clear();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SBSymbol__SWIG_0() {
  void * jresult ;
  lldb::SBSymbol *result = 0 ;
  
  result = (lldb::SBSymbol *)new lldb::SBSymbol();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SBSymbol(void * jarg1) {
  lldb::SBSymbol *arg1 = (lldb::SBSymbol *) 0 ;
  
  arg1 = (lldb::SBSymbol *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SBSymbol__SWIG_1(void * jarg1) {
  void * jresult ;
  lldb::SBSymbol *arg1 = 0 ;
  lldb::SBSymbol *result = 0 ;
  
  arg1 = (lldb::SBSymbol *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBSymbol const & type is null", 0);
    return 0;
  } 
  result = (lldb::SBSymbol *)new lldb::SBSymbol((lldb::SBSymbol const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBSymbol_IsValid(void * jarg1) {
  unsigned int jresult ;
  lldb::SBSymbol *arg1 = (lldb::SBSymbol *) 0 ;
  bool result;
  
  arg1 = (lldb::SBSymbol *)jarg1; 
  result = (bool)((lldb::SBSymbol const *)arg1)->IsValid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SBSymbol_GetName(void * jarg1) {
  char * jresult ;
  lldb::SBSymbol *arg1 = (lldb::SBSymbol *) 0 ;
  char *result = 0 ;
  
  arg1 = (lldb::SBSymbol *)jarg1; 
  result = (char *)((lldb::SBSymbol const *)arg1)->GetName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SBSymbol_GetMangledName(void * jarg1) {
  char * jresult ;
  lldb::SBSymbol *arg1 = (lldb::SBSymbol *) 0 ;
  char *result = 0 ;
  
  arg1 = (lldb::SBSymbol *)jarg1; 
  result = (char *)((lldb::SBSymbol const *)arg1)->GetMangledName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBSymbol_GetInstructions(void * jarg1, void * jarg2) {
  void * jresult ;
  lldb::SBSymbol *arg1 = (lldb::SBSymbol *) 0 ;
  lldb::SBTarget arg2 ;
  lldb::SBTarget *argp2 ;
  lldb::SBInstructionList result;
  
  arg1 = (lldb::SBSymbol *)jarg1; 
  argp2 = (lldb::SBTarget *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null lldb::SBTarget", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->GetInstructions(arg2);
  jresult = new lldb::SBInstructionList((const lldb::SBInstructionList &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBSymbol_GetStartAddress(void * jarg1) {
  void * jresult ;
  lldb::SBSymbol *arg1 = (lldb::SBSymbol *) 0 ;
  lldb::SBAddress result;
  
  arg1 = (lldb::SBSymbol *)jarg1; 
  result = (arg1)->GetStartAddress();
  jresult = new lldb::SBAddress((const lldb::SBAddress &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBSymbol_GetEndAddress(void * jarg1) {
  void * jresult ;
  lldb::SBSymbol *arg1 = (lldb::SBSymbol *) 0 ;
  lldb::SBAddress result;
  
  arg1 = (lldb::SBSymbol *)jarg1; 
  result = (arg1)->GetEndAddress();
  jresult = new lldb::SBAddress((const lldb::SBAddress &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBSymbol_GetPrologueByteSize(void * jarg1) {
  void * jresult ;
  lldb::SBSymbol *arg1 = (lldb::SBSymbol *) 0 ;
  uint32_t result;
  
  arg1 = (lldb::SBSymbol *)jarg1; 
  result = (arg1)->GetPrologueByteSize();
  jresult = new uint32_t((const uint32_t &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SBSymbol_GetType(void * jarg1) {
  int jresult ;
  lldb::SBSymbol *arg1 = (lldb::SBSymbol *) 0 ;
  lldb::SymbolType result;
  
  arg1 = (lldb::SBSymbol *)jarg1; 
  result = (lldb::SymbolType)(arg1)->GetType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBSymbol_GetDescription(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  lldb::SBSymbol *arg1 = (lldb::SBSymbol *) 0 ;
  lldb::SBStream *arg2 = 0 ;
  bool result;
  
  arg1 = (lldb::SBSymbol *)jarg1; 
  arg2 = (lldb::SBStream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBStream & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->GetDescription(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBSymbol_IsExternal(void * jarg1) {
  unsigned int jresult ;
  lldb::SBSymbol *arg1 = (lldb::SBSymbol *) 0 ;
  bool result;
  
  arg1 = (lldb::SBSymbol *)jarg1; 
  result = (bool)(arg1)->IsExternal();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBSymbol_IsSynthetic(void * jarg1) {
  unsigned int jresult ;
  lldb::SBSymbol *arg1 = (lldb::SBSymbol *) 0 ;
  bool result;
  
  arg1 = (lldb::SBSymbol *)jarg1; 
  result = (bool)(arg1)->IsSynthetic();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SBSymbolContext__SWIG_0() {
  void * jresult ;
  lldb::SBSymbolContext *result = 0 ;
  
  result = (lldb::SBSymbolContext *)new lldb::SBSymbolContext();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SBSymbolContext__SWIG_1(void * jarg1) {
  void * jresult ;
  lldb::SBSymbolContext *arg1 = 0 ;
  lldb::SBSymbolContext *result = 0 ;
  
  arg1 = (lldb::SBSymbolContext *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBSymbolContext const & type is null", 0);
    return 0;
  } 
  result = (lldb::SBSymbolContext *)new lldb::SBSymbolContext((lldb::SBSymbolContext const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SBSymbolContext(void * jarg1) {
  lldb::SBSymbolContext *arg1 = (lldb::SBSymbolContext *) 0 ;
  
  arg1 = (lldb::SBSymbolContext *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBSymbolContext_IsValid(void * jarg1) {
  unsigned int jresult ;
  lldb::SBSymbolContext *arg1 = (lldb::SBSymbolContext *) 0 ;
  bool result;
  
  arg1 = (lldb::SBSymbolContext *)jarg1; 
  result = (bool)((lldb::SBSymbolContext const *)arg1)->IsValid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBSymbolContext_GetModule(void * jarg1) {
  void * jresult ;
  lldb::SBSymbolContext *arg1 = (lldb::SBSymbolContext *) 0 ;
  lldb::SBModule result;
  
  arg1 = (lldb::SBSymbolContext *)jarg1; 
  result = (arg1)->GetModule();
  jresult = new lldb::SBModule((const lldb::SBModule &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBSymbolContext_GetCompileUnit(void * jarg1) {
  void * jresult ;
  lldb::SBSymbolContext *arg1 = (lldb::SBSymbolContext *) 0 ;
  lldb::SBCompileUnit result;
  
  arg1 = (lldb::SBSymbolContext *)jarg1; 
  result = (arg1)->GetCompileUnit();
  jresult = new lldb::SBCompileUnit((const lldb::SBCompileUnit &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBSymbolContext_GetFunction(void * jarg1) {
  void * jresult ;
  lldb::SBSymbolContext *arg1 = (lldb::SBSymbolContext *) 0 ;
  lldb::SBFunction result;
  
  arg1 = (lldb::SBSymbolContext *)jarg1; 
  result = (arg1)->GetFunction();
  jresult = new lldb::SBFunction((const lldb::SBFunction &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBSymbolContext_GetBlock(void * jarg1) {
  void * jresult ;
  lldb::SBSymbolContext *arg1 = (lldb::SBSymbolContext *) 0 ;
  lldb::SBBlock result;
  
  arg1 = (lldb::SBSymbolContext *)jarg1; 
  result = (arg1)->GetBlock();
  jresult = new lldb::SBBlock((const lldb::SBBlock &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBSymbolContext_GetLineEntry(void * jarg1) {
  void * jresult ;
  lldb::SBSymbolContext *arg1 = (lldb::SBSymbolContext *) 0 ;
  lldb::SBLineEntry result;
  
  arg1 = (lldb::SBSymbolContext *)jarg1; 
  result = (arg1)->GetLineEntry();
  jresult = new lldb::SBLineEntry((const lldb::SBLineEntry &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBSymbolContext_GetSymbol(void * jarg1) {
  void * jresult ;
  lldb::SBSymbolContext *arg1 = (lldb::SBSymbolContext *) 0 ;
  lldb::SBSymbol result;
  
  arg1 = (lldb::SBSymbolContext *)jarg1; 
  result = (arg1)->GetSymbol();
  jresult = new lldb::SBSymbol((const lldb::SBSymbol &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBSymbolContext_SetModule(void * jarg1, void * jarg2) {
  lldb::SBSymbolContext *arg1 = (lldb::SBSymbolContext *) 0 ;
  lldb::SBModule arg2 ;
  lldb::SBModule *argp2 ;
  
  arg1 = (lldb::SBSymbolContext *)jarg1; 
  argp2 = (lldb::SBModule *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null lldb::SBModule", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->SetModule(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBSymbolContext_SetCompileUnit(void * jarg1, void * jarg2) {
  lldb::SBSymbolContext *arg1 = (lldb::SBSymbolContext *) 0 ;
  lldb::SBCompileUnit arg2 ;
  lldb::SBCompileUnit *argp2 ;
  
  arg1 = (lldb::SBSymbolContext *)jarg1; 
  argp2 = (lldb::SBCompileUnit *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null lldb::SBCompileUnit", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->SetCompileUnit(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBSymbolContext_SetFunction(void * jarg1, void * jarg2) {
  lldb::SBSymbolContext *arg1 = (lldb::SBSymbolContext *) 0 ;
  lldb::SBFunction arg2 ;
  lldb::SBFunction *argp2 ;
  
  arg1 = (lldb::SBSymbolContext *)jarg1; 
  argp2 = (lldb::SBFunction *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null lldb::SBFunction", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->SetFunction(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBSymbolContext_SetBlock(void * jarg1, void * jarg2) {
  lldb::SBSymbolContext *arg1 = (lldb::SBSymbolContext *) 0 ;
  lldb::SBBlock arg2 ;
  lldb::SBBlock *argp2 ;
  
  arg1 = (lldb::SBSymbolContext *)jarg1; 
  argp2 = (lldb::SBBlock *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null lldb::SBBlock", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->SetBlock(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBSymbolContext_SetLineEntry(void * jarg1, void * jarg2) {
  lldb::SBSymbolContext *arg1 = (lldb::SBSymbolContext *) 0 ;
  lldb::SBLineEntry arg2 ;
  lldb::SBLineEntry *argp2 ;
  
  arg1 = (lldb::SBSymbolContext *)jarg1; 
  argp2 = (lldb::SBLineEntry *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null lldb::SBLineEntry", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->SetLineEntry(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBSymbolContext_SetSymbol(void * jarg1, void * jarg2) {
  lldb::SBSymbolContext *arg1 = (lldb::SBSymbolContext *) 0 ;
  lldb::SBSymbol arg2 ;
  lldb::SBSymbol *argp2 ;
  
  arg1 = (lldb::SBSymbolContext *)jarg1; 
  argp2 = (lldb::SBSymbol *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null lldb::SBSymbol", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->SetSymbol(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBSymbolContext_GetParentOfInlinedScope(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  lldb::SBSymbolContext *arg1 = (lldb::SBSymbolContext *) 0 ;
  lldb::SBAddress *arg2 = 0 ;
  lldb::SBAddress *arg3 = 0 ;
  lldb::SBSymbolContext result;
  
  arg1 = (lldb::SBSymbolContext *)jarg1; 
  arg2 = (lldb::SBAddress *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBAddress const & type is null", 0);
    return 0;
  } 
  arg3 = (lldb::SBAddress *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBAddress & type is null", 0);
    return 0;
  } 
  result = ((lldb::SBSymbolContext const *)arg1)->GetParentOfInlinedScope((lldb::SBAddress const &)*arg2,*arg3);
  jresult = new lldb::SBSymbolContext((const lldb::SBSymbolContext &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBSymbolContext_GetDescription(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  lldb::SBSymbolContext *arg1 = (lldb::SBSymbolContext *) 0 ;
  lldb::SBStream *arg2 = 0 ;
  bool result;
  
  arg1 = (lldb::SBSymbolContext *)jarg1; 
  arg2 = (lldb::SBStream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBStream & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->GetDescription(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SBSymbolContextList__SWIG_0() {
  void * jresult ;
  lldb::SBSymbolContextList *result = 0 ;
  
  result = (lldb::SBSymbolContextList *)new lldb::SBSymbolContextList();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SBSymbolContextList__SWIG_1(void * jarg1) {
  void * jresult ;
  lldb::SBSymbolContextList *arg1 = 0 ;
  lldb::SBSymbolContextList *result = 0 ;
  
  arg1 = (lldb::SBSymbolContextList *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBSymbolContextList const & type is null", 0);
    return 0;
  } 
  result = (lldb::SBSymbolContextList *)new lldb::SBSymbolContextList((lldb::SBSymbolContextList const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SBSymbolContextList(void * jarg1) {
  lldb::SBSymbolContextList *arg1 = (lldb::SBSymbolContextList *) 0 ;
  
  arg1 = (lldb::SBSymbolContextList *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBSymbolContextList_IsValid(void * jarg1) {
  unsigned int jresult ;
  lldb::SBSymbolContextList *arg1 = (lldb::SBSymbolContextList *) 0 ;
  bool result;
  
  arg1 = (lldb::SBSymbolContextList *)jarg1; 
  result = (bool)((lldb::SBSymbolContextList const *)arg1)->IsValid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBSymbolContextList_GetSize(void * jarg1) {
  void * jresult ;
  lldb::SBSymbolContextList *arg1 = (lldb::SBSymbolContextList *) 0 ;
  uint32_t result;
  
  arg1 = (lldb::SBSymbolContextList *)jarg1; 
  result = ((lldb::SBSymbolContextList const *)arg1)->GetSize();
  jresult = new uint32_t((const uint32_t &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBSymbolContextList_GetContextAtIndex(void * jarg1, void * jarg2) {
  void * jresult ;
  lldb::SBSymbolContextList *arg1 = (lldb::SBSymbolContextList *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  lldb::SBSymbolContext result;
  
  arg1 = (lldb::SBSymbolContextList *)jarg1; 
  argp2 = (uint32_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->GetContextAtIndex(arg2);
  jresult = new lldb::SBSymbolContext((const lldb::SBSymbolContext &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBSymbolContextList_Append__SWIG_0(void * jarg1, void * jarg2) {
  lldb::SBSymbolContextList *arg1 = (lldb::SBSymbolContextList *) 0 ;
  lldb::SBSymbolContext *arg2 = 0 ;
  
  arg1 = (lldb::SBSymbolContextList *)jarg1; 
  arg2 = (lldb::SBSymbolContext *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBSymbolContext & type is null", 0);
    return ;
  } 
  (arg1)->Append(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBSymbolContextList_Append__SWIG_1(void * jarg1, void * jarg2) {
  lldb::SBSymbolContextList *arg1 = (lldb::SBSymbolContextList *) 0 ;
  lldb::SBSymbolContextList *arg2 = 0 ;
  
  arg1 = (lldb::SBSymbolContextList *)jarg1; 
  arg2 = (lldb::SBSymbolContextList *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBSymbolContextList & type is null", 0);
    return ;
  } 
  (arg1)->Append(*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBSymbolContextList_GetDescription(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  lldb::SBSymbolContextList *arg1 = (lldb::SBSymbolContextList *) 0 ;
  lldb::SBStream *arg2 = 0 ;
  bool result;
  
  arg1 = (lldb::SBSymbolContextList *)jarg1; 
  arg2 = (lldb::SBStream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBStream & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->GetDescription(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBSymbolContextList_Clear(void * jarg1) {
  lldb::SBSymbolContextList *arg1 = (lldb::SBSymbolContextList *) 0 ;
  
  arg1 = (lldb::SBSymbolContextList *)jarg1; 
  (arg1)->Clear();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SBLaunchInfo(void * jarg1) {
  void * jresult ;
  char **arg1 = (char **) 0 ;
  lldb::SBLaunchInfo *result = 0 ;
  
  arg1 = (char **)jarg1; 
  result = (lldb::SBLaunchInfo *)new lldb::SBLaunchInfo((char const **)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBLaunchInfo_GetUserID(void * jarg1) {
  void * jresult ;
  lldb::SBLaunchInfo *arg1 = (lldb::SBLaunchInfo *) 0 ;
  uint32_t result;
  
  arg1 = (lldb::SBLaunchInfo *)jarg1; 
  result = (arg1)->GetUserID();
  jresult = new uint32_t((const uint32_t &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBLaunchInfo_GetGroupID(void * jarg1) {
  void * jresult ;
  lldb::SBLaunchInfo *arg1 = (lldb::SBLaunchInfo *) 0 ;
  uint32_t result;
  
  arg1 = (lldb::SBLaunchInfo *)jarg1; 
  result = (arg1)->GetGroupID();
  jresult = new uint32_t((const uint32_t &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBLaunchInfo_UserIDIsValid(void * jarg1) {
  unsigned int jresult ;
  lldb::SBLaunchInfo *arg1 = (lldb::SBLaunchInfo *) 0 ;
  bool result;
  
  arg1 = (lldb::SBLaunchInfo *)jarg1; 
  result = (bool)(arg1)->UserIDIsValid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBLaunchInfo_GroupIDIsValid(void * jarg1) {
  unsigned int jresult ;
  lldb::SBLaunchInfo *arg1 = (lldb::SBLaunchInfo *) 0 ;
  bool result;
  
  arg1 = (lldb::SBLaunchInfo *)jarg1; 
  result = (bool)(arg1)->GroupIDIsValid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBLaunchInfo_SetUserID(void * jarg1, void * jarg2) {
  lldb::SBLaunchInfo *arg1 = (lldb::SBLaunchInfo *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  arg1 = (lldb::SBLaunchInfo *)jarg1; 
  argp2 = (uint32_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->SetUserID(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBLaunchInfo_SetGroupID(void * jarg1, void * jarg2) {
  lldb::SBLaunchInfo *arg1 = (lldb::SBLaunchInfo *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  arg1 = (lldb::SBLaunchInfo *)jarg1; 
  argp2 = (uint32_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->SetGroupID(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBLaunchInfo_GetNumArguments(void * jarg1) {
  void * jresult ;
  lldb::SBLaunchInfo *arg1 = (lldb::SBLaunchInfo *) 0 ;
  uint32_t result;
  
  arg1 = (lldb::SBLaunchInfo *)jarg1; 
  result = (arg1)->GetNumArguments();
  jresult = new uint32_t((const uint32_t &)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SBLaunchInfo_GetArgumentAtIndex(void * jarg1, void * jarg2) {
  char * jresult ;
  lldb::SBLaunchInfo *arg1 = (lldb::SBLaunchInfo *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  char *result = 0 ;
  
  arg1 = (lldb::SBLaunchInfo *)jarg1; 
  argp2 = (uint32_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (char *)(arg1)->GetArgumentAtIndex(arg2);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBLaunchInfo_SetArguments(void * jarg1, void * jarg2, unsigned int jarg3) {
  lldb::SBLaunchInfo *arg1 = (lldb::SBLaunchInfo *) 0 ;
  char **arg2 = (char **) 0 ;
  bool arg3 ;
  
  arg1 = (lldb::SBLaunchInfo *)jarg1; 
  arg2 = (char **)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->SetArguments((char const **)arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBLaunchInfo_GetNumEnvironmentEntries(void * jarg1) {
  void * jresult ;
  lldb::SBLaunchInfo *arg1 = (lldb::SBLaunchInfo *) 0 ;
  uint32_t result;
  
  arg1 = (lldb::SBLaunchInfo *)jarg1; 
  result = (arg1)->GetNumEnvironmentEntries();
  jresult = new uint32_t((const uint32_t &)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SBLaunchInfo_GetEnvironmentEntryAtIndex(void * jarg1, void * jarg2) {
  char * jresult ;
  lldb::SBLaunchInfo *arg1 = (lldb::SBLaunchInfo *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  char *result = 0 ;
  
  arg1 = (lldb::SBLaunchInfo *)jarg1; 
  argp2 = (uint32_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (char *)(arg1)->GetEnvironmentEntryAtIndex(arg2);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBLaunchInfo_SetEnvironmentEntries(void * jarg1, void * jarg2, unsigned int jarg3) {
  lldb::SBLaunchInfo *arg1 = (lldb::SBLaunchInfo *) 0 ;
  char **arg2 = (char **) 0 ;
  bool arg3 ;
  
  arg1 = (lldb::SBLaunchInfo *)jarg1; 
  arg2 = (char **)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->SetEnvironmentEntries((char const **)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBLaunchInfo_Clear(void * jarg1) {
  lldb::SBLaunchInfo *arg1 = (lldb::SBLaunchInfo *) 0 ;
  
  arg1 = (lldb::SBLaunchInfo *)jarg1; 
  (arg1)->Clear();
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SBLaunchInfo_GetWorkingDirectory(void * jarg1) {
  char * jresult ;
  lldb::SBLaunchInfo *arg1 = (lldb::SBLaunchInfo *) 0 ;
  char *result = 0 ;
  
  arg1 = (lldb::SBLaunchInfo *)jarg1; 
  result = (char *)((lldb::SBLaunchInfo const *)arg1)->GetWorkingDirectory();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBLaunchInfo_SetWorkingDirectory(void * jarg1, char * jarg2) {
  lldb::SBLaunchInfo *arg1 = (lldb::SBLaunchInfo *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (lldb::SBLaunchInfo *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->SetWorkingDirectory((char const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBLaunchInfo_GetLaunchFlags(void * jarg1) {
  void * jresult ;
  lldb::SBLaunchInfo *arg1 = (lldb::SBLaunchInfo *) 0 ;
  uint32_t result;
  
  arg1 = (lldb::SBLaunchInfo *)jarg1; 
  result = (arg1)->GetLaunchFlags();
  jresult = new uint32_t((const uint32_t &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBLaunchInfo_SetLaunchFlags(void * jarg1, void * jarg2) {
  lldb::SBLaunchInfo *arg1 = (lldb::SBLaunchInfo *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  arg1 = (lldb::SBLaunchInfo *)jarg1; 
  argp2 = (uint32_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->SetLaunchFlags(arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SBLaunchInfo_GetProcessPluginName(void * jarg1) {
  char * jresult ;
  lldb::SBLaunchInfo *arg1 = (lldb::SBLaunchInfo *) 0 ;
  char *result = 0 ;
  
  arg1 = (lldb::SBLaunchInfo *)jarg1; 
  result = (char *)(arg1)->GetProcessPluginName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBLaunchInfo_SetProcessPluginName(void * jarg1, char * jarg2) {
  lldb::SBLaunchInfo *arg1 = (lldb::SBLaunchInfo *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (lldb::SBLaunchInfo *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->SetProcessPluginName((char const *)arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SBLaunchInfo_GetShell(void * jarg1) {
  char * jresult ;
  lldb::SBLaunchInfo *arg1 = (lldb::SBLaunchInfo *) 0 ;
  char *result = 0 ;
  
  arg1 = (lldb::SBLaunchInfo *)jarg1; 
  result = (char *)(arg1)->GetShell();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBLaunchInfo_SetShell(void * jarg1, char * jarg2) {
  lldb::SBLaunchInfo *arg1 = (lldb::SBLaunchInfo *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (lldb::SBLaunchInfo *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->SetShell((char const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBLaunchInfo_GetResumeCount(void * jarg1) {
  void * jresult ;
  lldb::SBLaunchInfo *arg1 = (lldb::SBLaunchInfo *) 0 ;
  uint32_t result;
  
  arg1 = (lldb::SBLaunchInfo *)jarg1; 
  result = (arg1)->GetResumeCount();
  jresult = new uint32_t((const uint32_t &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBLaunchInfo_SetResumeCount(void * jarg1, void * jarg2) {
  lldb::SBLaunchInfo *arg1 = (lldb::SBLaunchInfo *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  arg1 = (lldb::SBLaunchInfo *)jarg1; 
  argp2 = (uint32_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->SetResumeCount(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBLaunchInfo_AddCloseFileAction(void * jarg1, int jarg2) {
  unsigned int jresult ;
  lldb::SBLaunchInfo *arg1 = (lldb::SBLaunchInfo *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (lldb::SBLaunchInfo *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->AddCloseFileAction(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBLaunchInfo_AddDuplicateFileAction(void * jarg1, int jarg2, int jarg3) {
  unsigned int jresult ;
  lldb::SBLaunchInfo *arg1 = (lldb::SBLaunchInfo *) 0 ;
  int arg2 ;
  int arg3 ;
  bool result;
  
  arg1 = (lldb::SBLaunchInfo *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)(arg1)->AddDuplicateFileAction(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBLaunchInfo_AddOpenFileAction(void * jarg1, int jarg2, char * jarg3, unsigned int jarg4, unsigned int jarg5) {
  unsigned int jresult ;
  lldb::SBLaunchInfo *arg1 = (lldb::SBLaunchInfo *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  bool arg4 ;
  bool arg5 ;
  bool result;
  
  arg1 = (lldb::SBLaunchInfo *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  result = (bool)(arg1)->AddOpenFileAction(arg2,(char const *)arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBLaunchInfo_AddSuppressFileAction(void * jarg1, int jarg2, unsigned int jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  lldb::SBLaunchInfo *arg1 = (lldb::SBLaunchInfo *) 0 ;
  int arg2 ;
  bool arg3 ;
  bool arg4 ;
  bool result;
  
  arg1 = (lldb::SBLaunchInfo *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  result = (bool)(arg1)->AddSuppressFileAction(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SBLaunchInfo(void * jarg1) {
  lldb::SBLaunchInfo *arg1 = (lldb::SBLaunchInfo *) 0 ;
  
  arg1 = (lldb::SBLaunchInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SBAttachInfo__SWIG_0() {
  void * jresult ;
  lldb::SBAttachInfo *result = 0 ;
  
  result = (lldb::SBAttachInfo *)new lldb::SBAttachInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SBAttachInfo__SWIG_1(void * jarg1) {
  void * jresult ;
  lldb::pid_t arg1 ;
  lldb::pid_t *argp1 ;
  lldb::SBAttachInfo *result = 0 ;
  
  argp1 = (lldb::pid_t *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null lldb::pid_t", 0);
    return 0;
  }
  arg1 = *argp1; 
  result = (lldb::SBAttachInfo *)new lldb::SBAttachInfo(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SBAttachInfo__SWIG_2(char * jarg1, unsigned int jarg2) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  bool arg2 ;
  lldb::SBAttachInfo *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (lldb::SBAttachInfo *)new lldb::SBAttachInfo((char const *)arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SBAttachInfo__SWIG_3(void * jarg1) {
  void * jresult ;
  lldb::SBAttachInfo *arg1 = 0 ;
  lldb::SBAttachInfo *result = 0 ;
  
  arg1 = (lldb::SBAttachInfo *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBAttachInfo const & type is null", 0);
    return 0;
  } 
  result = (lldb::SBAttachInfo *)new lldb::SBAttachInfo((lldb::SBAttachInfo const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBAttachInfo_GetProcessID(void * jarg1) {
  void * jresult ;
  lldb::SBAttachInfo *arg1 = (lldb::SBAttachInfo *) 0 ;
  lldb::pid_t result;
  
  arg1 = (lldb::SBAttachInfo *)jarg1; 
  result = (arg1)->GetProcessID();
  jresult = new lldb::pid_t((const lldb::pid_t &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBAttachInfo_SetProcessID(void * jarg1, void * jarg2) {
  lldb::SBAttachInfo *arg1 = (lldb::SBAttachInfo *) 0 ;
  lldb::pid_t arg2 ;
  lldb::pid_t *argp2 ;
  
  arg1 = (lldb::SBAttachInfo *)jarg1; 
  argp2 = (lldb::pid_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null lldb::pid_t", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->SetProcessID(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBAttachInfo_SetExecutable__SWIG_0(void * jarg1, char * jarg2) {
  lldb::SBAttachInfo *arg1 = (lldb::SBAttachInfo *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (lldb::SBAttachInfo *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->SetExecutable((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBAttachInfo_SetExecutable__SWIG_1(void * jarg1, void * jarg2) {
  lldb::SBAttachInfo *arg1 = (lldb::SBAttachInfo *) 0 ;
  lldb::SBFileSpec arg2 ;
  lldb::SBFileSpec *argp2 ;
  
  arg1 = (lldb::SBAttachInfo *)jarg1; 
  argp2 = (lldb::SBFileSpec *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null lldb::SBFileSpec", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->SetExecutable(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBAttachInfo_GetWaitForLaunch(void * jarg1) {
  unsigned int jresult ;
  lldb::SBAttachInfo *arg1 = (lldb::SBAttachInfo *) 0 ;
  bool result;
  
  arg1 = (lldb::SBAttachInfo *)jarg1; 
  result = (bool)(arg1)->GetWaitForLaunch();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBAttachInfo_SetWaitForLaunch(void * jarg1, unsigned int jarg2) {
  lldb::SBAttachInfo *arg1 = (lldb::SBAttachInfo *) 0 ;
  bool arg2 ;
  
  arg1 = (lldb::SBAttachInfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetWaitForLaunch(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBAttachInfo_GetIgnoreExisting(void * jarg1) {
  unsigned int jresult ;
  lldb::SBAttachInfo *arg1 = (lldb::SBAttachInfo *) 0 ;
  bool result;
  
  arg1 = (lldb::SBAttachInfo *)jarg1; 
  result = (bool)(arg1)->GetIgnoreExisting();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBAttachInfo_SetIgnoreExisting(void * jarg1, unsigned int jarg2) {
  lldb::SBAttachInfo *arg1 = (lldb::SBAttachInfo *) 0 ;
  bool arg2 ;
  
  arg1 = (lldb::SBAttachInfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetIgnoreExisting(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBAttachInfo_GetResumeCount(void * jarg1) {
  void * jresult ;
  lldb::SBAttachInfo *arg1 = (lldb::SBAttachInfo *) 0 ;
  uint32_t result;
  
  arg1 = (lldb::SBAttachInfo *)jarg1; 
  result = (arg1)->GetResumeCount();
  jresult = new uint32_t((const uint32_t &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBAttachInfo_SetResumeCount(void * jarg1, void * jarg2) {
  lldb::SBAttachInfo *arg1 = (lldb::SBAttachInfo *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  arg1 = (lldb::SBAttachInfo *)jarg1; 
  argp2 = (uint32_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->SetResumeCount(arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SBAttachInfo_GetProcessPluginName(void * jarg1) {
  char * jresult ;
  lldb::SBAttachInfo *arg1 = (lldb::SBAttachInfo *) 0 ;
  char *result = 0 ;
  
  arg1 = (lldb::SBAttachInfo *)jarg1; 
  result = (char *)(arg1)->GetProcessPluginName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBAttachInfo_SetProcessPluginName(void * jarg1, char * jarg2) {
  lldb::SBAttachInfo *arg1 = (lldb::SBAttachInfo *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (lldb::SBAttachInfo *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->SetProcessPluginName((char const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBAttachInfo_GetUserID(void * jarg1) {
  void * jresult ;
  lldb::SBAttachInfo *arg1 = (lldb::SBAttachInfo *) 0 ;
  uint32_t result;
  
  arg1 = (lldb::SBAttachInfo *)jarg1; 
  result = (arg1)->GetUserID();
  jresult = new uint32_t((const uint32_t &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBAttachInfo_GetGroupID(void * jarg1) {
  void * jresult ;
  lldb::SBAttachInfo *arg1 = (lldb::SBAttachInfo *) 0 ;
  uint32_t result;
  
  arg1 = (lldb::SBAttachInfo *)jarg1; 
  result = (arg1)->GetGroupID();
  jresult = new uint32_t((const uint32_t &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBAttachInfo_UserIDIsValid(void * jarg1) {
  unsigned int jresult ;
  lldb::SBAttachInfo *arg1 = (lldb::SBAttachInfo *) 0 ;
  bool result;
  
  arg1 = (lldb::SBAttachInfo *)jarg1; 
  result = (bool)(arg1)->UserIDIsValid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBAttachInfo_GroupIDIsValid(void * jarg1) {
  unsigned int jresult ;
  lldb::SBAttachInfo *arg1 = (lldb::SBAttachInfo *) 0 ;
  bool result;
  
  arg1 = (lldb::SBAttachInfo *)jarg1; 
  result = (bool)(arg1)->GroupIDIsValid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBAttachInfo_SetUserID(void * jarg1, void * jarg2) {
  lldb::SBAttachInfo *arg1 = (lldb::SBAttachInfo *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  arg1 = (lldb::SBAttachInfo *)jarg1; 
  argp2 = (uint32_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->SetUserID(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBAttachInfo_SetGroupID(void * jarg1, void * jarg2) {
  lldb::SBAttachInfo *arg1 = (lldb::SBAttachInfo *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  arg1 = (lldb::SBAttachInfo *)jarg1; 
  argp2 = (uint32_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->SetGroupID(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBAttachInfo_GetEffectiveUserID(void * jarg1) {
  void * jresult ;
  lldb::SBAttachInfo *arg1 = (lldb::SBAttachInfo *) 0 ;
  uint32_t result;
  
  arg1 = (lldb::SBAttachInfo *)jarg1; 
  result = (arg1)->GetEffectiveUserID();
  jresult = new uint32_t((const uint32_t &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBAttachInfo_GetEffectiveGroupID(void * jarg1) {
  void * jresult ;
  lldb::SBAttachInfo *arg1 = (lldb::SBAttachInfo *) 0 ;
  uint32_t result;
  
  arg1 = (lldb::SBAttachInfo *)jarg1; 
  result = (arg1)->GetEffectiveGroupID();
  jresult = new uint32_t((const uint32_t &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBAttachInfo_EffectiveUserIDIsValid(void * jarg1) {
  unsigned int jresult ;
  lldb::SBAttachInfo *arg1 = (lldb::SBAttachInfo *) 0 ;
  bool result;
  
  arg1 = (lldb::SBAttachInfo *)jarg1; 
  result = (bool)(arg1)->EffectiveUserIDIsValid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBAttachInfo_EffectiveGroupIDIsValid(void * jarg1) {
  unsigned int jresult ;
  lldb::SBAttachInfo *arg1 = (lldb::SBAttachInfo *) 0 ;
  bool result;
  
  arg1 = (lldb::SBAttachInfo *)jarg1; 
  result = (bool)(arg1)->EffectiveGroupIDIsValid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBAttachInfo_SetEffectiveUserID(void * jarg1, void * jarg2) {
  lldb::SBAttachInfo *arg1 = (lldb::SBAttachInfo *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  arg1 = (lldb::SBAttachInfo *)jarg1; 
  argp2 = (uint32_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->SetEffectiveUserID(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBAttachInfo_SetEffectiveGroupID(void * jarg1, void * jarg2) {
  lldb::SBAttachInfo *arg1 = (lldb::SBAttachInfo *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  arg1 = (lldb::SBAttachInfo *)jarg1; 
  argp2 = (uint32_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->SetEffectiveGroupID(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBAttachInfo_GetParentProcessID(void * jarg1) {
  void * jresult ;
  lldb::SBAttachInfo *arg1 = (lldb::SBAttachInfo *) 0 ;
  lldb::pid_t result;
  
  arg1 = (lldb::SBAttachInfo *)jarg1; 
  result = (arg1)->GetParentProcessID();
  jresult = new lldb::pid_t((const lldb::pid_t &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBAttachInfo_SetParentProcessID(void * jarg1, void * jarg2) {
  lldb::SBAttachInfo *arg1 = (lldb::SBAttachInfo *) 0 ;
  lldb::pid_t arg2 ;
  lldb::pid_t *argp2 ;
  
  arg1 = (lldb::SBAttachInfo *)jarg1; 
  argp2 = (lldb::pid_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null lldb::pid_t", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->SetParentProcessID(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBAttachInfo_ParentProcessIDIsValid(void * jarg1) {
  unsigned int jresult ;
  lldb::SBAttachInfo *arg1 = (lldb::SBAttachInfo *) 0 ;
  bool result;
  
  arg1 = (lldb::SBAttachInfo *)jarg1; 
  result = (bool)(arg1)->ParentProcessIDIsValid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SBAttachInfo(void * jarg1) {
  lldb::SBAttachInfo *arg1 = (lldb::SBAttachInfo *) 0 ;
  
  arg1 = (lldb::SBAttachInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SBTarget_eBroadcastBitBreakpointChanged_get() {
  int jresult ;
  int result;
  
  result = (int)lldb::SBTarget::eBroadcastBitBreakpointChanged;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SBTarget_eBroadcastBitModulesLoaded_get() {
  int jresult ;
  int result;
  
  result = (int)lldb::SBTarget::eBroadcastBitModulesLoaded;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SBTarget_eBroadcastBitModulesUnloaded_get() {
  int jresult ;
  int result;
  
  result = (int)lldb::SBTarget::eBroadcastBitModulesUnloaded;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SBTarget__SWIG_0() {
  void * jresult ;
  lldb::SBTarget *result = 0 ;
  
  result = (lldb::SBTarget *)new lldb::SBTarget();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SBTarget__SWIG_1(void * jarg1) {
  void * jresult ;
  lldb::SBTarget *arg1 = 0 ;
  lldb::SBTarget *result = 0 ;
  
  arg1 = (lldb::SBTarget *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBTarget const & type is null", 0);
    return 0;
  } 
  result = (lldb::SBTarget *)new lldb::SBTarget((lldb::SBTarget const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SBTarget(void * jarg1) {
  lldb::SBTarget *arg1 = (lldb::SBTarget *) 0 ;
  
  arg1 = (lldb::SBTarget *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SBTarget_GetBroadcasterClassName() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)lldb::SBTarget::GetBroadcasterClassName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBTarget_IsValid(void * jarg1) {
  unsigned int jresult ;
  lldb::SBTarget *arg1 = (lldb::SBTarget *) 0 ;
  bool result;
  
  arg1 = (lldb::SBTarget *)jarg1; 
  result = (bool)((lldb::SBTarget const *)arg1)->IsValid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBTarget_GetProcess(void * jarg1) {
  void * jresult ;
  lldb::SBTarget *arg1 = (lldb::SBTarget *) 0 ;
  lldb::SBProcess result;
  
  arg1 = (lldb::SBTarget *)jarg1; 
  result = (arg1)->GetProcess();
  jresult = new lldb::SBProcess((const lldb::SBProcess &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBTarget_Launch__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, char * jarg5, char * jarg6, char * jarg7, char * jarg8, void * jarg9, unsigned int jarg10, void * jarg11) {
  void * jresult ;
  lldb::SBTarget *arg1 = (lldb::SBTarget *) 0 ;
  lldb::SBListener *arg2 = 0 ;
  char **arg3 = (char **) 0 ;
  char **arg4 = (char **) 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  uint32_t arg9 ;
  bool arg10 ;
  lldb::SBError *arg11 = 0 ;
  uint32_t *argp9 ;
  lldb::SBProcess result;
  
  arg1 = (lldb::SBTarget *)jarg1; 
  arg2 = (lldb::SBListener *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBListener & type is null", 0);
    return 0;
  } 
  arg3 = (char **)jarg3; 
  arg4 = (char **)jarg4; 
  arg5 = (char *)jarg5; 
  arg6 = (char *)jarg6; 
  arg7 = (char *)jarg7; 
  arg8 = (char *)jarg8; 
  argp9 = (uint32_t *)jarg9; 
  if (!argp9) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return 0;
  }
  arg9 = *argp9; 
  arg10 = jarg10 ? true : false; 
  arg11 = (lldb::SBError *)jarg11;
  if (!arg11) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBError & type is null", 0);
    return 0;
  } 
  result = (arg1)->Launch(*arg2,(char const **)arg3,(char const **)arg4,(char const *)arg5,(char const *)arg6,(char const *)arg7,(char const *)arg8,arg9,arg10,*arg11);
  jresult = new lldb::SBProcess((const lldb::SBProcess &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBTarget_LaunchSimple(void * jarg1, void * jarg2, void * jarg3, char * jarg4) {
  void * jresult ;
  lldb::SBTarget *arg1 = (lldb::SBTarget *) 0 ;
  char **arg2 = (char **) 0 ;
  char **arg3 = (char **) 0 ;
  char *arg4 = (char *) 0 ;
  lldb::SBProcess result;
  
  arg1 = (lldb::SBTarget *)jarg1; 
  arg2 = (char **)jarg2; 
  arg3 = (char **)jarg3; 
  arg4 = (char *)jarg4; 
  result = (arg1)->LaunchSimple((char const **)arg2,(char const **)arg3,(char const *)arg4);
  jresult = new lldb::SBProcess((const lldb::SBProcess &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBTarget_Launch__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  lldb::SBTarget *arg1 = (lldb::SBTarget *) 0 ;
  lldb::SBLaunchInfo *arg2 = 0 ;
  lldb::SBError *arg3 = 0 ;
  lldb::SBProcess result;
  
  arg1 = (lldb::SBTarget *)jarg1; 
  arg2 = (lldb::SBLaunchInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBLaunchInfo & type is null", 0);
    return 0;
  } 
  arg3 = (lldb::SBError *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBError & type is null", 0);
    return 0;
  } 
  result = (arg1)->Launch(*arg2,*arg3);
  jresult = new lldb::SBProcess((const lldb::SBProcess &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBTarget_Attach(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  lldb::SBTarget *arg1 = (lldb::SBTarget *) 0 ;
  lldb::SBAttachInfo *arg2 = 0 ;
  lldb::SBError *arg3 = 0 ;
  lldb::SBProcess result;
  
  arg1 = (lldb::SBTarget *)jarg1; 
  arg2 = (lldb::SBAttachInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBAttachInfo & type is null", 0);
    return 0;
  } 
  arg3 = (lldb::SBError *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBError & type is null", 0);
    return 0;
  } 
  result = (arg1)->Attach(*arg2,*arg3);
  jresult = new lldb::SBProcess((const lldb::SBProcess &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBTarget_AttachToProcessWithID(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  lldb::SBTarget *arg1 = (lldb::SBTarget *) 0 ;
  lldb::SBListener *arg2 = 0 ;
  lldb::pid_t arg3 ;
  lldb::SBError *arg4 = 0 ;
  lldb::pid_t *argp3 ;
  lldb::SBProcess result;
  
  arg1 = (lldb::SBTarget *)jarg1; 
  arg2 = (lldb::SBListener *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBListener & type is null", 0);
    return 0;
  } 
  argp3 = (lldb::pid_t *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null lldb::pid_t", 0);
    return 0;
  }
  arg3 = *argp3; 
  arg4 = (lldb::SBError *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBError & type is null", 0);
    return 0;
  } 
  result = (arg1)->AttachToProcessWithID(*arg2,arg3,*arg4);
  jresult = new lldb::SBProcess((const lldb::SBProcess &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBTarget_AttachToProcessWithName(void * jarg1, void * jarg2, char * jarg3, unsigned int jarg4, void * jarg5) {
  void * jresult ;
  lldb::SBTarget *arg1 = (lldb::SBTarget *) 0 ;
  lldb::SBListener *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  bool arg4 ;
  lldb::SBError *arg5 = 0 ;
  lldb::SBProcess result;
  
  arg1 = (lldb::SBTarget *)jarg1; 
  arg2 = (lldb::SBListener *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBListener & type is null", 0);
    return 0;
  } 
  arg3 = (char *)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = (lldb::SBError *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBError & type is null", 0);
    return 0;
  } 
  result = (arg1)->AttachToProcessWithName(*arg2,(char const *)arg3,arg4,*arg5);
  jresult = new lldb::SBProcess((const lldb::SBProcess &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBTarget_ConnectRemote(void * jarg1, void * jarg2, char * jarg3, char * jarg4, void * jarg5) {
  void * jresult ;
  lldb::SBTarget *arg1 = (lldb::SBTarget *) 0 ;
  lldb::SBListener *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  lldb::SBError *arg5 = 0 ;
  lldb::SBProcess result;
  
  arg1 = (lldb::SBTarget *)jarg1; 
  arg2 = (lldb::SBListener *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBListener & type is null", 0);
    return 0;
  } 
  arg3 = (char *)jarg3; 
  arg4 = (char *)jarg4; 
  arg5 = (lldb::SBError *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBError & type is null", 0);
    return 0;
  } 
  result = (arg1)->ConnectRemote(*arg2,(char const *)arg3,(char const *)arg4,*arg5);
  jresult = new lldb::SBProcess((const lldb::SBProcess &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBTarget_GetExecutable(void * jarg1) {
  void * jresult ;
  lldb::SBTarget *arg1 = (lldb::SBTarget *) 0 ;
  lldb::SBFileSpec result;
  
  arg1 = (lldb::SBTarget *)jarg1; 
  result = (arg1)->GetExecutable();
  jresult = new lldb::SBFileSpec((const lldb::SBFileSpec &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBTarget_AddModule__SWIG_0(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  lldb::SBTarget *arg1 = (lldb::SBTarget *) 0 ;
  lldb::SBModule *arg2 = 0 ;
  bool result;
  
  arg1 = (lldb::SBTarget *)jarg1; 
  arg2 = (lldb::SBModule *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBModule & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->AddModule(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBTarget_AddModule__SWIG_1(void * jarg1, char * jarg2, char * jarg3, char * jarg4) {
  void * jresult ;
  lldb::SBTarget *arg1 = (lldb::SBTarget *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  lldb::SBModule result;
  
  arg1 = (lldb::SBTarget *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (char *)jarg4; 
  result = (arg1)->AddModule((char const *)arg2,(char const *)arg3,(char const *)arg4);
  jresult = new lldb::SBModule((const lldb::SBModule &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBTarget_AddModule__SWIG_2(void * jarg1, char * jarg2, char * jarg3, char * jarg4, char * jarg5) {
  void * jresult ;
  lldb::SBTarget *arg1 = (lldb::SBTarget *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  lldb::SBModule result;
  
  arg1 = (lldb::SBTarget *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (char *)jarg4; 
  arg5 = (char *)jarg5; 
  result = (arg1)->AddModule((char const *)arg2,(char const *)arg3,(char const *)arg4,(char const *)arg5);
  jresult = new lldb::SBModule((const lldb::SBModule &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBTarget_GetNumModules(void * jarg1) {
  void * jresult ;
  lldb::SBTarget *arg1 = (lldb::SBTarget *) 0 ;
  uint32_t result;
  
  arg1 = (lldb::SBTarget *)jarg1; 
  result = ((lldb::SBTarget const *)arg1)->GetNumModules();
  jresult = new uint32_t((const uint32_t &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBTarget_GetModuleAtIndex(void * jarg1, void * jarg2) {
  void * jresult ;
  lldb::SBTarget *arg1 = (lldb::SBTarget *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  lldb::SBModule result;
  
  arg1 = (lldb::SBTarget *)jarg1; 
  argp2 = (uint32_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->GetModuleAtIndex(arg2);
  jresult = new lldb::SBModule((const lldb::SBModule &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBTarget_RemoveModule(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  lldb::SBTarget *arg1 = (lldb::SBTarget *) 0 ;
  lldb::SBModule arg2 ;
  lldb::SBModule *argp2 ;
  bool result;
  
  arg1 = (lldb::SBTarget *)jarg1; 
  argp2 = (lldb::SBModule *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null lldb::SBModule", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)(arg1)->RemoveModule(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBTarget_GetDebugger(void * jarg1) {
  void * jresult ;
  lldb::SBTarget *arg1 = (lldb::SBTarget *) 0 ;
  lldb::SBDebugger result;
  
  arg1 = (lldb::SBTarget *)jarg1; 
  result = ((lldb::SBTarget const *)arg1)->GetDebugger();
  jresult = new lldb::SBDebugger((const lldb::SBDebugger &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBTarget_FindModule(void * jarg1, void * jarg2) {
  void * jresult ;
  lldb::SBTarget *arg1 = (lldb::SBTarget *) 0 ;
  lldb::SBFileSpec *arg2 = 0 ;
  lldb::SBModule result;
  
  arg1 = (lldb::SBTarget *)jarg1; 
  arg2 = (lldb::SBFileSpec *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBFileSpec const & type is null", 0);
    return 0;
  } 
  result = (arg1)->FindModule((lldb::SBFileSpec const &)*arg2);
  jresult = new lldb::SBModule((const lldb::SBModule &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SBTarget_GetByteOrder(void * jarg1) {
  int jresult ;
  lldb::SBTarget *arg1 = (lldb::SBTarget *) 0 ;
  lldb::ByteOrder result;
  
  arg1 = (lldb::SBTarget *)jarg1; 
  result = (lldb::ByteOrder)(arg1)->GetByteOrder();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBTarget_GetAddressByteSize(void * jarg1) {
  void * jresult ;
  lldb::SBTarget *arg1 = (lldb::SBTarget *) 0 ;
  uint32_t result;
  
  arg1 = (lldb::SBTarget *)jarg1; 
  result = (arg1)->GetAddressByteSize();
  jresult = new uint32_t((const uint32_t &)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SBTarget_GetTriple(void * jarg1) {
  char * jresult ;
  lldb::SBTarget *arg1 = (lldb::SBTarget *) 0 ;
  char *result = 0 ;
  
  arg1 = (lldb::SBTarget *)jarg1; 
  result = (char *)(arg1)->GetTriple();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBTarget_SetSectionLoadAddress(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  lldb::SBTarget *arg1 = (lldb::SBTarget *) 0 ;
  lldb::SBSection arg2 ;
  lldb::addr_t arg3 ;
  lldb::SBSection *argp2 ;
  lldb::addr_t *argp3 ;
  lldb::SBError result;
  
  arg1 = (lldb::SBTarget *)jarg1; 
  argp2 = (lldb::SBSection *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null lldb::SBSection", 0);
    return 0;
  }
  arg2 = *argp2; 
  argp3 = (lldb::addr_t *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null lldb::addr_t", 0);
    return 0;
  }
  arg3 = *argp3; 
  result = (arg1)->SetSectionLoadAddress(arg2,arg3);
  jresult = new lldb::SBError((const lldb::SBError &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBTarget_ClearSectionLoadAddress(void * jarg1, void * jarg2) {
  void * jresult ;
  lldb::SBTarget *arg1 = (lldb::SBTarget *) 0 ;
  lldb::SBSection arg2 ;
  lldb::SBSection *argp2 ;
  lldb::SBError result;
  
  arg1 = (lldb::SBTarget *)jarg1; 
  argp2 = (lldb::SBSection *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null lldb::SBSection", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->ClearSectionLoadAddress(arg2);
  jresult = new lldb::SBError((const lldb::SBError &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBTarget_SetModuleLoadAddress(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  lldb::SBTarget *arg1 = (lldb::SBTarget *) 0 ;
  lldb::SBModule arg2 ;
  int64_t arg3 ;
  lldb::SBModule *argp2 ;
  int64_t *argp3 ;
  lldb::SBError result;
  
  arg1 = (lldb::SBTarget *)jarg1; 
  argp2 = (lldb::SBModule *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null lldb::SBModule", 0);
    return 0;
  }
  arg2 = *argp2; 
  argp3 = (int64_t *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null int64_t", 0);
    return 0;
  }
  arg3 = *argp3; 
  result = (arg1)->SetModuleLoadAddress(arg2,arg3);
  jresult = new lldb::SBError((const lldb::SBError &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBTarget_ClearModuleLoadAddress(void * jarg1, void * jarg2) {
  void * jresult ;
  lldb::SBTarget *arg1 = (lldb::SBTarget *) 0 ;
  lldb::SBModule arg2 ;
  lldb::SBModule *argp2 ;
  lldb::SBError result;
  
  arg1 = (lldb::SBTarget *)jarg1; 
  argp2 = (lldb::SBModule *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null lldb::SBModule", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->ClearModuleLoadAddress(arg2);
  jresult = new lldb::SBError((const lldb::SBError &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBTarget_FindFunctions__SWIG_0(void * jarg1, char * jarg2, void * jarg3) {
  void * jresult ;
  lldb::SBTarget *arg1 = (lldb::SBTarget *) 0 ;
  char *arg2 = (char *) 0 ;
  uint32_t arg3 ;
  uint32_t *argp3 ;
  lldb::SBSymbolContextList result;
  
  arg1 = (lldb::SBTarget *)jarg1; 
  arg2 = (char *)jarg2; 
  argp3 = (uint32_t *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return 0;
  }
  arg3 = *argp3; 
  result = (arg1)->FindFunctions((char const *)arg2,arg3);
  jresult = new lldb::SBSymbolContextList((const lldb::SBSymbolContextList &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBTarget_FindFunctions__SWIG_1(void * jarg1, char * jarg2) {
  void * jresult ;
  lldb::SBTarget *arg1 = (lldb::SBTarget *) 0 ;
  char *arg2 = (char *) 0 ;
  lldb::SBSymbolContextList result;
  
  arg1 = (lldb::SBTarget *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (arg1)->FindFunctions((char const *)arg2);
  jresult = new lldb::SBSymbolContextList((const lldb::SBSymbolContextList &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBTarget_FindFirstType(void * jarg1, char * jarg2) {
  void * jresult ;
  lldb::SBTarget *arg1 = (lldb::SBTarget *) 0 ;
  char *arg2 = (char *) 0 ;
  lldb::SBType result;
  
  arg1 = (lldb::SBTarget *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (arg1)->FindFirstType((char const *)arg2);
  jresult = new lldb::SBType((const lldb::SBType &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBTarget_FindTypes(void * jarg1, char * jarg2) {
  void * jresult ;
  lldb::SBTarget *arg1 = (lldb::SBTarget *) 0 ;
  char *arg2 = (char *) 0 ;
  lldb::SBTypeList result;
  
  arg1 = (lldb::SBTarget *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (arg1)->FindTypes((char const *)arg2);
  jresult = new lldb::SBTypeList((const lldb::SBTypeList &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBTarget_GetSourceManager(void * jarg1) {
  void * jresult ;
  lldb::SBTarget *arg1 = (lldb::SBTarget *) 0 ;
  SwigValueWrapper< lldb::SBSourceManager > result;
  
  arg1 = (lldb::SBTarget *)jarg1; 
  result = (arg1)->GetSourceManager();
  jresult = new lldb::SBSourceManager((const lldb::SBSourceManager &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBTarget_FindGlobalVariables(void * jarg1, char * jarg2, void * jarg3) {
  void * jresult ;
  lldb::SBTarget *arg1 = (lldb::SBTarget *) 0 ;
  char *arg2 = (char *) 0 ;
  uint32_t arg3 ;
  uint32_t *argp3 ;
  lldb::SBValueList result;
  
  arg1 = (lldb::SBTarget *)jarg1; 
  arg2 = (char *)jarg2; 
  argp3 = (uint32_t *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return 0;
  }
  arg3 = *argp3; 
  result = (arg1)->FindGlobalVariables((char const *)arg2,arg3);
  jresult = new lldb::SBValueList((const lldb::SBValueList &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBTarget_Clear(void * jarg1) {
  lldb::SBTarget *arg1 = (lldb::SBTarget *) 0 ;
  
  arg1 = (lldb::SBTarget *)jarg1; 
  (arg1)->Clear();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBTarget_ResolveLoadAddress(void * jarg1, void * jarg2) {
  void * jresult ;
  lldb::SBTarget *arg1 = (lldb::SBTarget *) 0 ;
  lldb::addr_t arg2 ;
  lldb::addr_t *argp2 ;
  lldb::SBAddress result;
  
  arg1 = (lldb::SBTarget *)jarg1; 
  argp2 = (lldb::addr_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null lldb::addr_t", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->ResolveLoadAddress(arg2);
  jresult = new lldb::SBAddress((const lldb::SBAddress &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBTarget_ResolveSymbolContextForAddress(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  lldb::SBTarget *arg1 = (lldb::SBTarget *) 0 ;
  lldb::SBAddress *arg2 = 0 ;
  uint32_t arg3 ;
  uint32_t *argp3 ;
  lldb::SBSymbolContext result;
  
  arg1 = (lldb::SBTarget *)jarg1; 
  arg2 = (lldb::SBAddress *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBAddress const & type is null", 0);
    return 0;
  } 
  argp3 = (uint32_t *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return 0;
  }
  arg3 = *argp3; 
  result = (arg1)->ResolveSymbolContextForAddress((lldb::SBAddress const &)*arg2,arg3);
  jresult = new lldb::SBSymbolContext((const lldb::SBSymbolContext &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBTarget_BreakpointCreateByLocation__SWIG_0(void * jarg1, char * jarg2, void * jarg3) {
  void * jresult ;
  lldb::SBTarget *arg1 = (lldb::SBTarget *) 0 ;
  char *arg2 = (char *) 0 ;
  uint32_t arg3 ;
  uint32_t *argp3 ;
  lldb::SBBreakpoint result;
  
  arg1 = (lldb::SBTarget *)jarg1; 
  arg2 = (char *)jarg2; 
  argp3 = (uint32_t *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return 0;
  }
  arg3 = *argp3; 
  result = (arg1)->BreakpointCreateByLocation((char const *)arg2,arg3);
  jresult = new lldb::SBBreakpoint((const lldb::SBBreakpoint &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBTarget_BreakpointCreateByLocation__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  lldb::SBTarget *arg1 = (lldb::SBTarget *) 0 ;
  lldb::SBFileSpec *arg2 = 0 ;
  uint32_t arg3 ;
  uint32_t *argp3 ;
  lldb::SBBreakpoint result;
  
  arg1 = (lldb::SBTarget *)jarg1; 
  arg2 = (lldb::SBFileSpec *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBFileSpec const & type is null", 0);
    return 0;
  } 
  argp3 = (uint32_t *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return 0;
  }
  arg3 = *argp3; 
  result = (arg1)->BreakpointCreateByLocation((lldb::SBFileSpec const &)*arg2,arg3);
  jresult = new lldb::SBBreakpoint((const lldb::SBBreakpoint &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBTarget_BreakpointCreateByName__SWIG_0(void * jarg1, char * jarg2, char * jarg3) {
  void * jresult ;
  lldb::SBTarget *arg1 = (lldb::SBTarget *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  lldb::SBBreakpoint result;
  
  arg1 = (lldb::SBTarget *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  result = (arg1)->BreakpointCreateByName((char const *)arg2,(char const *)arg3);
  jresult = new lldb::SBBreakpoint((const lldb::SBBreakpoint &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBTarget_BreakpointCreateByName__SWIG_1(void * jarg1, char * jarg2) {
  void * jresult ;
  lldb::SBTarget *arg1 = (lldb::SBTarget *) 0 ;
  char *arg2 = (char *) 0 ;
  lldb::SBBreakpoint result;
  
  arg1 = (lldb::SBTarget *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (arg1)->BreakpointCreateByName((char const *)arg2);
  jresult = new lldb::SBBreakpoint((const lldb::SBBreakpoint &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBTarget_BreakpointCreateByName__SWIG_2(void * jarg1, char * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  void * jresult ;
  lldb::SBTarget *arg1 = (lldb::SBTarget *) 0 ;
  char *arg2 = (char *) 0 ;
  uint32_t arg3 ;
  lldb::SBFileSpecList *arg4 = 0 ;
  lldb::SBFileSpecList *arg5 = 0 ;
  uint32_t *argp3 ;
  lldb::SBBreakpoint result;
  
  arg1 = (lldb::SBTarget *)jarg1; 
  arg2 = (char *)jarg2; 
  argp3 = (uint32_t *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return 0;
  }
  arg3 = *argp3; 
  arg4 = (lldb::SBFileSpecList *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBFileSpecList const & type is null", 0);
    return 0;
  } 
  arg5 = (lldb::SBFileSpecList *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBFileSpecList const & type is null", 0);
    return 0;
  } 
  result = (arg1)->BreakpointCreateByName((char const *)arg2,arg3,(lldb::SBFileSpecList const &)*arg4,(lldb::SBFileSpecList const &)*arg5);
  jresult = new lldb::SBBreakpoint((const lldb::SBBreakpoint &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBTarget_BreakpointCreateByNames(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6) {
  void * jresult ;
  lldb::SBTarget *arg1 = (lldb::SBTarget *) 0 ;
  char **arg2 ;
  uint32_t arg3 ;
  uint32_t arg4 ;
  lldb::SBFileSpecList *arg5 = 0 ;
  lldb::SBFileSpecList *arg6 = 0 ;
  uint32_t *argp3 ;
  uint32_t *argp4 ;
  lldb::SBBreakpoint result;
  
  arg1 = (lldb::SBTarget *)jarg1; 
  arg2 = (char **)jarg2; 
  argp3 = (uint32_t *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return 0;
  }
  arg3 = *argp3; 
  argp4 = (uint32_t *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return 0;
  }
  arg4 = *argp4; 
  arg5 = (lldb::SBFileSpecList *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBFileSpecList const & type is null", 0);
    return 0;
  } 
  arg6 = (lldb::SBFileSpecList *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBFileSpecList const & type is null", 0);
    return 0;
  } 
  result = (arg1)->BreakpointCreateByNames((char const *(*))arg2,arg3,arg4,(lldb::SBFileSpecList const &)*arg5,(lldb::SBFileSpecList const &)*arg6);
  jresult = new lldb::SBBreakpoint((const lldb::SBBreakpoint &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBTarget_BreakpointCreateByRegex__SWIG_0(void * jarg1, char * jarg2, char * jarg3) {
  void * jresult ;
  lldb::SBTarget *arg1 = (lldb::SBTarget *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  lldb::SBBreakpoint result;
  
  arg1 = (lldb::SBTarget *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  result = (arg1)->BreakpointCreateByRegex((char const *)arg2,(char const *)arg3);
  jresult = new lldb::SBBreakpoint((const lldb::SBBreakpoint &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBTarget_BreakpointCreateByRegex__SWIG_1(void * jarg1, char * jarg2) {
  void * jresult ;
  lldb::SBTarget *arg1 = (lldb::SBTarget *) 0 ;
  char *arg2 = (char *) 0 ;
  lldb::SBBreakpoint result;
  
  arg1 = (lldb::SBTarget *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (arg1)->BreakpointCreateByRegex((char const *)arg2);
  jresult = new lldb::SBBreakpoint((const lldb::SBBreakpoint &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBTarget_BreakpointCreateBySourceRegex__SWIG_0(void * jarg1, char * jarg2, void * jarg3, char * jarg4) {
  void * jresult ;
  lldb::SBTarget *arg1 = (lldb::SBTarget *) 0 ;
  char *arg2 = (char *) 0 ;
  lldb::SBFileSpec *arg3 = 0 ;
  char *arg4 = (char *) 0 ;
  lldb::SBBreakpoint result;
  
  arg1 = (lldb::SBTarget *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (lldb::SBFileSpec *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBFileSpec const & type is null", 0);
    return 0;
  } 
  arg4 = (char *)jarg4; 
  result = (arg1)->BreakpointCreateBySourceRegex((char const *)arg2,(lldb::SBFileSpec const &)*arg3,(char const *)arg4);
  jresult = new lldb::SBBreakpoint((const lldb::SBBreakpoint &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBTarget_BreakpointCreateBySourceRegex__SWIG_1(void * jarg1, char * jarg2, void * jarg3) {
  void * jresult ;
  lldb::SBTarget *arg1 = (lldb::SBTarget *) 0 ;
  char *arg2 = (char *) 0 ;
  lldb::SBFileSpec *arg3 = 0 ;
  lldb::SBBreakpoint result;
  
  arg1 = (lldb::SBTarget *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (lldb::SBFileSpec *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBFileSpec const & type is null", 0);
    return 0;
  } 
  result = (arg1)->BreakpointCreateBySourceRegex((char const *)arg2,(lldb::SBFileSpec const &)*arg3);
  jresult = new lldb::SBBreakpoint((const lldb::SBBreakpoint &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBTarget_BreakpointCreateForException(void * jarg1, int jarg2, unsigned int jarg3, unsigned int jarg4) {
  void * jresult ;
  lldb::SBTarget *arg1 = (lldb::SBTarget *) 0 ;
  lldb::LanguageType arg2 ;
  bool arg3 ;
  bool arg4 ;
  lldb::SBBreakpoint result;
  
  arg1 = (lldb::SBTarget *)jarg1; 
  arg2 = (lldb::LanguageType)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  result = (arg1)->BreakpointCreateForException(arg2,arg3,arg4);
  jresult = new lldb::SBBreakpoint((const lldb::SBBreakpoint &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBTarget_BreakpointCreateByAddress(void * jarg1, void * jarg2) {
  void * jresult ;
  lldb::SBTarget *arg1 = (lldb::SBTarget *) 0 ;
  lldb::addr_t arg2 ;
  lldb::addr_t *argp2 ;
  lldb::SBBreakpoint result;
  
  arg1 = (lldb::SBTarget *)jarg1; 
  argp2 = (lldb::addr_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null lldb::addr_t", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->BreakpointCreateByAddress(arg2);
  jresult = new lldb::SBBreakpoint((const lldb::SBBreakpoint &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBTarget_GetNumBreakpoints(void * jarg1) {
  void * jresult ;
  lldb::SBTarget *arg1 = (lldb::SBTarget *) 0 ;
  uint32_t result;
  
  arg1 = (lldb::SBTarget *)jarg1; 
  result = ((lldb::SBTarget const *)arg1)->GetNumBreakpoints();
  jresult = new uint32_t((const uint32_t &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBTarget_GetBreakpointAtIndex(void * jarg1, void * jarg2) {
  void * jresult ;
  lldb::SBTarget *arg1 = (lldb::SBTarget *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  lldb::SBBreakpoint result;
  
  arg1 = (lldb::SBTarget *)jarg1; 
  argp2 = (uint32_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = ((lldb::SBTarget const *)arg1)->GetBreakpointAtIndex(arg2);
  jresult = new lldb::SBBreakpoint((const lldb::SBBreakpoint &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBTarget_BreakpointDelete(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  lldb::SBTarget *arg1 = (lldb::SBTarget *) 0 ;
  lldb::break_id_t arg2 ;
  lldb::break_id_t *argp2 ;
  bool result;
  
  arg1 = (lldb::SBTarget *)jarg1; 
  argp2 = (lldb::break_id_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null lldb::break_id_t", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)(arg1)->BreakpointDelete(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBTarget_FindBreakpointByID(void * jarg1, void * jarg2) {
  void * jresult ;
  lldb::SBTarget *arg1 = (lldb::SBTarget *) 0 ;
  lldb::break_id_t arg2 ;
  lldb::break_id_t *argp2 ;
  lldb::SBBreakpoint result;
  
  arg1 = (lldb::SBTarget *)jarg1; 
  argp2 = (lldb::break_id_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null lldb::break_id_t", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->FindBreakpointByID(arg2);
  jresult = new lldb::SBBreakpoint((const lldb::SBBreakpoint &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBTarget_EnableAllBreakpoints(void * jarg1) {
  unsigned int jresult ;
  lldb::SBTarget *arg1 = (lldb::SBTarget *) 0 ;
  bool result;
  
  arg1 = (lldb::SBTarget *)jarg1; 
  result = (bool)(arg1)->EnableAllBreakpoints();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBTarget_DisableAllBreakpoints(void * jarg1) {
  unsigned int jresult ;
  lldb::SBTarget *arg1 = (lldb::SBTarget *) 0 ;
  bool result;
  
  arg1 = (lldb::SBTarget *)jarg1; 
  result = (bool)(arg1)->DisableAllBreakpoints();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBTarget_DeleteAllBreakpoints(void * jarg1) {
  unsigned int jresult ;
  lldb::SBTarget *arg1 = (lldb::SBTarget *) 0 ;
  bool result;
  
  arg1 = (lldb::SBTarget *)jarg1; 
  result = (bool)(arg1)->DeleteAllBreakpoints();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBTarget_GetNumWatchpoints(void * jarg1) {
  void * jresult ;
  lldb::SBTarget *arg1 = (lldb::SBTarget *) 0 ;
  uint32_t result;
  
  arg1 = (lldb::SBTarget *)jarg1; 
  result = ((lldb::SBTarget const *)arg1)->GetNumWatchpoints();
  jresult = new uint32_t((const uint32_t &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBTarget_GetWatchpointAtIndex(void * jarg1, void * jarg2) {
  void * jresult ;
  lldb::SBTarget *arg1 = (lldb::SBTarget *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  lldb::SBWatchpoint result;
  
  arg1 = (lldb::SBTarget *)jarg1; 
  argp2 = (uint32_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = ((lldb::SBTarget const *)arg1)->GetWatchpointAtIndex(arg2);
  jresult = new lldb::SBWatchpoint((const lldb::SBWatchpoint &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBTarget_DeleteWatchpoint(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  lldb::SBTarget *arg1 = (lldb::SBTarget *) 0 ;
  lldb::watch_id_t arg2 ;
  lldb::watch_id_t *argp2 ;
  bool result;
  
  arg1 = (lldb::SBTarget *)jarg1; 
  argp2 = (lldb::watch_id_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null lldb::watch_id_t", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)(arg1)->DeleteWatchpoint(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBTarget_FindWatchpointByID(void * jarg1, void * jarg2) {
  void * jresult ;
  lldb::SBTarget *arg1 = (lldb::SBTarget *) 0 ;
  lldb::watch_id_t arg2 ;
  lldb::watch_id_t *argp2 ;
  lldb::SBWatchpoint result;
  
  arg1 = (lldb::SBTarget *)jarg1; 
  argp2 = (lldb::watch_id_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null lldb::watch_id_t", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->FindWatchpointByID(arg2);
  jresult = new lldb::SBWatchpoint((const lldb::SBWatchpoint &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBTarget_EnableAllWatchpoints(void * jarg1) {
  unsigned int jresult ;
  lldb::SBTarget *arg1 = (lldb::SBTarget *) 0 ;
  bool result;
  
  arg1 = (lldb::SBTarget *)jarg1; 
  result = (bool)(arg1)->EnableAllWatchpoints();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBTarget_DisableAllWatchpoints(void * jarg1) {
  unsigned int jresult ;
  lldb::SBTarget *arg1 = (lldb::SBTarget *) 0 ;
  bool result;
  
  arg1 = (lldb::SBTarget *)jarg1; 
  result = (bool)(arg1)->DisableAllWatchpoints();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBTarget_DeleteAllWatchpoints(void * jarg1) {
  unsigned int jresult ;
  lldb::SBTarget *arg1 = (lldb::SBTarget *) 0 ;
  bool result;
  
  arg1 = (lldb::SBTarget *)jarg1; 
  result = (bool)(arg1)->DeleteAllWatchpoints();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBTarget_WatchAddress(void * jarg1, void * jarg2, unsigned long jarg3, unsigned int jarg4, unsigned int jarg5, void * jarg6) {
  void * jresult ;
  lldb::SBTarget *arg1 = (lldb::SBTarget *) 0 ;
  lldb::addr_t arg2 ;
  size_t arg3 ;
  bool arg4 ;
  bool arg5 ;
  lldb::SBError *arg6 = 0 ;
  lldb::addr_t *argp2 ;
  lldb::SBWatchpoint result;
  
  arg1 = (lldb::SBTarget *)jarg1; 
  argp2 = (lldb::addr_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null lldb::addr_t", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (size_t)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  arg6 = (lldb::SBError *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBError & type is null", 0);
    return 0;
  } 
  result = (arg1)->WatchAddress(arg2,arg3,arg4,arg5,*arg6);
  jresult = new lldb::SBWatchpoint((const lldb::SBWatchpoint &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBTarget_GetBroadcaster(void * jarg1) {
  void * jresult ;
  lldb::SBTarget *arg1 = (lldb::SBTarget *) 0 ;
  lldb::SBBroadcaster result;
  
  arg1 = (lldb::SBTarget *)jarg1; 
  result = ((lldb::SBTarget const *)arg1)->GetBroadcaster();
  jresult = new lldb::SBBroadcaster((const lldb::SBBroadcaster &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBTarget_ReadInstructions(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  lldb::SBTarget *arg1 = (lldb::SBTarget *) 0 ;
  lldb::SBAddress arg2 ;
  uint32_t arg3 ;
  lldb::SBAddress *argp2 ;
  uint32_t *argp3 ;
  lldb::SBInstructionList result;
  
  arg1 = (lldb::SBTarget *)jarg1; 
  argp2 = (lldb::SBAddress *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null lldb::SBAddress", 0);
    return 0;
  }
  arg2 = *argp2; 
  argp3 = (uint32_t *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return 0;
  }
  arg3 = *argp3; 
  result = (arg1)->ReadInstructions(arg2,arg3);
  jresult = new lldb::SBInstructionList((const lldb::SBInstructionList &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBTarget_GetInstructions(void * jarg1, void * jarg2, void* jarg3, unsigned long jarg4) {
  void * jresult ;
  lldb::SBTarget *arg1 = (lldb::SBTarget *) 0 ;
  lldb::SBAddress arg2 ;
  void *arg3 = (void *) 0 ;
  size_t arg4 ;
  lldb::SBAddress *argp2 ;
  lldb::SBInstructionList result;
  
  arg1 = (lldb::SBTarget *)jarg1; 
  argp2 = (lldb::SBAddress *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null lldb::SBAddress", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (void *)jarg3; /* IntPtr */ 
  arg4 = (size_t)jarg4; 
  result = (arg1)->GetInstructions(arg2,(void const *)arg3,arg4);
  jresult = new lldb::SBInstructionList((const lldb::SBInstructionList &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBTarget_GetDescription(void * jarg1, void * jarg2, int jarg3) {
  unsigned int jresult ;
  lldb::SBTarget *arg1 = (lldb::SBTarget *) 0 ;
  lldb::SBStream *arg2 = 0 ;
  lldb::DescriptionLevel arg3 ;
  bool result;
  
  arg1 = (lldb::SBTarget *)jarg1; 
  arg2 = (lldb::SBStream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBStream & type is null", 0);
    return 0;
  } 
  arg3 = (lldb::DescriptionLevel)jarg3; 
  result = (bool)(arg1)->GetDescription(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SBThread__SWIG_0() {
  void * jresult ;
  lldb::SBThread *result = 0 ;
  
  result = (lldb::SBThread *)new lldb::SBThread();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SBThread__SWIG_1(void * jarg1) {
  void * jresult ;
  lldb::SBThread *arg1 = 0 ;
  lldb::SBThread *result = 0 ;
  
  arg1 = (lldb::SBThread *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBThread const & type is null", 0);
    return 0;
  } 
  result = (lldb::SBThread *)new lldb::SBThread((lldb::SBThread const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SBThread(void * jarg1) {
  lldb::SBThread *arg1 = (lldb::SBThread *) 0 ;
  
  arg1 = (lldb::SBThread *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBThread_IsValid(void * jarg1) {
  unsigned int jresult ;
  lldb::SBThread *arg1 = (lldb::SBThread *) 0 ;
  bool result;
  
  arg1 = (lldb::SBThread *)jarg1; 
  result = (bool)((lldb::SBThread const *)arg1)->IsValid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBThread_Clear(void * jarg1) {
  lldb::SBThread *arg1 = (lldb::SBThread *) 0 ;
  
  arg1 = (lldb::SBThread *)jarg1; 
  (arg1)->Clear();
}


SWIGEXPORT int SWIGSTDCALL CSharp_SBThread_GetStopReason(void * jarg1) {
  int jresult ;
  lldb::SBThread *arg1 = (lldb::SBThread *) 0 ;
  lldb::StopReason result;
  
  arg1 = (lldb::SBThread *)jarg1; 
  result = (lldb::StopReason)(arg1)->GetStopReason();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_SBThread_GetStopReasonDataCount(void * jarg1) {
  unsigned long jresult ;
  lldb::SBThread *arg1 = (lldb::SBThread *) 0 ;
  size_t result;
  
  arg1 = (lldb::SBThread *)jarg1; 
  result = (arg1)->GetStopReasonDataCount();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBThread_GetStopReasonDataAtIndex(void * jarg1, void * jarg2) {
  void * jresult ;
  lldb::SBThread *arg1 = (lldb::SBThread *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  uint64_t result;
  
  arg1 = (lldb::SBThread *)jarg1; 
  argp2 = (uint32_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->GetStopReasonDataAtIndex(arg2);
  jresult = new uint64_t((const uint64_t &)result); 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_SBThread_GetStopDescription(void * jarg1, char * jarg2, unsigned long jarg3) {
  unsigned long jresult ;
  lldb::SBThread *arg1 = (lldb::SBThread *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  size_t result;
  
  arg1 = (lldb::SBThread *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (size_t)jarg3; 
  result = (arg1)->GetStopDescription(arg2,arg3);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBThread_GetStopReturnValue(void * jarg1) {
  void * jresult ;
  lldb::SBThread *arg1 = (lldb::SBThread *) 0 ;
  lldb::SBValue result;
  
  arg1 = (lldb::SBThread *)jarg1; 
  result = (arg1)->GetStopReturnValue();
  jresult = new lldb::SBValue((const lldb::SBValue &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBThread_GetThreadID(void * jarg1) {
  void * jresult ;
  lldb::SBThread *arg1 = (lldb::SBThread *) 0 ;
  lldb::tid_t result;
  
  arg1 = (lldb::SBThread *)jarg1; 
  result = ((lldb::SBThread const *)arg1)->GetThreadID();
  jresult = new lldb::tid_t((const lldb::tid_t &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBThread_GetIndexID(void * jarg1) {
  void * jresult ;
  lldb::SBThread *arg1 = (lldb::SBThread *) 0 ;
  uint32_t result;
  
  arg1 = (lldb::SBThread *)jarg1; 
  result = ((lldb::SBThread const *)arg1)->GetIndexID();
  jresult = new uint32_t((const uint32_t &)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SBThread_GetName(void * jarg1) {
  char * jresult ;
  lldb::SBThread *arg1 = (lldb::SBThread *) 0 ;
  char *result = 0 ;
  
  arg1 = (lldb::SBThread *)jarg1; 
  result = (char *)((lldb::SBThread const *)arg1)->GetName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SBThread_GetQueueName(void * jarg1) {
  char * jresult ;
  lldb::SBThread *arg1 = (lldb::SBThread *) 0 ;
  char *result = 0 ;
  
  arg1 = (lldb::SBThread *)jarg1; 
  result = (char *)((lldb::SBThread const *)arg1)->GetQueueName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBThread_StepOver__SWIG_0(void * jarg1, int jarg2) {
  lldb::SBThread *arg1 = (lldb::SBThread *) 0 ;
  lldb::RunMode arg2 ;
  
  arg1 = (lldb::SBThread *)jarg1; 
  arg2 = (lldb::RunMode)jarg2; 
  (arg1)->StepOver(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBThread_StepOver__SWIG_1(void * jarg1) {
  lldb::SBThread *arg1 = (lldb::SBThread *) 0 ;
  
  arg1 = (lldb::SBThread *)jarg1; 
  (arg1)->StepOver();
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBThread_StepInto__SWIG_0(void * jarg1, int jarg2) {
  lldb::SBThread *arg1 = (lldb::SBThread *) 0 ;
  lldb::RunMode arg2 ;
  
  arg1 = (lldb::SBThread *)jarg1; 
  arg2 = (lldb::RunMode)jarg2; 
  (arg1)->StepInto(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBThread_StepInto__SWIG_1(void * jarg1) {
  lldb::SBThread *arg1 = (lldb::SBThread *) 0 ;
  
  arg1 = (lldb::SBThread *)jarg1; 
  (arg1)->StepInto();
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBThread_StepOut(void * jarg1) {
  lldb::SBThread *arg1 = (lldb::SBThread *) 0 ;
  
  arg1 = (lldb::SBThread *)jarg1; 
  (arg1)->StepOut();
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBThread_StepOutOfFrame(void * jarg1, void * jarg2) {
  lldb::SBThread *arg1 = (lldb::SBThread *) 0 ;
  lldb::SBFrame *arg2 = 0 ;
  
  arg1 = (lldb::SBThread *)jarg1; 
  arg2 = (lldb::SBFrame *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBFrame & type is null", 0);
    return ;
  } 
  (arg1)->StepOutOfFrame(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBThread_StepInstruction(void * jarg1, unsigned int jarg2) {
  lldb::SBThread *arg1 = (lldb::SBThread *) 0 ;
  bool arg2 ;
  
  arg1 = (lldb::SBThread *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->StepInstruction(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBThread_StepOverUntil(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  lldb::SBThread *arg1 = (lldb::SBThread *) 0 ;
  lldb::SBFrame *arg2 = 0 ;
  lldb::SBFileSpec *arg3 = 0 ;
  uint32_t arg4 ;
  uint32_t *argp4 ;
  lldb::SBError result;
  
  arg1 = (lldb::SBThread *)jarg1; 
  arg2 = (lldb::SBFrame *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBFrame & type is null", 0);
    return 0;
  } 
  arg3 = (lldb::SBFileSpec *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBFileSpec & type is null", 0);
    return 0;
  } 
  argp4 = (uint32_t *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return 0;
  }
  arg4 = *argp4; 
  result = (arg1)->StepOverUntil(*arg2,*arg3,arg4);
  jresult = new lldb::SBError((const lldb::SBError &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBThread_RunToAddress(void * jarg1, void * jarg2) {
  lldb::SBThread *arg1 = (lldb::SBThread *) 0 ;
  lldb::addr_t arg2 ;
  lldb::addr_t *argp2 ;
  
  arg1 = (lldb::SBThread *)jarg1; 
  argp2 = (lldb::addr_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null lldb::addr_t", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->RunToAddress(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBThread_Suspend(void * jarg1) {
  unsigned int jresult ;
  lldb::SBThread *arg1 = (lldb::SBThread *) 0 ;
  bool result;
  
  arg1 = (lldb::SBThread *)jarg1; 
  result = (bool)(arg1)->Suspend();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBThread_Resume(void * jarg1) {
  unsigned int jresult ;
  lldb::SBThread *arg1 = (lldb::SBThread *) 0 ;
  bool result;
  
  arg1 = (lldb::SBThread *)jarg1; 
  result = (bool)(arg1)->Resume();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBThread_IsSuspended(void * jarg1) {
  unsigned int jresult ;
  lldb::SBThread *arg1 = (lldb::SBThread *) 0 ;
  bool result;
  
  arg1 = (lldb::SBThread *)jarg1; 
  result = (bool)(arg1)->IsSuspended();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBThread_GetNumFrames(void * jarg1) {
  void * jresult ;
  lldb::SBThread *arg1 = (lldb::SBThread *) 0 ;
  uint32_t result;
  
  arg1 = (lldb::SBThread *)jarg1; 
  result = (arg1)->GetNumFrames();
  jresult = new uint32_t((const uint32_t &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBThread_GetFrameAtIndex(void * jarg1, void * jarg2) {
  void * jresult ;
  lldb::SBThread *arg1 = (lldb::SBThread *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  lldb::SBFrame result;
  
  arg1 = (lldb::SBThread *)jarg1; 
  argp2 = (uint32_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->GetFrameAtIndex(arg2);
  jresult = new lldb::SBFrame((const lldb::SBFrame &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBThread_GetSelectedFrame(void * jarg1) {
  void * jresult ;
  lldb::SBThread *arg1 = (lldb::SBThread *) 0 ;
  lldb::SBFrame result;
  
  arg1 = (lldb::SBThread *)jarg1; 
  result = (arg1)->GetSelectedFrame();
  jresult = new lldb::SBFrame((const lldb::SBFrame &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBThread_SetSelectedFrame(void * jarg1, void * jarg2) {
  void * jresult ;
  lldb::SBThread *arg1 = (lldb::SBThread *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  lldb::SBFrame result;
  
  arg1 = (lldb::SBThread *)jarg1; 
  argp2 = (uint32_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->SetSelectedFrame(arg2);
  jresult = new lldb::SBFrame((const lldb::SBFrame &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBThread_GetProcess(void * jarg1) {
  void * jresult ;
  lldb::SBThread *arg1 = (lldb::SBThread *) 0 ;
  lldb::SBProcess result;
  
  arg1 = (lldb::SBThread *)jarg1; 
  result = (arg1)->GetProcess();
  jresult = new lldb::SBProcess((const lldb::SBProcess &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBThread_GetDescription(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  lldb::SBThread *arg1 = (lldb::SBThread *) 0 ;
  lldb::SBStream *arg2 = 0 ;
  bool result;
  
  arg1 = (lldb::SBThread *)jarg1; 
  arg2 = (lldb::SBStream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBStream & type is null", 0);
    return 0;
  } 
  result = (bool)((lldb::SBThread const *)arg1)->GetDescription(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SBTypeMember__SWIG_0() {
  void * jresult ;
  lldb::SBTypeMember *result = 0 ;
  
  result = (lldb::SBTypeMember *)new lldb::SBTypeMember();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SBTypeMember__SWIG_1(void * jarg1) {
  void * jresult ;
  lldb::SBTypeMember *arg1 = 0 ;
  lldb::SBTypeMember *result = 0 ;
  
  arg1 = (lldb::SBTypeMember *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBTypeMember const & type is null", 0);
    return 0;
  } 
  result = (lldb::SBTypeMember *)new lldb::SBTypeMember((lldb::SBTypeMember const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SBTypeMember(void * jarg1) {
  lldb::SBTypeMember *arg1 = (lldb::SBTypeMember *) 0 ;
  
  arg1 = (lldb::SBTypeMember *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBTypeMember_IsValid(void * jarg1) {
  unsigned int jresult ;
  lldb::SBTypeMember *arg1 = (lldb::SBTypeMember *) 0 ;
  bool result;
  
  arg1 = (lldb::SBTypeMember *)jarg1; 
  result = (bool)((lldb::SBTypeMember const *)arg1)->IsValid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SBTypeMember_GetName(void * jarg1) {
  char * jresult ;
  lldb::SBTypeMember *arg1 = (lldb::SBTypeMember *) 0 ;
  char *result = 0 ;
  
  arg1 = (lldb::SBTypeMember *)jarg1; 
  result = (char *)(arg1)->GetName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBTypeMember_GetType(void * jarg1) {
  void * jresult ;
  lldb::SBTypeMember *arg1 = (lldb::SBTypeMember *) 0 ;
  lldb::SBType result;
  
  arg1 = (lldb::SBTypeMember *)jarg1; 
  result = (arg1)->GetType();
  jresult = new lldb::SBType((const lldb::SBType &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBTypeMember_GetOffsetInBytes(void * jarg1) {
  void * jresult ;
  lldb::SBTypeMember *arg1 = (lldb::SBTypeMember *) 0 ;
  uint64_t result;
  
  arg1 = (lldb::SBTypeMember *)jarg1; 
  result = (arg1)->GetOffsetInBytes();
  jresult = new uint64_t((const uint64_t &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBTypeMember_GetOffsetInBits(void * jarg1) {
  void * jresult ;
  lldb::SBTypeMember *arg1 = (lldb::SBTypeMember *) 0 ;
  uint64_t result;
  
  arg1 = (lldb::SBTypeMember *)jarg1; 
  result = (arg1)->GetOffsetInBits();
  jresult = new uint64_t((const uint64_t &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBTypeMember_IsBitfield(void * jarg1) {
  unsigned int jresult ;
  lldb::SBTypeMember *arg1 = (lldb::SBTypeMember *) 0 ;
  bool result;
  
  arg1 = (lldb::SBTypeMember *)jarg1; 
  result = (bool)(arg1)->IsBitfield();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBTypeMember_GetBitfieldSizeInBits(void * jarg1) {
  void * jresult ;
  lldb::SBTypeMember *arg1 = (lldb::SBTypeMember *) 0 ;
  uint32_t result;
  
  arg1 = (lldb::SBTypeMember *)jarg1; 
  result = (arg1)->GetBitfieldSizeInBits();
  jresult = new uint32_t((const uint32_t &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SBType__SWIG_0() {
  void * jresult ;
  lldb::SBType *result = 0 ;
  
  result = (lldb::SBType *)new lldb::SBType();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SBType__SWIG_1(void * jarg1) {
  void * jresult ;
  lldb::SBType *arg1 = 0 ;
  lldb::SBType *result = 0 ;
  
  arg1 = (lldb::SBType *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBType const & type is null", 0);
    return 0;
  } 
  result = (lldb::SBType *)new lldb::SBType((lldb::SBType const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SBType(void * jarg1) {
  lldb::SBType *arg1 = (lldb::SBType *) 0 ;
  
  arg1 = (lldb::SBType *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBType_IsValid(void * jarg1) {
  unsigned int jresult ;
  lldb::SBType *arg1 = (lldb::SBType *) 0 ;
  bool result;
  
  arg1 = (lldb::SBType *)jarg1; 
  result = (bool)(arg1)->IsValid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_SBType_GetByteSize(void * jarg1) {
  unsigned long jresult ;
  lldb::SBType *arg1 = (lldb::SBType *) 0 ;
  size_t result;
  
  arg1 = (lldb::SBType *)jarg1; 
  result = (arg1)->GetByteSize();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBType_IsPointerType(void * jarg1) {
  unsigned int jresult ;
  lldb::SBType *arg1 = (lldb::SBType *) 0 ;
  bool result;
  
  arg1 = (lldb::SBType *)jarg1; 
  result = (bool)(arg1)->IsPointerType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBType_IsReferenceType(void * jarg1) {
  unsigned int jresult ;
  lldb::SBType *arg1 = (lldb::SBType *) 0 ;
  bool result;
  
  arg1 = (lldb::SBType *)jarg1; 
  result = (bool)(arg1)->IsReferenceType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBType_GetPointerType(void * jarg1) {
  void * jresult ;
  lldb::SBType *arg1 = (lldb::SBType *) 0 ;
  lldb::SBType result;
  
  arg1 = (lldb::SBType *)jarg1; 
  result = (arg1)->GetPointerType();
  jresult = new lldb::SBType((const lldb::SBType &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBType_GetPointeeType(void * jarg1) {
  void * jresult ;
  lldb::SBType *arg1 = (lldb::SBType *) 0 ;
  lldb::SBType result;
  
  arg1 = (lldb::SBType *)jarg1; 
  result = (arg1)->GetPointeeType();
  jresult = new lldb::SBType((const lldb::SBType &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBType_GetReferenceType(void * jarg1) {
  void * jresult ;
  lldb::SBType *arg1 = (lldb::SBType *) 0 ;
  lldb::SBType result;
  
  arg1 = (lldb::SBType *)jarg1; 
  result = (arg1)->GetReferenceType();
  jresult = new lldb::SBType((const lldb::SBType &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBType_GetDereferencedType(void * jarg1) {
  void * jresult ;
  lldb::SBType *arg1 = (lldb::SBType *) 0 ;
  lldb::SBType result;
  
  arg1 = (lldb::SBType *)jarg1; 
  result = (arg1)->GetDereferencedType();
  jresult = new lldb::SBType((const lldb::SBType &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBType_GetUnqualifiedType(void * jarg1) {
  void * jresult ;
  lldb::SBType *arg1 = (lldb::SBType *) 0 ;
  lldb::SBType result;
  
  arg1 = (lldb::SBType *)jarg1; 
  result = (arg1)->GetUnqualifiedType();
  jresult = new lldb::SBType((const lldb::SBType &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBType_GetBasicType(void * jarg1, int jarg2) {
  void * jresult ;
  lldb::SBType *arg1 = (lldb::SBType *) 0 ;
  lldb::BasicType arg2 ;
  lldb::SBType result;
  
  arg1 = (lldb::SBType *)jarg1; 
  arg2 = (lldb::BasicType)jarg2; 
  result = (arg1)->GetBasicType(arg2);
  jresult = new lldb::SBType((const lldb::SBType &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBType_GetNumberOfFields(void * jarg1) {
  void * jresult ;
  lldb::SBType *arg1 = (lldb::SBType *) 0 ;
  uint32_t result;
  
  arg1 = (lldb::SBType *)jarg1; 
  result = (arg1)->GetNumberOfFields();
  jresult = new uint32_t((const uint32_t &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBType_GetNumberOfDirectBaseClasses(void * jarg1) {
  void * jresult ;
  lldb::SBType *arg1 = (lldb::SBType *) 0 ;
  uint32_t result;
  
  arg1 = (lldb::SBType *)jarg1; 
  result = (arg1)->GetNumberOfDirectBaseClasses();
  jresult = new uint32_t((const uint32_t &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBType_GetNumberOfVirtualBaseClasses(void * jarg1) {
  void * jresult ;
  lldb::SBType *arg1 = (lldb::SBType *) 0 ;
  uint32_t result;
  
  arg1 = (lldb::SBType *)jarg1; 
  result = (arg1)->GetNumberOfVirtualBaseClasses();
  jresult = new uint32_t((const uint32_t &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBType_GetFieldAtIndex(void * jarg1, void * jarg2) {
  void * jresult ;
  lldb::SBType *arg1 = (lldb::SBType *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  lldb::SBTypeMember result;
  
  arg1 = (lldb::SBType *)jarg1; 
  argp2 = (uint32_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->GetFieldAtIndex(arg2);
  jresult = new lldb::SBTypeMember((const lldb::SBTypeMember &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBType_GetDirectBaseClassAtIndex(void * jarg1, void * jarg2) {
  void * jresult ;
  lldb::SBType *arg1 = (lldb::SBType *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  lldb::SBTypeMember result;
  
  arg1 = (lldb::SBType *)jarg1; 
  argp2 = (uint32_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->GetDirectBaseClassAtIndex(arg2);
  jresult = new lldb::SBTypeMember((const lldb::SBTypeMember &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBType_GetVirtualBaseClassAtIndex(void * jarg1, void * jarg2) {
  void * jresult ;
  lldb::SBType *arg1 = (lldb::SBType *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  lldb::SBTypeMember result;
  
  arg1 = (lldb::SBType *)jarg1; 
  argp2 = (uint32_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->GetVirtualBaseClassAtIndex(arg2);
  jresult = new lldb::SBTypeMember((const lldb::SBTypeMember &)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SBType_GetName(void * jarg1) {
  char * jresult ;
  lldb::SBType *arg1 = (lldb::SBType *) 0 ;
  char *result = 0 ;
  
  arg1 = (lldb::SBType *)jarg1; 
  result = (char *)(arg1)->GetName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SBType_GetTypeClass(void * jarg1) {
  int jresult ;
  lldb::SBType *arg1 = (lldb::SBType *) 0 ;
  lldb::TypeClass result;
  
  arg1 = (lldb::SBType *)jarg1; 
  result = (lldb::TypeClass)(arg1)->GetTypeClass();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBType_GetNumberOfTemplateArguments(void * jarg1) {
  void * jresult ;
  lldb::SBType *arg1 = (lldb::SBType *) 0 ;
  uint32_t result;
  
  arg1 = (lldb::SBType *)jarg1; 
  result = (arg1)->GetNumberOfTemplateArguments();
  jresult = new uint32_t((const uint32_t &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBType_GetTemplateArgumentType(void * jarg1, void * jarg2) {
  void * jresult ;
  lldb::SBType *arg1 = (lldb::SBType *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  lldb::SBType result;
  
  arg1 = (lldb::SBType *)jarg1; 
  argp2 = (uint32_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->GetTemplateArgumentType(arg2);
  jresult = new lldb::SBType((const lldb::SBType &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SBType_GetTemplateArgumentKind(void * jarg1, void * jarg2) {
  int jresult ;
  lldb::SBType *arg1 = (lldb::SBType *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  lldb::TemplateArgumentKind result;
  
  arg1 = (lldb::SBType *)jarg1; 
  argp2 = (uint32_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (lldb::TemplateArgumentKind)(arg1)->GetTemplateArgumentKind(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBType_IsTypeComplete(void * jarg1) {
  unsigned int jresult ;
  lldb::SBType *arg1 = (lldb::SBType *) 0 ;
  bool result;
  
  arg1 = (lldb::SBType *)jarg1; 
  result = (bool)(arg1)->IsTypeComplete();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SBTypeList() {
  void * jresult ;
  lldb::SBTypeList *result = 0 ;
  
  result = (lldb::SBTypeList *)new lldb::SBTypeList();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBTypeList_IsValid(void * jarg1) {
  unsigned int jresult ;
  lldb::SBTypeList *arg1 = (lldb::SBTypeList *) 0 ;
  bool result;
  
  arg1 = (lldb::SBTypeList *)jarg1; 
  result = (bool)(arg1)->IsValid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBTypeList_Append(void * jarg1, void * jarg2) {
  lldb::SBTypeList *arg1 = (lldb::SBTypeList *) 0 ;
  lldb::SBType arg2 ;
  lldb::SBType *argp2 ;
  
  arg1 = (lldb::SBTypeList *)jarg1; 
  argp2 = (lldb::SBType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null lldb::SBType", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->Append(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBTypeList_GetTypeAtIndex(void * jarg1, void * jarg2) {
  void * jresult ;
  lldb::SBTypeList *arg1 = (lldb::SBTypeList *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  lldb::SBType result;
  
  arg1 = (lldb::SBTypeList *)jarg1; 
  argp2 = (uint32_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->GetTypeAtIndex(arg2);
  jresult = new lldb::SBType((const lldb::SBType &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBTypeList_GetSize(void * jarg1) {
  void * jresult ;
  lldb::SBTypeList *arg1 = (lldb::SBTypeList *) 0 ;
  uint32_t result;
  
  arg1 = (lldb::SBTypeList *)jarg1; 
  result = (arg1)->GetSize();
  jresult = new uint32_t((const uint32_t &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SBTypeList(void * jarg1) {
  lldb::SBTypeList *arg1 = (lldb::SBTypeList *) 0 ;
  
  arg1 = (lldb::SBTypeList *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SBTypeCategory__SWIG_0() {
  void * jresult ;
  lldb::SBTypeCategory *result = 0 ;
  
  result = (lldb::SBTypeCategory *)new lldb::SBTypeCategory();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SBTypeCategory__SWIG_1(void * jarg1) {
  void * jresult ;
  lldb::SBTypeCategory *arg1 = 0 ;
  lldb::SBTypeCategory *result = 0 ;
  
  arg1 = (lldb::SBTypeCategory *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBTypeCategory const & type is null", 0);
    return 0;
  } 
  result = (lldb::SBTypeCategory *)new lldb::SBTypeCategory((lldb::SBTypeCategory const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SBTypeCategory(void * jarg1) {
  lldb::SBTypeCategory *arg1 = (lldb::SBTypeCategory *) 0 ;
  
  arg1 = (lldb::SBTypeCategory *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBTypeCategory_IsValid(void * jarg1) {
  unsigned int jresult ;
  lldb::SBTypeCategory *arg1 = (lldb::SBTypeCategory *) 0 ;
  bool result;
  
  arg1 = (lldb::SBTypeCategory *)jarg1; 
  result = (bool)((lldb::SBTypeCategory const *)arg1)->IsValid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBTypeCategory_GetEnabled(void * jarg1) {
  unsigned int jresult ;
  lldb::SBTypeCategory *arg1 = (lldb::SBTypeCategory *) 0 ;
  bool result;
  
  arg1 = (lldb::SBTypeCategory *)jarg1; 
  result = (bool)(arg1)->GetEnabled();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBTypeCategory_SetEnabled(void * jarg1, unsigned int jarg2) {
  lldb::SBTypeCategory *arg1 = (lldb::SBTypeCategory *) 0 ;
  bool arg2 ;
  
  arg1 = (lldb::SBTypeCategory *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetEnabled(arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SBTypeCategory_GetName(void * jarg1) {
  char * jresult ;
  lldb::SBTypeCategory *arg1 = (lldb::SBTypeCategory *) 0 ;
  char *result = 0 ;
  
  arg1 = (lldb::SBTypeCategory *)jarg1; 
  result = (char *)(arg1)->GetName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBTypeCategory_GetDescription(void * jarg1, void * jarg2, int jarg3) {
  unsigned int jresult ;
  lldb::SBTypeCategory *arg1 = (lldb::SBTypeCategory *) 0 ;
  lldb::SBStream *arg2 = 0 ;
  lldb::DescriptionLevel arg3 ;
  bool result;
  
  arg1 = (lldb::SBTypeCategory *)jarg1; 
  arg2 = (lldb::SBStream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBStream & type is null", 0);
    return 0;
  } 
  arg3 = (lldb::DescriptionLevel)jarg3; 
  result = (bool)(arg1)->GetDescription(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBTypeCategory_GetNumFormats(void * jarg1) {
  void * jresult ;
  lldb::SBTypeCategory *arg1 = (lldb::SBTypeCategory *) 0 ;
  uint32_t result;
  
  arg1 = (lldb::SBTypeCategory *)jarg1; 
  result = (arg1)->GetNumFormats();
  jresult = new uint32_t((const uint32_t &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBTypeCategory_GetNumSummaries(void * jarg1) {
  void * jresult ;
  lldb::SBTypeCategory *arg1 = (lldb::SBTypeCategory *) 0 ;
  uint32_t result;
  
  arg1 = (lldb::SBTypeCategory *)jarg1; 
  result = (arg1)->GetNumSummaries();
  jresult = new uint32_t((const uint32_t &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBTypeCategory_GetNumFilters(void * jarg1) {
  void * jresult ;
  lldb::SBTypeCategory *arg1 = (lldb::SBTypeCategory *) 0 ;
  uint32_t result;
  
  arg1 = (lldb::SBTypeCategory *)jarg1; 
  result = (arg1)->GetNumFilters();
  jresult = new uint32_t((const uint32_t &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBTypeCategory_GetNumSynthetics(void * jarg1) {
  void * jresult ;
  lldb::SBTypeCategory *arg1 = (lldb::SBTypeCategory *) 0 ;
  uint32_t result;
  
  arg1 = (lldb::SBTypeCategory *)jarg1; 
  result = (arg1)->GetNumSynthetics();
  jresult = new uint32_t((const uint32_t &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBTypeCategory_GetTypeNameSpecifierForFilterAtIndex(void * jarg1, void * jarg2) {
  void * jresult ;
  lldb::SBTypeCategory *arg1 = (lldb::SBTypeCategory *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  lldb::SBTypeNameSpecifier result;
  
  arg1 = (lldb::SBTypeCategory *)jarg1; 
  argp2 = (uint32_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->GetTypeNameSpecifierForFilterAtIndex(arg2);
  jresult = new lldb::SBTypeNameSpecifier((const lldb::SBTypeNameSpecifier &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBTypeCategory_GetTypeNameSpecifierForFormatAtIndex(void * jarg1, void * jarg2) {
  void * jresult ;
  lldb::SBTypeCategory *arg1 = (lldb::SBTypeCategory *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  lldb::SBTypeNameSpecifier result;
  
  arg1 = (lldb::SBTypeCategory *)jarg1; 
  argp2 = (uint32_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->GetTypeNameSpecifierForFormatAtIndex(arg2);
  jresult = new lldb::SBTypeNameSpecifier((const lldb::SBTypeNameSpecifier &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBTypeCategory_GetTypeNameSpecifierForSummaryAtIndex(void * jarg1, void * jarg2) {
  void * jresult ;
  lldb::SBTypeCategory *arg1 = (lldb::SBTypeCategory *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  lldb::SBTypeNameSpecifier result;
  
  arg1 = (lldb::SBTypeCategory *)jarg1; 
  argp2 = (uint32_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->GetTypeNameSpecifierForSummaryAtIndex(arg2);
  jresult = new lldb::SBTypeNameSpecifier((const lldb::SBTypeNameSpecifier &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBTypeCategory_GetTypeNameSpecifierForSyntheticAtIndex(void * jarg1, void * jarg2) {
  void * jresult ;
  lldb::SBTypeCategory *arg1 = (lldb::SBTypeCategory *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  lldb::SBTypeNameSpecifier result;
  
  arg1 = (lldb::SBTypeCategory *)jarg1; 
  argp2 = (uint32_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->GetTypeNameSpecifierForSyntheticAtIndex(arg2);
  jresult = new lldb::SBTypeNameSpecifier((const lldb::SBTypeNameSpecifier &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBTypeCategory_GetFilterForType(void * jarg1, void * jarg2) {
  void * jresult ;
  lldb::SBTypeCategory *arg1 = (lldb::SBTypeCategory *) 0 ;
  lldb::SBTypeNameSpecifier arg2 ;
  lldb::SBTypeNameSpecifier *argp2 ;
  lldb::SBTypeFilter result;
  
  arg1 = (lldb::SBTypeCategory *)jarg1; 
  argp2 = (lldb::SBTypeNameSpecifier *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null lldb::SBTypeNameSpecifier", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->GetFilterForType(arg2);
  jresult = new lldb::SBTypeFilter((const lldb::SBTypeFilter &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBTypeCategory_GetFormatForType(void * jarg1, void * jarg2) {
  void * jresult ;
  lldb::SBTypeCategory *arg1 = (lldb::SBTypeCategory *) 0 ;
  lldb::SBTypeNameSpecifier arg2 ;
  lldb::SBTypeNameSpecifier *argp2 ;
  lldb::SBTypeFormat result;
  
  arg1 = (lldb::SBTypeCategory *)jarg1; 
  argp2 = (lldb::SBTypeNameSpecifier *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null lldb::SBTypeNameSpecifier", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->GetFormatForType(arg2);
  jresult = new lldb::SBTypeFormat((const lldb::SBTypeFormat &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBTypeCategory_GetSummaryForType(void * jarg1, void * jarg2) {
  void * jresult ;
  lldb::SBTypeCategory *arg1 = (lldb::SBTypeCategory *) 0 ;
  lldb::SBTypeNameSpecifier arg2 ;
  lldb::SBTypeNameSpecifier *argp2 ;
  lldb::SBTypeSummary result;
  
  arg1 = (lldb::SBTypeCategory *)jarg1; 
  argp2 = (lldb::SBTypeNameSpecifier *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null lldb::SBTypeNameSpecifier", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->GetSummaryForType(arg2);
  jresult = new lldb::SBTypeSummary((const lldb::SBTypeSummary &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBTypeCategory_GetSyntheticForType(void * jarg1, void * jarg2) {
  void * jresult ;
  lldb::SBTypeCategory *arg1 = (lldb::SBTypeCategory *) 0 ;
  lldb::SBTypeNameSpecifier arg2 ;
  lldb::SBTypeNameSpecifier *argp2 ;
  lldb::SBTypeSynthetic result;
  
  arg1 = (lldb::SBTypeCategory *)jarg1; 
  argp2 = (lldb::SBTypeNameSpecifier *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null lldb::SBTypeNameSpecifier", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->GetSyntheticForType(arg2);
  jresult = new lldb::SBTypeSynthetic((const lldb::SBTypeSynthetic &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBTypeCategory_GetFilterAtIndex(void * jarg1, void * jarg2) {
  void * jresult ;
  lldb::SBTypeCategory *arg1 = (lldb::SBTypeCategory *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  lldb::SBTypeFilter result;
  
  arg1 = (lldb::SBTypeCategory *)jarg1; 
  argp2 = (uint32_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->GetFilterAtIndex(arg2);
  jresult = new lldb::SBTypeFilter((const lldb::SBTypeFilter &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBTypeCategory_GetFormatAtIndex(void * jarg1, void * jarg2) {
  void * jresult ;
  lldb::SBTypeCategory *arg1 = (lldb::SBTypeCategory *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  lldb::SBTypeFormat result;
  
  arg1 = (lldb::SBTypeCategory *)jarg1; 
  argp2 = (uint32_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->GetFormatAtIndex(arg2);
  jresult = new lldb::SBTypeFormat((const lldb::SBTypeFormat &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBTypeCategory_GetSummaryAtIndex(void * jarg1, void * jarg2) {
  void * jresult ;
  lldb::SBTypeCategory *arg1 = (lldb::SBTypeCategory *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  lldb::SBTypeSummary result;
  
  arg1 = (lldb::SBTypeCategory *)jarg1; 
  argp2 = (uint32_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->GetSummaryAtIndex(arg2);
  jresult = new lldb::SBTypeSummary((const lldb::SBTypeSummary &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBTypeCategory_GetSyntheticAtIndex(void * jarg1, void * jarg2) {
  void * jresult ;
  lldb::SBTypeCategory *arg1 = (lldb::SBTypeCategory *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  lldb::SBTypeSynthetic result;
  
  arg1 = (lldb::SBTypeCategory *)jarg1; 
  argp2 = (uint32_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->GetSyntheticAtIndex(arg2);
  jresult = new lldb::SBTypeSynthetic((const lldb::SBTypeSynthetic &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBTypeCategory_AddTypeFormat(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  lldb::SBTypeCategory *arg1 = (lldb::SBTypeCategory *) 0 ;
  lldb::SBTypeNameSpecifier arg2 ;
  lldb::SBTypeFormat arg3 ;
  lldb::SBTypeNameSpecifier *argp2 ;
  lldb::SBTypeFormat *argp3 ;
  bool result;
  
  arg1 = (lldb::SBTypeCategory *)jarg1; 
  argp2 = (lldb::SBTypeNameSpecifier *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null lldb::SBTypeNameSpecifier", 0);
    return 0;
  }
  arg2 = *argp2; 
  argp3 = (lldb::SBTypeFormat *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null lldb::SBTypeFormat", 0);
    return 0;
  }
  arg3 = *argp3; 
  result = (bool)(arg1)->AddTypeFormat(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBTypeCategory_DeleteTypeFormat(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  lldb::SBTypeCategory *arg1 = (lldb::SBTypeCategory *) 0 ;
  lldb::SBTypeNameSpecifier arg2 ;
  lldb::SBTypeNameSpecifier *argp2 ;
  bool result;
  
  arg1 = (lldb::SBTypeCategory *)jarg1; 
  argp2 = (lldb::SBTypeNameSpecifier *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null lldb::SBTypeNameSpecifier", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)(arg1)->DeleteTypeFormat(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBTypeCategory_AddTypeSummary(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  lldb::SBTypeCategory *arg1 = (lldb::SBTypeCategory *) 0 ;
  lldb::SBTypeNameSpecifier arg2 ;
  lldb::SBTypeSummary arg3 ;
  lldb::SBTypeNameSpecifier *argp2 ;
  lldb::SBTypeSummary *argp3 ;
  bool result;
  
  arg1 = (lldb::SBTypeCategory *)jarg1; 
  argp2 = (lldb::SBTypeNameSpecifier *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null lldb::SBTypeNameSpecifier", 0);
    return 0;
  }
  arg2 = *argp2; 
  argp3 = (lldb::SBTypeSummary *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null lldb::SBTypeSummary", 0);
    return 0;
  }
  arg3 = *argp3; 
  result = (bool)(arg1)->AddTypeSummary(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBTypeCategory_DeleteTypeSummary(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  lldb::SBTypeCategory *arg1 = (lldb::SBTypeCategory *) 0 ;
  lldb::SBTypeNameSpecifier arg2 ;
  lldb::SBTypeNameSpecifier *argp2 ;
  bool result;
  
  arg1 = (lldb::SBTypeCategory *)jarg1; 
  argp2 = (lldb::SBTypeNameSpecifier *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null lldb::SBTypeNameSpecifier", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)(arg1)->DeleteTypeSummary(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBTypeCategory_AddTypeFilter(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  lldb::SBTypeCategory *arg1 = (lldb::SBTypeCategory *) 0 ;
  lldb::SBTypeNameSpecifier arg2 ;
  lldb::SBTypeFilter arg3 ;
  lldb::SBTypeNameSpecifier *argp2 ;
  lldb::SBTypeFilter *argp3 ;
  bool result;
  
  arg1 = (lldb::SBTypeCategory *)jarg1; 
  argp2 = (lldb::SBTypeNameSpecifier *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null lldb::SBTypeNameSpecifier", 0);
    return 0;
  }
  arg2 = *argp2; 
  argp3 = (lldb::SBTypeFilter *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null lldb::SBTypeFilter", 0);
    return 0;
  }
  arg3 = *argp3; 
  result = (bool)(arg1)->AddTypeFilter(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBTypeCategory_DeleteTypeFilter(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  lldb::SBTypeCategory *arg1 = (lldb::SBTypeCategory *) 0 ;
  lldb::SBTypeNameSpecifier arg2 ;
  lldb::SBTypeNameSpecifier *argp2 ;
  bool result;
  
  arg1 = (lldb::SBTypeCategory *)jarg1; 
  argp2 = (lldb::SBTypeNameSpecifier *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null lldb::SBTypeNameSpecifier", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)(arg1)->DeleteTypeFilter(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBTypeCategory_AddTypeSynthetic(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  lldb::SBTypeCategory *arg1 = (lldb::SBTypeCategory *) 0 ;
  lldb::SBTypeNameSpecifier arg2 ;
  lldb::SBTypeSynthetic arg3 ;
  lldb::SBTypeNameSpecifier *argp2 ;
  lldb::SBTypeSynthetic *argp3 ;
  bool result;
  
  arg1 = (lldb::SBTypeCategory *)jarg1; 
  argp2 = (lldb::SBTypeNameSpecifier *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null lldb::SBTypeNameSpecifier", 0);
    return 0;
  }
  arg2 = *argp2; 
  argp3 = (lldb::SBTypeSynthetic *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null lldb::SBTypeSynthetic", 0);
    return 0;
  }
  arg3 = *argp3; 
  result = (bool)(arg1)->AddTypeSynthetic(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBTypeCategory_DeleteTypeSynthetic(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  lldb::SBTypeCategory *arg1 = (lldb::SBTypeCategory *) 0 ;
  lldb::SBTypeNameSpecifier arg2 ;
  lldb::SBTypeNameSpecifier *argp2 ;
  bool result;
  
  arg1 = (lldb::SBTypeCategory *)jarg1; 
  argp2 = (lldb::SBTypeNameSpecifier *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null lldb::SBTypeNameSpecifier", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)(arg1)->DeleteTypeSynthetic(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SBTypeFilter__SWIG_0() {
  void * jresult ;
  lldb::SBTypeFilter *result = 0 ;
  
  result = (lldb::SBTypeFilter *)new lldb::SBTypeFilter();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SBTypeFilter__SWIG_1(void * jarg1) {
  void * jresult ;
  uint32_t arg1 ;
  uint32_t *argp1 ;
  lldb::SBTypeFilter *result = 0 ;
  
  argp1 = (uint32_t *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return 0;
  }
  arg1 = *argp1; 
  result = (lldb::SBTypeFilter *)new lldb::SBTypeFilter(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SBTypeFilter__SWIG_2(void * jarg1) {
  void * jresult ;
  lldb::SBTypeFilter *arg1 = 0 ;
  lldb::SBTypeFilter *result = 0 ;
  
  arg1 = (lldb::SBTypeFilter *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBTypeFilter const & type is null", 0);
    return 0;
  } 
  result = (lldb::SBTypeFilter *)new lldb::SBTypeFilter((lldb::SBTypeFilter const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SBTypeFilter(void * jarg1) {
  lldb::SBTypeFilter *arg1 = (lldb::SBTypeFilter *) 0 ;
  
  arg1 = (lldb::SBTypeFilter *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBTypeFilter_IsValid(void * jarg1) {
  unsigned int jresult ;
  lldb::SBTypeFilter *arg1 = (lldb::SBTypeFilter *) 0 ;
  bool result;
  
  arg1 = (lldb::SBTypeFilter *)jarg1; 
  result = (bool)((lldb::SBTypeFilter const *)arg1)->IsValid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBTypeFilter_IsEqualTo(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  lldb::SBTypeFilter *arg1 = (lldb::SBTypeFilter *) 0 ;
  lldb::SBTypeFilter *arg2 = 0 ;
  bool result;
  
  arg1 = (lldb::SBTypeFilter *)jarg1; 
  arg2 = (lldb::SBTypeFilter *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBTypeFilter & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->IsEqualTo(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBTypeFilter_GetNumberOfExpressionPaths(void * jarg1) {
  void * jresult ;
  lldb::SBTypeFilter *arg1 = (lldb::SBTypeFilter *) 0 ;
  uint32_t result;
  
  arg1 = (lldb::SBTypeFilter *)jarg1; 
  result = (arg1)->GetNumberOfExpressionPaths();
  jresult = new uint32_t((const uint32_t &)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SBTypeFilter_GetExpressionPathAtIndex(void * jarg1, void * jarg2) {
  char * jresult ;
  lldb::SBTypeFilter *arg1 = (lldb::SBTypeFilter *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  char *result = 0 ;
  
  arg1 = (lldb::SBTypeFilter *)jarg1; 
  argp2 = (uint32_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (char *)(arg1)->GetExpressionPathAtIndex(arg2);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBTypeFilter_ReplaceExpressionPathAtIndex(void * jarg1, void * jarg2, char * jarg3) {
  unsigned int jresult ;
  lldb::SBTypeFilter *arg1 = (lldb::SBTypeFilter *) 0 ;
  uint32_t arg2 ;
  char *arg3 = (char *) 0 ;
  uint32_t *argp2 ;
  bool result;
  
  arg1 = (lldb::SBTypeFilter *)jarg1; 
  argp2 = (uint32_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (char *)jarg3; 
  result = (bool)(arg1)->ReplaceExpressionPathAtIndex(arg2,(char const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBTypeFilter_AppendExpressionPath(void * jarg1, char * jarg2) {
  lldb::SBTypeFilter *arg1 = (lldb::SBTypeFilter *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (lldb::SBTypeFilter *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->AppendExpressionPath((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBTypeFilter_Clear(void * jarg1) {
  lldb::SBTypeFilter *arg1 = (lldb::SBTypeFilter *) 0 ;
  
  arg1 = (lldb::SBTypeFilter *)jarg1; 
  (arg1)->Clear();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBTypeFilter_GetOptions(void * jarg1) {
  void * jresult ;
  lldb::SBTypeFilter *arg1 = (lldb::SBTypeFilter *) 0 ;
  uint32_t result;
  
  arg1 = (lldb::SBTypeFilter *)jarg1; 
  result = (arg1)->GetOptions();
  jresult = new uint32_t((const uint32_t &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBTypeFilter_SetOptions(void * jarg1, void * jarg2) {
  lldb::SBTypeFilter *arg1 = (lldb::SBTypeFilter *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  arg1 = (lldb::SBTypeFilter *)jarg1; 
  argp2 = (uint32_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->SetOptions(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBTypeFilter_GetDescription(void * jarg1, void * jarg2, int jarg3) {
  unsigned int jresult ;
  lldb::SBTypeFilter *arg1 = (lldb::SBTypeFilter *) 0 ;
  lldb::SBStream *arg2 = 0 ;
  lldb::DescriptionLevel arg3 ;
  bool result;
  
  arg1 = (lldb::SBTypeFilter *)jarg1; 
  arg2 = (lldb::SBStream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBStream & type is null", 0);
    return 0;
  } 
  arg3 = (lldb::DescriptionLevel)jarg3; 
  result = (bool)(arg1)->GetDescription(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SBTypeFormat__SWIG_0() {
  void * jresult ;
  lldb::SBTypeFormat *result = 0 ;
  
  result = (lldb::SBTypeFormat *)new lldb::SBTypeFormat();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SBTypeFormat__SWIG_1(int jarg1, void * jarg2) {
  void * jresult ;
  lldb::Format arg1 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  lldb::SBTypeFormat *result = 0 ;
  
  arg1 = (lldb::Format)jarg1; 
  argp2 = (uint32_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (lldb::SBTypeFormat *)new lldb::SBTypeFormat(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SBTypeFormat__SWIG_2(int jarg1) {
  void * jresult ;
  lldb::Format arg1 ;
  lldb::SBTypeFormat *result = 0 ;
  
  arg1 = (lldb::Format)jarg1; 
  result = (lldb::SBTypeFormat *)new lldb::SBTypeFormat(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SBTypeFormat__SWIG_3(void * jarg1) {
  void * jresult ;
  lldb::SBTypeFormat *arg1 = 0 ;
  lldb::SBTypeFormat *result = 0 ;
  
  arg1 = (lldb::SBTypeFormat *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBTypeFormat const & type is null", 0);
    return 0;
  } 
  result = (lldb::SBTypeFormat *)new lldb::SBTypeFormat((lldb::SBTypeFormat const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SBTypeFormat(void * jarg1) {
  lldb::SBTypeFormat *arg1 = (lldb::SBTypeFormat *) 0 ;
  
  arg1 = (lldb::SBTypeFormat *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBTypeFormat_IsValid(void * jarg1) {
  unsigned int jresult ;
  lldb::SBTypeFormat *arg1 = (lldb::SBTypeFormat *) 0 ;
  bool result;
  
  arg1 = (lldb::SBTypeFormat *)jarg1; 
  result = (bool)((lldb::SBTypeFormat const *)arg1)->IsValid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBTypeFormat_IsEqualTo(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  lldb::SBTypeFormat *arg1 = (lldb::SBTypeFormat *) 0 ;
  lldb::SBTypeFormat *arg2 = 0 ;
  bool result;
  
  arg1 = (lldb::SBTypeFormat *)jarg1; 
  arg2 = (lldb::SBTypeFormat *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBTypeFormat & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->IsEqualTo(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SBTypeFormat_GetFormat(void * jarg1) {
  int jresult ;
  lldb::SBTypeFormat *arg1 = (lldb::SBTypeFormat *) 0 ;
  lldb::Format result;
  
  arg1 = (lldb::SBTypeFormat *)jarg1; 
  result = (lldb::Format)(arg1)->GetFormat();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBTypeFormat_GetOptions(void * jarg1) {
  void * jresult ;
  lldb::SBTypeFormat *arg1 = (lldb::SBTypeFormat *) 0 ;
  uint32_t result;
  
  arg1 = (lldb::SBTypeFormat *)jarg1; 
  result = (arg1)->GetOptions();
  jresult = new uint32_t((const uint32_t &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBTypeFormat_SetFormat(void * jarg1, int jarg2) {
  lldb::SBTypeFormat *arg1 = (lldb::SBTypeFormat *) 0 ;
  lldb::Format arg2 ;
  
  arg1 = (lldb::SBTypeFormat *)jarg1; 
  arg2 = (lldb::Format)jarg2; 
  (arg1)->SetFormat(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBTypeFormat_SetOptions(void * jarg1, void * jarg2) {
  lldb::SBTypeFormat *arg1 = (lldb::SBTypeFormat *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  arg1 = (lldb::SBTypeFormat *)jarg1; 
  argp2 = (uint32_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->SetOptions(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBTypeFormat_GetDescription(void * jarg1, void * jarg2, int jarg3) {
  unsigned int jresult ;
  lldb::SBTypeFormat *arg1 = (lldb::SBTypeFormat *) 0 ;
  lldb::SBStream *arg2 = 0 ;
  lldb::DescriptionLevel arg3 ;
  bool result;
  
  arg1 = (lldb::SBTypeFormat *)jarg1; 
  arg2 = (lldb::SBStream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBStream & type is null", 0);
    return 0;
  } 
  arg3 = (lldb::DescriptionLevel)jarg3; 
  result = (bool)(arg1)->GetDescription(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SBTypeNameSpecifier__SWIG_0() {
  void * jresult ;
  lldb::SBTypeNameSpecifier *result = 0 ;
  
  result = (lldb::SBTypeNameSpecifier *)new lldb::SBTypeNameSpecifier();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SBTypeNameSpecifier__SWIG_1(char * jarg1, unsigned int jarg2) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  bool arg2 ;
  lldb::SBTypeNameSpecifier *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (lldb::SBTypeNameSpecifier *)new lldb::SBTypeNameSpecifier((char const *)arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SBTypeNameSpecifier__SWIG_2(char * jarg1) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  lldb::SBTypeNameSpecifier *result = 0 ;
  
  arg1 = (char *)jarg1; 
  result = (lldb::SBTypeNameSpecifier *)new lldb::SBTypeNameSpecifier((char const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SBTypeNameSpecifier__SWIG_3(void * jarg1) {
  void * jresult ;
  lldb::SBType arg1 ;
  lldb::SBType *argp1 ;
  lldb::SBTypeNameSpecifier *result = 0 ;
  
  argp1 = (lldb::SBType *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null lldb::SBType", 0);
    return 0;
  }
  arg1 = *argp1; 
  result = (lldb::SBTypeNameSpecifier *)new lldb::SBTypeNameSpecifier(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SBTypeNameSpecifier__SWIG_4(void * jarg1) {
  void * jresult ;
  lldb::SBTypeNameSpecifier *arg1 = 0 ;
  lldb::SBTypeNameSpecifier *result = 0 ;
  
  arg1 = (lldb::SBTypeNameSpecifier *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBTypeNameSpecifier const & type is null", 0);
    return 0;
  } 
  result = (lldb::SBTypeNameSpecifier *)new lldb::SBTypeNameSpecifier((lldb::SBTypeNameSpecifier const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SBTypeNameSpecifier(void * jarg1) {
  lldb::SBTypeNameSpecifier *arg1 = (lldb::SBTypeNameSpecifier *) 0 ;
  
  arg1 = (lldb::SBTypeNameSpecifier *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBTypeNameSpecifier_IsValid(void * jarg1) {
  unsigned int jresult ;
  lldb::SBTypeNameSpecifier *arg1 = (lldb::SBTypeNameSpecifier *) 0 ;
  bool result;
  
  arg1 = (lldb::SBTypeNameSpecifier *)jarg1; 
  result = (bool)((lldb::SBTypeNameSpecifier const *)arg1)->IsValid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBTypeNameSpecifier_IsEqualTo(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  lldb::SBTypeNameSpecifier *arg1 = (lldb::SBTypeNameSpecifier *) 0 ;
  lldb::SBTypeNameSpecifier *arg2 = 0 ;
  bool result;
  
  arg1 = (lldb::SBTypeNameSpecifier *)jarg1; 
  arg2 = (lldb::SBTypeNameSpecifier *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBTypeNameSpecifier & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->IsEqualTo(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SBTypeNameSpecifier_GetName(void * jarg1) {
  char * jresult ;
  lldb::SBTypeNameSpecifier *arg1 = (lldb::SBTypeNameSpecifier *) 0 ;
  char *result = 0 ;
  
  arg1 = (lldb::SBTypeNameSpecifier *)jarg1; 
  result = (char *)(arg1)->GetName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBTypeNameSpecifier_GetType(void * jarg1) {
  void * jresult ;
  lldb::SBTypeNameSpecifier *arg1 = (lldb::SBTypeNameSpecifier *) 0 ;
  lldb::SBType result;
  
  arg1 = (lldb::SBTypeNameSpecifier *)jarg1; 
  result = (arg1)->GetType();
  jresult = new lldb::SBType((const lldb::SBType &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBTypeNameSpecifier_IsRegex(void * jarg1) {
  unsigned int jresult ;
  lldb::SBTypeNameSpecifier *arg1 = (lldb::SBTypeNameSpecifier *) 0 ;
  bool result;
  
  arg1 = (lldb::SBTypeNameSpecifier *)jarg1; 
  result = (bool)(arg1)->IsRegex();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBTypeNameSpecifier_GetDescription(void * jarg1, void * jarg2, int jarg3) {
  unsigned int jresult ;
  lldb::SBTypeNameSpecifier *arg1 = (lldb::SBTypeNameSpecifier *) 0 ;
  lldb::SBStream *arg2 = 0 ;
  lldb::DescriptionLevel arg3 ;
  bool result;
  
  arg1 = (lldb::SBTypeNameSpecifier *)jarg1; 
  arg2 = (lldb::SBStream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBStream & type is null", 0);
    return 0;
  } 
  arg3 = (lldb::DescriptionLevel)jarg3; 
  result = (bool)(arg1)->GetDescription(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SBTypeSummary__SWIG_0() {
  void * jresult ;
  lldb::SBTypeSummary *result = 0 ;
  
  result = (lldb::SBTypeSummary *)new lldb::SBTypeSummary();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBTypeSummary_CreateWithSummaryString__SWIG_0(char * jarg1, void * jarg2) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  lldb::SBTypeSummary result;
  
  arg1 = (char *)jarg1; 
  argp2 = (uint32_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = lldb::SBTypeSummary::CreateWithSummaryString((char const *)arg1,arg2);
  jresult = new lldb::SBTypeSummary((const lldb::SBTypeSummary &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBTypeSummary_CreateWithSummaryString__SWIG_1(char * jarg1) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  lldb::SBTypeSummary result;
  
  arg1 = (char *)jarg1; 
  result = lldb::SBTypeSummary::CreateWithSummaryString((char const *)arg1);
  jresult = new lldb::SBTypeSummary((const lldb::SBTypeSummary &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBTypeSummary_CreateWithFunctionName__SWIG_0(char * jarg1, void * jarg2) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  lldb::SBTypeSummary result;
  
  arg1 = (char *)jarg1; 
  argp2 = (uint32_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = lldb::SBTypeSummary::CreateWithFunctionName((char const *)arg1,arg2);
  jresult = new lldb::SBTypeSummary((const lldb::SBTypeSummary &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBTypeSummary_CreateWithFunctionName__SWIG_1(char * jarg1) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  lldb::SBTypeSummary result;
  
  arg1 = (char *)jarg1; 
  result = lldb::SBTypeSummary::CreateWithFunctionName((char const *)arg1);
  jresult = new lldb::SBTypeSummary((const lldb::SBTypeSummary &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBTypeSummary_CreateWithScriptCode__SWIG_0(char * jarg1, void * jarg2) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  lldb::SBTypeSummary result;
  
  arg1 = (char *)jarg1; 
  argp2 = (uint32_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = lldb::SBTypeSummary::CreateWithScriptCode((char const *)arg1,arg2);
  jresult = new lldb::SBTypeSummary((const lldb::SBTypeSummary &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBTypeSummary_CreateWithScriptCode__SWIG_1(char * jarg1) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  lldb::SBTypeSummary result;
  
  arg1 = (char *)jarg1; 
  result = lldb::SBTypeSummary::CreateWithScriptCode((char const *)arg1);
  jresult = new lldb::SBTypeSummary((const lldb::SBTypeSummary &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SBTypeSummary__SWIG_1(void * jarg1) {
  void * jresult ;
  lldb::SBTypeSummary *arg1 = 0 ;
  lldb::SBTypeSummary *result = 0 ;
  
  arg1 = (lldb::SBTypeSummary *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBTypeSummary const & type is null", 0);
    return 0;
  } 
  result = (lldb::SBTypeSummary *)new lldb::SBTypeSummary((lldb::SBTypeSummary const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SBTypeSummary(void * jarg1) {
  lldb::SBTypeSummary *arg1 = (lldb::SBTypeSummary *) 0 ;
  
  arg1 = (lldb::SBTypeSummary *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBTypeSummary_IsValid(void * jarg1) {
  unsigned int jresult ;
  lldb::SBTypeSummary *arg1 = (lldb::SBTypeSummary *) 0 ;
  bool result;
  
  arg1 = (lldb::SBTypeSummary *)jarg1; 
  result = (bool)((lldb::SBTypeSummary const *)arg1)->IsValid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBTypeSummary_IsEqualTo(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  lldb::SBTypeSummary *arg1 = (lldb::SBTypeSummary *) 0 ;
  lldb::SBTypeSummary *arg2 = 0 ;
  bool result;
  
  arg1 = (lldb::SBTypeSummary *)jarg1; 
  arg2 = (lldb::SBTypeSummary *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBTypeSummary & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->IsEqualTo(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBTypeSummary_IsFunctionCode(void * jarg1) {
  unsigned int jresult ;
  lldb::SBTypeSummary *arg1 = (lldb::SBTypeSummary *) 0 ;
  bool result;
  
  arg1 = (lldb::SBTypeSummary *)jarg1; 
  result = (bool)(arg1)->IsFunctionCode();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBTypeSummary_IsFunctionName(void * jarg1) {
  unsigned int jresult ;
  lldb::SBTypeSummary *arg1 = (lldb::SBTypeSummary *) 0 ;
  bool result;
  
  arg1 = (lldb::SBTypeSummary *)jarg1; 
  result = (bool)(arg1)->IsFunctionName();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBTypeSummary_IsSummaryString(void * jarg1) {
  unsigned int jresult ;
  lldb::SBTypeSummary *arg1 = (lldb::SBTypeSummary *) 0 ;
  bool result;
  
  arg1 = (lldb::SBTypeSummary *)jarg1; 
  result = (bool)(arg1)->IsSummaryString();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SBTypeSummary_GetData(void * jarg1) {
  char * jresult ;
  lldb::SBTypeSummary *arg1 = (lldb::SBTypeSummary *) 0 ;
  char *result = 0 ;
  
  arg1 = (lldb::SBTypeSummary *)jarg1; 
  result = (char *)(arg1)->GetData();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBTypeSummary_SetSummaryString(void * jarg1, char * jarg2) {
  lldb::SBTypeSummary *arg1 = (lldb::SBTypeSummary *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (lldb::SBTypeSummary *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->SetSummaryString((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBTypeSummary_SetFunctionName(void * jarg1, char * jarg2) {
  lldb::SBTypeSummary *arg1 = (lldb::SBTypeSummary *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (lldb::SBTypeSummary *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->SetFunctionName((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBTypeSummary_SetFunctionCode(void * jarg1, char * jarg2) {
  lldb::SBTypeSummary *arg1 = (lldb::SBTypeSummary *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (lldb::SBTypeSummary *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->SetFunctionCode((char const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBTypeSummary_GetOptions(void * jarg1) {
  void * jresult ;
  lldb::SBTypeSummary *arg1 = (lldb::SBTypeSummary *) 0 ;
  uint32_t result;
  
  arg1 = (lldb::SBTypeSummary *)jarg1; 
  result = (arg1)->GetOptions();
  jresult = new uint32_t((const uint32_t &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBTypeSummary_SetOptions(void * jarg1, void * jarg2) {
  lldb::SBTypeSummary *arg1 = (lldb::SBTypeSummary *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  arg1 = (lldb::SBTypeSummary *)jarg1; 
  argp2 = (uint32_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->SetOptions(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBTypeSummary_GetDescription(void * jarg1, void * jarg2, int jarg3) {
  unsigned int jresult ;
  lldb::SBTypeSummary *arg1 = (lldb::SBTypeSummary *) 0 ;
  lldb::SBStream *arg2 = 0 ;
  lldb::DescriptionLevel arg3 ;
  bool result;
  
  arg1 = (lldb::SBTypeSummary *)jarg1; 
  arg2 = (lldb::SBStream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBStream & type is null", 0);
    return 0;
  } 
  arg3 = (lldb::DescriptionLevel)jarg3; 
  result = (bool)(arg1)->GetDescription(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SBTypeSynthetic__SWIG_0() {
  void * jresult ;
  lldb::SBTypeSynthetic *result = 0 ;
  
  result = (lldb::SBTypeSynthetic *)new lldb::SBTypeSynthetic();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBTypeSynthetic_CreateWithClassName__SWIG_0(char * jarg1, void * jarg2) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  lldb::SBTypeSynthetic result;
  
  arg1 = (char *)jarg1; 
  argp2 = (uint32_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = lldb::SBTypeSynthetic::CreateWithClassName((char const *)arg1,arg2);
  jresult = new lldb::SBTypeSynthetic((const lldb::SBTypeSynthetic &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBTypeSynthetic_CreateWithClassName__SWIG_1(char * jarg1) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  lldb::SBTypeSynthetic result;
  
  arg1 = (char *)jarg1; 
  result = lldb::SBTypeSynthetic::CreateWithClassName((char const *)arg1);
  jresult = new lldb::SBTypeSynthetic((const lldb::SBTypeSynthetic &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBTypeSynthetic_CreateWithScriptCode__SWIG_0(char * jarg1, void * jarg2) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  lldb::SBTypeSynthetic result;
  
  arg1 = (char *)jarg1; 
  argp2 = (uint32_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = lldb::SBTypeSynthetic::CreateWithScriptCode((char const *)arg1,arg2);
  jresult = new lldb::SBTypeSynthetic((const lldb::SBTypeSynthetic &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBTypeSynthetic_CreateWithScriptCode__SWIG_1(char * jarg1) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  lldb::SBTypeSynthetic result;
  
  arg1 = (char *)jarg1; 
  result = lldb::SBTypeSynthetic::CreateWithScriptCode((char const *)arg1);
  jresult = new lldb::SBTypeSynthetic((const lldb::SBTypeSynthetic &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SBTypeSynthetic__SWIG_1(void * jarg1) {
  void * jresult ;
  lldb::SBTypeSynthetic *arg1 = 0 ;
  lldb::SBTypeSynthetic *result = 0 ;
  
  arg1 = (lldb::SBTypeSynthetic *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBTypeSynthetic const & type is null", 0);
    return 0;
  } 
  result = (lldb::SBTypeSynthetic *)new lldb::SBTypeSynthetic((lldb::SBTypeSynthetic const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SBTypeSynthetic(void * jarg1) {
  lldb::SBTypeSynthetic *arg1 = (lldb::SBTypeSynthetic *) 0 ;
  
  arg1 = (lldb::SBTypeSynthetic *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBTypeSynthetic_IsValid(void * jarg1) {
  unsigned int jresult ;
  lldb::SBTypeSynthetic *arg1 = (lldb::SBTypeSynthetic *) 0 ;
  bool result;
  
  arg1 = (lldb::SBTypeSynthetic *)jarg1; 
  result = (bool)((lldb::SBTypeSynthetic const *)arg1)->IsValid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBTypeSynthetic_IsEqualTo(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  lldb::SBTypeSynthetic *arg1 = (lldb::SBTypeSynthetic *) 0 ;
  lldb::SBTypeSynthetic *arg2 = 0 ;
  bool result;
  
  arg1 = (lldb::SBTypeSynthetic *)jarg1; 
  arg2 = (lldb::SBTypeSynthetic *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBTypeSynthetic & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->IsEqualTo(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBTypeSynthetic_IsClassCode(void * jarg1) {
  unsigned int jresult ;
  lldb::SBTypeSynthetic *arg1 = (lldb::SBTypeSynthetic *) 0 ;
  bool result;
  
  arg1 = (lldb::SBTypeSynthetic *)jarg1; 
  result = (bool)(arg1)->IsClassCode();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SBTypeSynthetic_GetData(void * jarg1) {
  char * jresult ;
  lldb::SBTypeSynthetic *arg1 = (lldb::SBTypeSynthetic *) 0 ;
  char *result = 0 ;
  
  arg1 = (lldb::SBTypeSynthetic *)jarg1; 
  result = (char *)(arg1)->GetData();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBTypeSynthetic_SetClassName(void * jarg1, char * jarg2) {
  lldb::SBTypeSynthetic *arg1 = (lldb::SBTypeSynthetic *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (lldb::SBTypeSynthetic *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->SetClassName((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBTypeSynthetic_SetClassCode(void * jarg1, char * jarg2) {
  lldb::SBTypeSynthetic *arg1 = (lldb::SBTypeSynthetic *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (lldb::SBTypeSynthetic *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->SetClassCode((char const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBTypeSynthetic_GetOptions(void * jarg1) {
  void * jresult ;
  lldb::SBTypeSynthetic *arg1 = (lldb::SBTypeSynthetic *) 0 ;
  uint32_t result;
  
  arg1 = (lldb::SBTypeSynthetic *)jarg1; 
  result = (arg1)->GetOptions();
  jresult = new uint32_t((const uint32_t &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBTypeSynthetic_SetOptions(void * jarg1, void * jarg2) {
  lldb::SBTypeSynthetic *arg1 = (lldb::SBTypeSynthetic *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  arg1 = (lldb::SBTypeSynthetic *)jarg1; 
  argp2 = (uint32_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->SetOptions(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBTypeSynthetic_GetDescription(void * jarg1, void * jarg2, int jarg3) {
  unsigned int jresult ;
  lldb::SBTypeSynthetic *arg1 = (lldb::SBTypeSynthetic *) 0 ;
  lldb::SBStream *arg2 = 0 ;
  lldb::DescriptionLevel arg3 ;
  bool result;
  
  arg1 = (lldb::SBTypeSynthetic *)jarg1; 
  arg2 = (lldb::SBStream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBStream & type is null", 0);
    return 0;
  } 
  arg3 = (lldb::DescriptionLevel)jarg3; 
  result = (bool)(arg1)->GetDescription(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SBValue__SWIG_0() {
  void * jresult ;
  lldb::SBValue *result = 0 ;
  
  result = (lldb::SBValue *)new lldb::SBValue();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SBValue__SWIG_1(void * jarg1) {
  void * jresult ;
  lldb::SBValue *arg1 = 0 ;
  lldb::SBValue *result = 0 ;
  
  arg1 = (lldb::SBValue *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBValue const & type is null", 0);
    return 0;
  } 
  result = (lldb::SBValue *)new lldb::SBValue((lldb::SBValue const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SBValue(void * jarg1) {
  lldb::SBValue *arg1 = (lldb::SBValue *) 0 ;
  
  arg1 = (lldb::SBValue *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBValue_IsValid(void * jarg1) {
  unsigned int jresult ;
  lldb::SBValue *arg1 = (lldb::SBValue *) 0 ;
  bool result;
  
  arg1 = (lldb::SBValue *)jarg1; 
  result = (bool)(arg1)->IsValid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBValue_Clear(void * jarg1) {
  lldb::SBValue *arg1 = (lldb::SBValue *) 0 ;
  
  arg1 = (lldb::SBValue *)jarg1; 
  (arg1)->Clear();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBValue_GetError(void * jarg1) {
  void * jresult ;
  lldb::SBValue *arg1 = (lldb::SBValue *) 0 ;
  lldb::SBError result;
  
  arg1 = (lldb::SBValue *)jarg1; 
  result = (arg1)->GetError();
  jresult = new lldb::SBError((const lldb::SBError &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBValue_GetID(void * jarg1) {
  void * jresult ;
  lldb::SBValue *arg1 = (lldb::SBValue *) 0 ;
  lldb::user_id_t result;
  
  arg1 = (lldb::SBValue *)jarg1; 
  result = (arg1)->GetID();
  jresult = new lldb::user_id_t((const lldb::user_id_t &)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SBValue_GetName(void * jarg1) {
  char * jresult ;
  lldb::SBValue *arg1 = (lldb::SBValue *) 0 ;
  char *result = 0 ;
  
  arg1 = (lldb::SBValue *)jarg1; 
  result = (char *)(arg1)->GetName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SBValue_GetTypeName(void * jarg1) {
  char * jresult ;
  lldb::SBValue *arg1 = (lldb::SBValue *) 0 ;
  char *result = 0 ;
  
  arg1 = (lldb::SBValue *)jarg1; 
  result = (char *)(arg1)->GetTypeName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_SBValue_GetByteSize(void * jarg1) {
  unsigned long jresult ;
  lldb::SBValue *arg1 = (lldb::SBValue *) 0 ;
  size_t result;
  
  arg1 = (lldb::SBValue *)jarg1; 
  result = (arg1)->GetByteSize();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBValue_IsInScope(void * jarg1) {
  unsigned int jresult ;
  lldb::SBValue *arg1 = (lldb::SBValue *) 0 ;
  bool result;
  
  arg1 = (lldb::SBValue *)jarg1; 
  result = (bool)(arg1)->IsInScope();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SBValue_GetFormat(void * jarg1) {
  int jresult ;
  lldb::SBValue *arg1 = (lldb::SBValue *) 0 ;
  lldb::Format result;
  
  arg1 = (lldb::SBValue *)jarg1; 
  result = (lldb::Format)(arg1)->GetFormat();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBValue_SetFormat(void * jarg1, int jarg2) {
  lldb::SBValue *arg1 = (lldb::SBValue *) 0 ;
  lldb::Format arg2 ;
  
  arg1 = (lldb::SBValue *)jarg1; 
  arg2 = (lldb::Format)jarg2; 
  (arg1)->SetFormat(arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SBValue_GetValue(void * jarg1) {
  char * jresult ;
  lldb::SBValue *arg1 = (lldb::SBValue *) 0 ;
  char *result = 0 ;
  
  arg1 = (lldb::SBValue *)jarg1; 
  result = (char *)(arg1)->GetValue();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBValue_GetValueAsSigned__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  lldb::SBValue *arg1 = (lldb::SBValue *) 0 ;
  lldb::SBError *arg2 = 0 ;
  int64_t arg3 ;
  int64_t *argp3 ;
  int64_t result;
  
  arg1 = (lldb::SBValue *)jarg1; 
  arg2 = (lldb::SBError *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBError & type is null", 0);
    return 0;
  } 
  argp3 = (int64_t *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null int64_t", 0);
    return 0;
  }
  arg3 = *argp3; 
  result = (arg1)->GetValueAsSigned(*arg2,arg3);
  jresult = new int64_t((const int64_t &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBValue_GetValueAsSigned__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  lldb::SBValue *arg1 = (lldb::SBValue *) 0 ;
  lldb::SBError *arg2 = 0 ;
  int64_t result;
  
  arg1 = (lldb::SBValue *)jarg1; 
  arg2 = (lldb::SBError *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBError & type is null", 0);
    return 0;
  } 
  result = (arg1)->GetValueAsSigned(*arg2);
  jresult = new int64_t((const int64_t &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBValue_GetValueAsUnsigned__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  lldb::SBValue *arg1 = (lldb::SBValue *) 0 ;
  lldb::SBError *arg2 = 0 ;
  uint64_t arg3 ;
  uint64_t *argp3 ;
  uint64_t result;
  
  arg1 = (lldb::SBValue *)jarg1; 
  arg2 = (lldb::SBError *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBError & type is null", 0);
    return 0;
  } 
  argp3 = (uint64_t *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint64_t", 0);
    return 0;
  }
  arg3 = *argp3; 
  result = (arg1)->GetValueAsUnsigned(*arg2,arg3);
  jresult = new uint64_t((const uint64_t &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBValue_GetValueAsUnsigned__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  lldb::SBValue *arg1 = (lldb::SBValue *) 0 ;
  lldb::SBError *arg2 = 0 ;
  uint64_t result;
  
  arg1 = (lldb::SBValue *)jarg1; 
  arg2 = (lldb::SBError *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBError & type is null", 0);
    return 0;
  } 
  result = (arg1)->GetValueAsUnsigned(*arg2);
  jresult = new uint64_t((const uint64_t &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBValue_GetValueAsSigned__SWIG_2(void * jarg1, void * jarg2) {
  void * jresult ;
  lldb::SBValue *arg1 = (lldb::SBValue *) 0 ;
  int64_t arg2 ;
  int64_t *argp2 ;
  int64_t result;
  
  arg1 = (lldb::SBValue *)jarg1; 
  argp2 = (int64_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null int64_t", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->GetValueAsSigned(arg2);
  jresult = new int64_t((const int64_t &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBValue_GetValueAsSigned__SWIG_3(void * jarg1) {
  void * jresult ;
  lldb::SBValue *arg1 = (lldb::SBValue *) 0 ;
  int64_t result;
  
  arg1 = (lldb::SBValue *)jarg1; 
  result = (arg1)->GetValueAsSigned();
  jresult = new int64_t((const int64_t &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBValue_GetValueAsUnsigned__SWIG_2(void * jarg1, void * jarg2) {
  void * jresult ;
  lldb::SBValue *arg1 = (lldb::SBValue *) 0 ;
  uint64_t arg2 ;
  uint64_t *argp2 ;
  uint64_t result;
  
  arg1 = (lldb::SBValue *)jarg1; 
  argp2 = (uint64_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint64_t", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->GetValueAsUnsigned(arg2);
  jresult = new uint64_t((const uint64_t &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBValue_GetValueAsUnsigned__SWIG_3(void * jarg1) {
  void * jresult ;
  lldb::SBValue *arg1 = (lldb::SBValue *) 0 ;
  uint64_t result;
  
  arg1 = (lldb::SBValue *)jarg1; 
  result = (arg1)->GetValueAsUnsigned();
  jresult = new uint64_t((const uint64_t &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SBValue_GetValueType(void * jarg1) {
  int jresult ;
  lldb::SBValue *arg1 = (lldb::SBValue *) 0 ;
  lldb::ValueType result;
  
  arg1 = (lldb::SBValue *)jarg1; 
  result = (lldb::ValueType)(arg1)->GetValueType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBValue_GetValueDidChange(void * jarg1) {
  unsigned int jresult ;
  lldb::SBValue *arg1 = (lldb::SBValue *) 0 ;
  bool result;
  
  arg1 = (lldb::SBValue *)jarg1; 
  result = (bool)(arg1)->GetValueDidChange();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SBValue_GetSummary(void * jarg1) {
  char * jresult ;
  lldb::SBValue *arg1 = (lldb::SBValue *) 0 ;
  char *result = 0 ;
  
  arg1 = (lldb::SBValue *)jarg1; 
  result = (char *)(arg1)->GetSummary();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SBValue_GetObjectDescription(void * jarg1) {
  char * jresult ;
  lldb::SBValue *arg1 = (lldb::SBValue *) 0 ;
  char *result = 0 ;
  
  arg1 = (lldb::SBValue *)jarg1; 
  result = (char *)(arg1)->GetObjectDescription();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBValue_GetDynamicValue(void * jarg1, int jarg2) {
  void * jresult ;
  lldb::SBValue *arg1 = (lldb::SBValue *) 0 ;
  lldb::DynamicValueType arg2 ;
  lldb::SBValue result;
  
  arg1 = (lldb::SBValue *)jarg1; 
  arg2 = (lldb::DynamicValueType)jarg2; 
  result = (arg1)->GetDynamicValue(arg2);
  jresult = new lldb::SBValue((const lldb::SBValue &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBValue_GetStaticValue(void * jarg1) {
  void * jresult ;
  lldb::SBValue *arg1 = (lldb::SBValue *) 0 ;
  lldb::SBValue result;
  
  arg1 = (lldb::SBValue *)jarg1; 
  result = (arg1)->GetStaticValue();
  jresult = new lldb::SBValue((const lldb::SBValue &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBValue_GetNonSyntheticValue(void * jarg1) {
  void * jresult ;
  lldb::SBValue *arg1 = (lldb::SBValue *) 0 ;
  lldb::SBValue result;
  
  arg1 = (lldb::SBValue *)jarg1; 
  result = (arg1)->GetNonSyntheticValue();
  jresult = new lldb::SBValue((const lldb::SBValue &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBValue_IsDynamic(void * jarg1) {
  unsigned int jresult ;
  lldb::SBValue *arg1 = (lldb::SBValue *) 0 ;
  bool result;
  
  arg1 = (lldb::SBValue *)jarg1; 
  result = (bool)(arg1)->IsDynamic();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SBValue_GetLocation(void * jarg1) {
  char * jresult ;
  lldb::SBValue *arg1 = (lldb::SBValue *) 0 ;
  char *result = 0 ;
  
  arg1 = (lldb::SBValue *)jarg1; 
  result = (char *)(arg1)->GetLocation();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBValue_SetValueFromCString__SWIG_0(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  lldb::SBValue *arg1 = (lldb::SBValue *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (lldb::SBValue *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->SetValueFromCString((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBValue_SetValueFromCString__SWIG_1(void * jarg1, char * jarg2, void * jarg3) {
  unsigned int jresult ;
  lldb::SBValue *arg1 = (lldb::SBValue *) 0 ;
  char *arg2 = (char *) 0 ;
  lldb::SBError *arg3 = 0 ;
  bool result;
  
  arg1 = (lldb::SBValue *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (lldb::SBError *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBError & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->SetValueFromCString((char const *)arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBValue_GetTypeFormat(void * jarg1) {
  void * jresult ;
  lldb::SBValue *arg1 = (lldb::SBValue *) 0 ;
  lldb::SBTypeFormat result;
  
  arg1 = (lldb::SBValue *)jarg1; 
  result = (arg1)->GetTypeFormat();
  jresult = new lldb::SBTypeFormat((const lldb::SBTypeFormat &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBValue_GetTypeSummary(void * jarg1) {
  void * jresult ;
  lldb::SBValue *arg1 = (lldb::SBValue *) 0 ;
  lldb::SBTypeSummary result;
  
  arg1 = (lldb::SBValue *)jarg1; 
  result = (arg1)->GetTypeSummary();
  jresult = new lldb::SBTypeSummary((const lldb::SBTypeSummary &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBValue_GetTypeFilter(void * jarg1) {
  void * jresult ;
  lldb::SBValue *arg1 = (lldb::SBValue *) 0 ;
  lldb::SBTypeFilter result;
  
  arg1 = (lldb::SBValue *)jarg1; 
  result = (arg1)->GetTypeFilter();
  jresult = new lldb::SBTypeFilter((const lldb::SBTypeFilter &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBValue_GetTypeSynthetic(void * jarg1) {
  void * jresult ;
  lldb::SBValue *arg1 = (lldb::SBValue *) 0 ;
  lldb::SBTypeSynthetic result;
  
  arg1 = (lldb::SBValue *)jarg1; 
  result = (arg1)->GetTypeSynthetic();
  jresult = new lldb::SBTypeSynthetic((const lldb::SBTypeSynthetic &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBValue_GetChildAtIndex__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  lldb::SBValue *arg1 = (lldb::SBValue *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  lldb::SBValue result;
  
  arg1 = (lldb::SBValue *)jarg1; 
  argp2 = (uint32_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->GetChildAtIndex(arg2);
  jresult = new lldb::SBValue((const lldb::SBValue &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBValue_GetChildAtIndex__SWIG_1(void * jarg1, void * jarg2, int jarg3, unsigned int jarg4) {
  void * jresult ;
  lldb::SBValue *arg1 = (lldb::SBValue *) 0 ;
  uint32_t arg2 ;
  lldb::DynamicValueType arg3 ;
  bool arg4 ;
  uint32_t *argp2 ;
  lldb::SBValue result;
  
  arg1 = (lldb::SBValue *)jarg1; 
  argp2 = (uint32_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (lldb::DynamicValueType)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (arg1)->GetChildAtIndex(arg2,arg3,arg4);
  jresult = new lldb::SBValue((const lldb::SBValue &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBValue_CreateChildAtOffset(void * jarg1, char * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  lldb::SBValue *arg1 = (lldb::SBValue *) 0 ;
  char *arg2 = (char *) 0 ;
  uint32_t arg3 ;
  lldb::SBType arg4 ;
  uint32_t *argp3 ;
  lldb::SBType *argp4 ;
  lldb::SBValue result;
  
  arg1 = (lldb::SBValue *)jarg1; 
  arg2 = (char *)jarg2; 
  argp3 = (uint32_t *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return 0;
  }
  arg3 = *argp3; 
  argp4 = (lldb::SBType *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null lldb::SBType", 0);
    return 0;
  }
  arg4 = *argp4; 
  result = (arg1)->CreateChildAtOffset((char const *)arg2,arg3,arg4);
  jresult = new lldb::SBValue((const lldb::SBValue &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBValue_Cast(void * jarg1, void * jarg2) {
  void * jresult ;
  lldb::SBValue *arg1 = (lldb::SBValue *) 0 ;
  lldb::SBType arg2 ;
  lldb::SBType *argp2 ;
  lldb::SBValue result;
  
  arg1 = (lldb::SBValue *)jarg1; 
  argp2 = (lldb::SBType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null lldb::SBType", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->Cast(arg2);
  jresult = new lldb::SBValue((const lldb::SBValue &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBValue_CreateValueFromExpression(void * jarg1, char * jarg2, char * jarg3) {
  void * jresult ;
  lldb::SBValue *arg1 = (lldb::SBValue *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  lldb::SBValue result;
  
  arg1 = (lldb::SBValue *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  result = (arg1)->CreateValueFromExpression((char const *)arg2,(char const *)arg3);
  jresult = new lldb::SBValue((const lldb::SBValue &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBValue_CreateValueFromAddress(void * jarg1, char * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  lldb::SBValue *arg1 = (lldb::SBValue *) 0 ;
  char *arg2 = (char *) 0 ;
  lldb::addr_t arg3 ;
  lldb::SBType arg4 ;
  lldb::addr_t *argp3 ;
  lldb::SBType *argp4 ;
  lldb::SBValue result;
  
  arg1 = (lldb::SBValue *)jarg1; 
  arg2 = (char *)jarg2; 
  argp3 = (lldb::addr_t *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null lldb::addr_t", 0);
    return 0;
  }
  arg3 = *argp3; 
  argp4 = (lldb::SBType *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null lldb::SBType", 0);
    return 0;
  }
  arg4 = *argp4; 
  result = (arg1)->CreateValueFromAddress((char const *)arg2,arg3,arg4);
  jresult = new lldb::SBValue((const lldb::SBValue &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBValue_CreateValueFromData(void * jarg1, char * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  lldb::SBValue *arg1 = (lldb::SBValue *) 0 ;
  char *arg2 = (char *) 0 ;
  lldb::SBData arg3 ;
  lldb::SBType arg4 ;
  lldb::SBData *argp3 ;
  lldb::SBType *argp4 ;
  lldb::SBValue result;
  
  arg1 = (lldb::SBValue *)jarg1; 
  arg2 = (char *)jarg2; 
  argp3 = (lldb::SBData *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null lldb::SBData", 0);
    return 0;
  }
  arg3 = *argp3; 
  argp4 = (lldb::SBType *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null lldb::SBType", 0);
    return 0;
  }
  arg4 = *argp4; 
  result = (arg1)->CreateValueFromData((char const *)arg2,arg3,arg4);
  jresult = new lldb::SBValue((const lldb::SBValue &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBValue_GetType(void * jarg1) {
  void * jresult ;
  lldb::SBValue *arg1 = (lldb::SBValue *) 0 ;
  lldb::SBType result;
  
  arg1 = (lldb::SBValue *)jarg1; 
  result = (arg1)->GetType();
  jresult = new lldb::SBType((const lldb::SBType &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBValue_GetIndexOfChildWithName(void * jarg1, char * jarg2) {
  void * jresult ;
  lldb::SBValue *arg1 = (lldb::SBValue *) 0 ;
  char *arg2 = (char *) 0 ;
  uint32_t result;
  
  arg1 = (lldb::SBValue *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (arg1)->GetIndexOfChildWithName((char const *)arg2);
  jresult = new uint32_t((const uint32_t &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBValue_GetChildMemberWithName__SWIG_0(void * jarg1, char * jarg2) {
  void * jresult ;
  lldb::SBValue *arg1 = (lldb::SBValue *) 0 ;
  char *arg2 = (char *) 0 ;
  lldb::SBValue result;
  
  arg1 = (lldb::SBValue *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (arg1)->GetChildMemberWithName((char const *)arg2);
  jresult = new lldb::SBValue((const lldb::SBValue &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBValue_GetChildMemberWithName__SWIG_1(void * jarg1, char * jarg2, int jarg3) {
  void * jresult ;
  lldb::SBValue *arg1 = (lldb::SBValue *) 0 ;
  char *arg2 = (char *) 0 ;
  lldb::DynamicValueType arg3 ;
  lldb::SBValue result;
  
  arg1 = (lldb::SBValue *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (lldb::DynamicValueType)jarg3; 
  result = (arg1)->GetChildMemberWithName((char const *)arg2,arg3);
  jresult = new lldb::SBValue((const lldb::SBValue &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBValue_GetValueForExpressionPath(void * jarg1, char * jarg2) {
  void * jresult ;
  lldb::SBValue *arg1 = (lldb::SBValue *) 0 ;
  char *arg2 = (char *) 0 ;
  lldb::SBValue result;
  
  arg1 = (lldb::SBValue *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (arg1)->GetValueForExpressionPath((char const *)arg2);
  jresult = new lldb::SBValue((const lldb::SBValue &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBValue_GetNumChildren(void * jarg1) {
  void * jresult ;
  lldb::SBValue *arg1 = (lldb::SBValue *) 0 ;
  uint32_t result;
  
  arg1 = (lldb::SBValue *)jarg1; 
  result = (arg1)->GetNumChildren();
  jresult = new uint32_t((const uint32_t &)result); 
  return jresult;
}


SWIGEXPORT void* SWIGSTDCALL CSharp_SBValue_GetOpaqueType(void * jarg1) {
  void* jresult ;
  lldb::SBValue *arg1 = (lldb::SBValue *) 0 ;
  void *result = 0 ;
  
  arg1 = (lldb::SBValue *)jarg1; 
  result = (void *)(arg1)->GetOpaqueType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBValue_Dereference(void * jarg1) {
  void * jresult ;
  lldb::SBValue *arg1 = (lldb::SBValue *) 0 ;
  lldb::SBValue result;
  
  arg1 = (lldb::SBValue *)jarg1; 
  result = (arg1)->Dereference();
  jresult = new lldb::SBValue((const lldb::SBValue &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBValue_AddressOf(void * jarg1) {
  void * jresult ;
  lldb::SBValue *arg1 = (lldb::SBValue *) 0 ;
  lldb::SBValue result;
  
  arg1 = (lldb::SBValue *)jarg1; 
  result = (arg1)->AddressOf();
  jresult = new lldb::SBValue((const lldb::SBValue &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBValue_TypeIsPointerType(void * jarg1) {
  unsigned int jresult ;
  lldb::SBValue *arg1 = (lldb::SBValue *) 0 ;
  bool result;
  
  arg1 = (lldb::SBValue *)jarg1; 
  result = (bool)(arg1)->TypeIsPointerType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBValue_GetTarget(void * jarg1) {
  void * jresult ;
  lldb::SBValue *arg1 = (lldb::SBValue *) 0 ;
  lldb::SBTarget result;
  
  arg1 = (lldb::SBValue *)jarg1; 
  result = (arg1)->GetTarget();
  jresult = new lldb::SBTarget((const lldb::SBTarget &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBValue_GetProcess(void * jarg1) {
  void * jresult ;
  lldb::SBValue *arg1 = (lldb::SBValue *) 0 ;
  lldb::SBProcess result;
  
  arg1 = (lldb::SBValue *)jarg1; 
  result = (arg1)->GetProcess();
  jresult = new lldb::SBProcess((const lldb::SBProcess &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBValue_GetThread(void * jarg1) {
  void * jresult ;
  lldb::SBValue *arg1 = (lldb::SBValue *) 0 ;
  lldb::SBThread result;
  
  arg1 = (lldb::SBValue *)jarg1; 
  result = (arg1)->GetThread();
  jresult = new lldb::SBThread((const lldb::SBThread &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBValue_GetFrame(void * jarg1) {
  void * jresult ;
  lldb::SBValue *arg1 = (lldb::SBValue *) 0 ;
  lldb::SBFrame result;
  
  arg1 = (lldb::SBValue *)jarg1; 
  result = (arg1)->GetFrame();
  jresult = new lldb::SBFrame((const lldb::SBFrame &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBValue_Watch(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4, void * jarg5) {
  void * jresult ;
  lldb::SBValue *arg1 = (lldb::SBValue *) 0 ;
  bool arg2 ;
  bool arg3 ;
  bool arg4 ;
  lldb::SBError *arg5 = 0 ;
  lldb::SBWatchpoint result;
  
  arg1 = (lldb::SBValue *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  arg5 = (lldb::SBError *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBError & type is null", 0);
    return 0;
  } 
  result = (arg1)->Watch(arg2,arg3,arg4,*arg5);
  jresult = new lldb::SBWatchpoint((const lldb::SBWatchpoint &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBValue_WatchPointee(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4, void * jarg5) {
  void * jresult ;
  lldb::SBValue *arg1 = (lldb::SBValue *) 0 ;
  bool arg2 ;
  bool arg3 ;
  bool arg4 ;
  lldb::SBError *arg5 = 0 ;
  lldb::SBWatchpoint result;
  
  arg1 = (lldb::SBValue *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  arg5 = (lldb::SBError *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBError & type is null", 0);
    return 0;
  } 
  result = (arg1)->WatchPointee(arg2,arg3,arg4,*arg5);
  jresult = new lldb::SBWatchpoint((const lldb::SBWatchpoint &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBValue_GetDescription(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  lldb::SBValue *arg1 = (lldb::SBValue *) 0 ;
  lldb::SBStream *arg2 = 0 ;
  bool result;
  
  arg1 = (lldb::SBValue *)jarg1; 
  arg2 = (lldb::SBStream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBStream & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->GetDescription(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBValue_GetExpressionPath__SWIG_0(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  lldb::SBValue *arg1 = (lldb::SBValue *) 0 ;
  lldb::SBStream *arg2 = 0 ;
  bool result;
  
  arg1 = (lldb::SBValue *)jarg1; 
  arg2 = (lldb::SBStream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBStream & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->GetExpressionPath(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBValue_GetPointeeData__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  lldb::SBValue *arg1 = (lldb::SBValue *) 0 ;
  uint32_t arg2 ;
  uint32_t arg3 ;
  uint32_t *argp2 ;
  uint32_t *argp3 ;
  lldb::SBData result;
  
  arg1 = (lldb::SBValue *)jarg1; 
  argp2 = (uint32_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return 0;
  }
  arg2 = *argp2; 
  argp3 = (uint32_t *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return 0;
  }
  arg3 = *argp3; 
  result = (arg1)->GetPointeeData(arg2,arg3);
  jresult = new lldb::SBData((const lldb::SBData &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBValue_GetPointeeData__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  lldb::SBValue *arg1 = (lldb::SBValue *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  lldb::SBData result;
  
  arg1 = (lldb::SBValue *)jarg1; 
  argp2 = (uint32_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->GetPointeeData(arg2);
  jresult = new lldb::SBData((const lldb::SBData &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBValue_GetPointeeData__SWIG_2(void * jarg1) {
  void * jresult ;
  lldb::SBValue *arg1 = (lldb::SBValue *) 0 ;
  lldb::SBData result;
  
  arg1 = (lldb::SBValue *)jarg1; 
  result = (arg1)->GetPointeeData();
  jresult = new lldb::SBData((const lldb::SBData &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBValue_GetData(void * jarg1) {
  void * jresult ;
  lldb::SBValue *arg1 = (lldb::SBValue *) 0 ;
  lldb::SBData result;
  
  arg1 = (lldb::SBValue *)jarg1; 
  result = (arg1)->GetData();
  jresult = new lldb::SBData((const lldb::SBData &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBValue_GetLoadAddress(void * jarg1) {
  void * jresult ;
  lldb::SBValue *arg1 = (lldb::SBValue *) 0 ;
  lldb::addr_t result;
  
  arg1 = (lldb::SBValue *)jarg1; 
  result = (arg1)->GetLoadAddress();
  jresult = new lldb::addr_t((const lldb::addr_t &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBValue_GetAddress(void * jarg1) {
  void * jresult ;
  lldb::SBValue *arg1 = (lldb::SBValue *) 0 ;
  lldb::SBAddress result;
  
  arg1 = (lldb::SBValue *)jarg1; 
  result = (arg1)->GetAddress();
  jresult = new lldb::SBAddress((const lldb::SBAddress &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBValue_GetExpressionPath__SWIG_1(void * jarg1, void * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  lldb::SBValue *arg1 = (lldb::SBValue *) 0 ;
  lldb::SBStream *arg2 = 0 ;
  bool arg3 ;
  bool result;
  
  arg1 = (lldb::SBValue *)jarg1; 
  arg2 = (lldb::SBStream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBStream & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->GetExpressionPath(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SBValueList__SWIG_0() {
  void * jresult ;
  lldb::SBValueList *result = 0 ;
  
  result = (lldb::SBValueList *)new lldb::SBValueList();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SBValueList__SWIG_1(void * jarg1) {
  void * jresult ;
  lldb::SBValueList *arg1 = 0 ;
  lldb::SBValueList *result = 0 ;
  
  arg1 = (lldb::SBValueList *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBValueList const & type is null", 0);
    return 0;
  } 
  result = (lldb::SBValueList *)new lldb::SBValueList((lldb::SBValueList const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SBValueList(void * jarg1) {
  lldb::SBValueList *arg1 = (lldb::SBValueList *) 0 ;
  
  arg1 = (lldb::SBValueList *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBValueList_IsValid(void * jarg1) {
  unsigned int jresult ;
  lldb::SBValueList *arg1 = (lldb::SBValueList *) 0 ;
  bool result;
  
  arg1 = (lldb::SBValueList *)jarg1; 
  result = (bool)((lldb::SBValueList const *)arg1)->IsValid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBValueList_Clear(void * jarg1) {
  lldb::SBValueList *arg1 = (lldb::SBValueList *) 0 ;
  
  arg1 = (lldb::SBValueList *)jarg1; 
  (arg1)->Clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBValueList_Append__SWIG_0(void * jarg1, void * jarg2) {
  lldb::SBValueList *arg1 = (lldb::SBValueList *) 0 ;
  lldb::SBValue *arg2 = 0 ;
  
  arg1 = (lldb::SBValueList *)jarg1; 
  arg2 = (lldb::SBValue *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBValue const & type is null", 0);
    return ;
  } 
  (arg1)->Append((lldb::SBValue const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBValueList_Append__SWIG_1(void * jarg1, void * jarg2) {
  lldb::SBValueList *arg1 = (lldb::SBValueList *) 0 ;
  lldb::SBValueList *arg2 = 0 ;
  
  arg1 = (lldb::SBValueList *)jarg1; 
  arg2 = (lldb::SBValueList *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBValueList const & type is null", 0);
    return ;
  } 
  (arg1)->Append((lldb::SBValueList const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBValueList_GetSize(void * jarg1) {
  void * jresult ;
  lldb::SBValueList *arg1 = (lldb::SBValueList *) 0 ;
  uint32_t result;
  
  arg1 = (lldb::SBValueList *)jarg1; 
  result = ((lldb::SBValueList const *)arg1)->GetSize();
  jresult = new uint32_t((const uint32_t &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBValueList_GetValueAtIndex(void * jarg1, void * jarg2) {
  void * jresult ;
  lldb::SBValueList *arg1 = (lldb::SBValueList *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  lldb::SBValue result;
  
  arg1 = (lldb::SBValueList *)jarg1; 
  argp2 = (uint32_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = ((lldb::SBValueList const *)arg1)->GetValueAtIndex(arg2);
  jresult = new lldb::SBValue((const lldb::SBValue &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBValueList_FindValueObjectByUID(void * jarg1, void * jarg2) {
  void * jresult ;
  lldb::SBValueList *arg1 = (lldb::SBValueList *) 0 ;
  lldb::user_id_t arg2 ;
  lldb::user_id_t *argp2 ;
  lldb::SBValue result;
  
  arg1 = (lldb::SBValueList *)jarg1; 
  argp2 = (lldb::user_id_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null lldb::user_id_t", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->FindValueObjectByUID(arg2);
  jresult = new lldb::SBValue((const lldb::SBValue &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SBWatchpoint__SWIG_0() {
  void * jresult ;
  lldb::SBWatchpoint *result = 0 ;
  
  result = (lldb::SBWatchpoint *)new lldb::SBWatchpoint();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SBWatchpoint__SWIG_1(void * jarg1) {
  void * jresult ;
  lldb::SBWatchpoint *arg1 = 0 ;
  lldb::SBWatchpoint *result = 0 ;
  
  arg1 = (lldb::SBWatchpoint *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBWatchpoint const & type is null", 0);
    return 0;
  } 
  result = (lldb::SBWatchpoint *)new lldb::SBWatchpoint((lldb::SBWatchpoint const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SBWatchpoint(void * jarg1) {
  lldb::SBWatchpoint *arg1 = (lldb::SBWatchpoint *) 0 ;
  
  arg1 = (lldb::SBWatchpoint *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBWatchpoint_IsValid(void * jarg1) {
  unsigned int jresult ;
  lldb::SBWatchpoint *arg1 = (lldb::SBWatchpoint *) 0 ;
  bool result;
  
  arg1 = (lldb::SBWatchpoint *)jarg1; 
  result = (bool)(arg1)->IsValid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBWatchpoint_GetError(void * jarg1) {
  void * jresult ;
  lldb::SBWatchpoint *arg1 = (lldb::SBWatchpoint *) 0 ;
  lldb::SBError result;
  
  arg1 = (lldb::SBWatchpoint *)jarg1; 
  result = (arg1)->GetError();
  jresult = new lldb::SBError((const lldb::SBError &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBWatchpoint_GetID(void * jarg1) {
  void * jresult ;
  lldb::SBWatchpoint *arg1 = (lldb::SBWatchpoint *) 0 ;
  lldb::watch_id_t result;
  
  arg1 = (lldb::SBWatchpoint *)jarg1; 
  result = (arg1)->GetID();
  jresult = new lldb::watch_id_t((const lldb::watch_id_t &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBWatchpoint_GetHardwareIndex(void * jarg1) {
  void * jresult ;
  lldb::SBWatchpoint *arg1 = (lldb::SBWatchpoint *) 0 ;
  int32_t result;
  
  arg1 = (lldb::SBWatchpoint *)jarg1; 
  result = (arg1)->GetHardwareIndex();
  jresult = new int32_t((const int32_t &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBWatchpoint_GetWatchAddress(void * jarg1) {
  void * jresult ;
  lldb::SBWatchpoint *arg1 = (lldb::SBWatchpoint *) 0 ;
  lldb::addr_t result;
  
  arg1 = (lldb::SBWatchpoint *)jarg1; 
  result = (arg1)->GetWatchAddress();
  jresult = new lldb::addr_t((const lldb::addr_t &)result); 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_SBWatchpoint_GetWatchSize(void * jarg1) {
  unsigned long jresult ;
  lldb::SBWatchpoint *arg1 = (lldb::SBWatchpoint *) 0 ;
  size_t result;
  
  arg1 = (lldb::SBWatchpoint *)jarg1; 
  result = (arg1)->GetWatchSize();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBWatchpoint_SetEnabled(void * jarg1, unsigned int jarg2) {
  lldb::SBWatchpoint *arg1 = (lldb::SBWatchpoint *) 0 ;
  bool arg2 ;
  
  arg1 = (lldb::SBWatchpoint *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetEnabled(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBWatchpoint_IsEnabled(void * jarg1) {
  unsigned int jresult ;
  lldb::SBWatchpoint *arg1 = (lldb::SBWatchpoint *) 0 ;
  bool result;
  
  arg1 = (lldb::SBWatchpoint *)jarg1; 
  result = (bool)(arg1)->IsEnabled();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBWatchpoint_GetHitCount(void * jarg1) {
  void * jresult ;
  lldb::SBWatchpoint *arg1 = (lldb::SBWatchpoint *) 0 ;
  uint32_t result;
  
  arg1 = (lldb::SBWatchpoint *)jarg1; 
  result = (arg1)->GetHitCount();
  jresult = new uint32_t((const uint32_t &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SBWatchpoint_GetIgnoreCount(void * jarg1) {
  void * jresult ;
  lldb::SBWatchpoint *arg1 = (lldb::SBWatchpoint *) 0 ;
  uint32_t result;
  
  arg1 = (lldb::SBWatchpoint *)jarg1; 
  result = (arg1)->GetIgnoreCount();
  jresult = new uint32_t((const uint32_t &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBWatchpoint_SetIgnoreCount(void * jarg1, void * jarg2) {
  lldb::SBWatchpoint *arg1 = (lldb::SBWatchpoint *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  arg1 = (lldb::SBWatchpoint *)jarg1; 
  argp2 = (uint32_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->SetIgnoreCount(arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SBWatchpoint_GetCondition(void * jarg1) {
  char * jresult ;
  lldb::SBWatchpoint *arg1 = (lldb::SBWatchpoint *) 0 ;
  char *result = 0 ;
  
  arg1 = (lldb::SBWatchpoint *)jarg1; 
  result = (char *)(arg1)->GetCondition();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SBWatchpoint_SetCondition(void * jarg1, char * jarg2) {
  lldb::SBWatchpoint *arg1 = (lldb::SBWatchpoint *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (lldb::SBWatchpoint *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->SetCondition((char const *)arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SBWatchpoint_GetDescription(void * jarg1, void * jarg2, int jarg3) {
  unsigned int jresult ;
  lldb::SBWatchpoint *arg1 = (lldb::SBWatchpoint *) 0 ;
  lldb::SBStream *arg2 = 0 ;
  lldb::DescriptionLevel arg3 ;
  bool result;
  
  arg1 = (lldb::SBWatchpoint *)jarg1; 
  arg2 = (lldb::SBStream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "lldb::SBStream & type is null", 0);
    return 0;
  } 
  arg3 = (lldb::DescriptionLevel)jarg3; 
  result = (bool)(arg1)->GetDescription(*arg2,arg3);
  jresult = result; 
  return jresult;
}


#ifdef __cplusplus
}
#endif

