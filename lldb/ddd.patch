Index: include/lldb/Host/Condition.h
===================================================================
--- include/lldb/Host/Condition.h	(revision 164694)
+++ include/lldb/Host/Condition.h	(working copy)
@@ -15,6 +15,7 @@
 #include <pthread.h>
 #endif
 
+#include <memory>
 #include "lldb/lldb-types.h"
 #include "lldb/Host/Mutex.h"
 
@@ -125,6 +126,10 @@
     lldb::condition_t m_condition;
 
 #endif
+private:
+    Condition(const Condition& disabled);
+    
+    const Condition& operator=(const Condition&);
 };
 
 } // namespace lldb_private
Index: include/lldb/Host/Mutex.h
===================================================================
--- include/lldb/Host/Mutex.h	(revision 164694)
+++ include/lldb/Host/Mutex.h	(working copy)
@@ -22,7 +22,7 @@
 #include <Windows.h>
 #undef GetUserName
 #endif
-
+#include <memory>
 #include <assert.h>
 
 #ifdef LLDB_CONFIGURATION_DEBUG
@@ -264,13 +264,13 @@
 
 #ifndef _POSIX_SOURCE
 #ifdef _WIN32
-    CRITICAL_SECTION* m_mutex;
+    CRITICAL_SECTION m_mutex;
 #else
     llvm::sys::MutexImpl m_mutex;
 #endif
 #endif
-
-    Mutex(const Mutex&);
+private:
+    Mutex(const Mutex& disabled);
     const Mutex& operator=(const Mutex&);
 };
 
Index: source/Host/common/Condition.cpp
===================================================================
--- source/Host/common/Condition.cpp	(revision 164694)
+++ source/Host/common/Condition.cpp	(working copy)
@@ -110,9 +110,8 @@
 
         wait = wval;
     }
-    
-    
-    int err = SleepConditionVariableCS(&m_condition, mutex.m_mutex, wait);
+      
+    int err = SleepConditionVariableCS(&m_condition, &mutex.m_mutex, wait);
 
     if (timed_out != NULL)
     {
Index: source/Host/common/Mutex.cpp
===================================================================
--- source/Host/common/Mutex.cpp	(revision 164694)
+++ source/Host/common/Mutex.cpp	(working copy)
@@ -184,8 +184,7 @@
     m_mutex()
 {
 #ifdef _WIN32
-    m_mutex = new CRITICAL_SECTION();
-    InitializeCriticalSection(m_mutex);
+    InitializeCriticalSection(&m_mutex);
 #else
     int err;
     err = ::pthread_mutex_init (&m_mutex, NULL);
@@ -206,8 +205,7 @@
     m_mutex()
 {
 #ifdef _WIN32
-    m_mutex = new CRITICAL_SECTION();
-    InitializeCriticalSection(m_mutex);
+    InitializeCriticalSection(&m_mutex);
 #else
     int err;
     ::pthread_mutexattr_t attr;
@@ -251,8 +249,8 @@
 Mutex::~Mutex()
 {
 #ifdef _WIN32
-    DeleteCriticalSection(m_mutex);
-    delete m_mutex;
+    DeleteCriticalSection(&m_mutex);
+    
 #else
     int err;
     err = ::pthread_mutex_destroy (&m_mutex);
@@ -291,9 +289,9 @@
 Mutex::Lock()
 {
 #ifdef _WIN32
-    EnterCriticalSection(m_mutex);
+    EnterCriticalSection(&m_mutex);
     return 0;
-#else
+#else 
     DEBUG_LOG ("[%4.4llx/%4.4llx] pthread_mutex_lock (%p)...\n", Host::GetCurrentProcessID(), Host::GetCurrentThreadID(), &m_mutex);
 
 #if ENABLE_MUTEX_ERROR_CHECKING
@@ -327,7 +325,7 @@
 Mutex::TryLock(const char *failure_message)
 {
 #ifdef _WIN32
-    return 0 == TryEnterCriticalSection(m_mutex);
+    return 0 == TryEnterCriticalSection(&m_mutex);
 #else
 #if ENABLE_MUTEX_ERROR_CHECKING
     error_check_mutex (&m_mutex, eMutexActionAssertInitialized);
@@ -352,7 +350,7 @@
 Mutex::Unlock()
 {
 #ifdef _WIN32
-    LeaveCriticalSection(m_mutex);
+    LeaveCriticalSection(&m_mutex);
    return 0;
 #else
 #if ENABLE_MUTEX_ERROR_CHECKING
Index: tools/driver/Driver.cpp
===================================================================
--- tools/driver/Driver.cpp	(revision 164694)
+++ tools/driver/Driver.cpp	(working copy)
@@ -33,6 +33,7 @@
 #include "lldb/API/SBTarget.h"
 #include "lldb/API/SBThread.h"
 #include "lldb/API/SBProcess.h"
+#include "Plugins/Platform/Windows/PlatformWindows.h"
 
 using namespace lldb;
 
@@ -330,6 +331,7 @@
 int
 main (int argc, char const *argv[], const char *envp[])
 {
+    PlatformSP sp(new PlatformWindows(true));    sp.reset();
 #if 1 // Enable for debug logging
     lldb::StreamSP logStream(new lldb_private::StreamCallback(LogOutput, 0));
     const char* logCategories[] = { 0 };
