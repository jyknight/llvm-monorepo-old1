Index: include/lldb/API/SBCommandInterpreter.h
===================================================================
--- include/lldb/API/SBCommandInterpreter.h	(revision 163819)
+++ include/lldb/API/SBCommandInterpreter.h	(working copy)
@@ -26,6 +26,8 @@
         eBroadcastBitAsynchronousErrorData  = (1 << 4)
     };
 
+    SBCommandInterpreter ();
+
     SBCommandInterpreter (const lldb::SBCommandInterpreter &rhs);
     
     const lldb::SBCommandInterpreter &
@@ -112,7 +114,7 @@
 private:
     friend class SBDebugger;
 
-    SBCommandInterpreter (lldb_private::CommandInterpreter *interpreter_ptr = NULL);   // Access using SBDebugger::GetCommandInterpreter();
+    SBCommandInterpreter (lldb_private::CommandInterpreter *interpreter_ptr);   // Access using SBDebugger::GetCommandInterpreter();
 
     static void
     InitializeSWIG ();
Index: include/lldb/Host/Mutex.h
===================================================================
--- include/lldb/Host/Mutex.h	(revision 163819)
+++ include/lldb/Host/Mutex.h	(working copy)
@@ -16,6 +16,11 @@
 #ifdef _POSIX_SOURCE
 #include <pthread.h>
 #endif
+#ifdef _WIN32
+#define WIN32_LEAN_AND_MEAN
+#define NOMINMAX
+#include <Windows.h>
+#endif
 
 #include <assert.h>
 
@@ -257,8 +262,12 @@
 #endif
 
 #ifndef _POSIX_SOURCE
+#ifdef _WIN32
+    CRITICAL_SECTION* m_mutex;
+#else
     llvm::sys::MutexImpl m_mutex;
 #endif
+#endif
 
     Mutex(const Mutex&);
     const Mutex& operator=(const Mutex&);
Index: source/API/SBCommandInterpreter.cpp
===================================================================
--- source/API/SBCommandInterpreter.cpp	(revision 163819)
+++ source/API/SBCommandInterpreter.cpp	(working copy)
@@ -29,6 +29,10 @@
 using namespace lldb_private;
 
 
+SBCommandInterpreter::SBCommandInterpreter() 
+{
+}
+
 SBCommandInterpreter::SBCommandInterpreter (CommandInterpreter *interpreter) :
     m_opaque_ptr (interpreter)
 {
Index: source/Core/Windows.cpp
===================================================================
--- source/Core/Windows.cpp	(revision 163822)
+++ source/Core/Windows.cpp	(working copy)
@@ -163,12 +163,12 @@
 
 long long int strtoll(const char *nptr, char **endptr, int base)
 {
-    return 0;
+    return _strtoi64(nptr, endptr, base);
 }
 
 unsigned long long int strtoull(const char *nptr, char **endptr, int base)
 {
-    return 0;
+    return _strtoui64(nptr, endptr, base);
 }
 
 //char* realpath( const char * name, char * resolved )
Index: source/Host/common/Condition.cpp
===================================================================
--- source/Host/common/Condition.cpp	(revision 163819)
+++ source/Host/common/Condition.cpp	(working copy)
@@ -104,11 +104,15 @@
 {
 #ifdef _WIN32
     DWORD wait = INFINITE;
-    if (abstime != NULL)
-        wait = tv2ms(abstime->GetAsTimeVal());
+    if (abstime != NULL) {
+        int wval = (*abstime - TimeValue::Now()) / 1000000;
+        if (wval < 0) wval = 0;
 
-    int err = SleepConditionVariableCS(&m_condition, (PCRITICAL_SECTION)&mutex,
-        wait);
+        wait = wval;
+    }
+    
+    
+    int err = SleepConditionVariableCS(&m_condition, mutex.m_mutex, wait);
 
     if (timed_out != NULL)
     {
Index: source/Host/common/Mutex.cpp
===================================================================
--- source/Host/common/Mutex.cpp	(revision 163901)
+++ source/Host/common/Mutex.cpp	(working copy)
@@ -183,7 +183,10 @@
 Mutex::Mutex () :
     m_mutex()
 {
-#ifdef _POSIX_SOURCE
+#ifdef _WIN32
+    m_mutex = new CRITICAL_SECTION();
+    InitializeCriticalSection(m_mutex);
+#else
     int err;
     err = ::pthread_mutex_init (&m_mutex, NULL);
 #if ENABLE_MUTEX_ERROR_CHECKING
@@ -202,7 +205,10 @@
 Mutex::Mutex (Mutex::Type type) :
     m_mutex()
 {
-#ifdef _POSIX_SOURCE
+#ifdef _WIN32
+    m_mutex = new CRITICAL_SECTION();
+    InitializeCriticalSection(m_mutex);
+#else
     int err;
     ::pthread_mutexattr_t attr;
     err = ::pthread_mutexattr_init (&attr);
@@ -244,7 +250,10 @@
 //----------------------------------------------------------------------
 Mutex::~Mutex()
 {
-#ifdef _POSIX_SOURCE
+#ifdef _WIN32
+    DeleteCriticalSection(m_mutex);
+    delete m_mutex;
+#else
     int err;
     err = ::pthread_mutex_destroy (&m_mutex);
 #if ENABLE_MUTEX_ERROR_CHECKING
@@ -281,7 +290,10 @@
 int
 Mutex::Lock()
 {
-#ifdef _POSIX_SOURCE
+#ifdef _WIN32
+    EnterCriticalSection(m_mutex);
+    return 0;
+#else
     DEBUG_LOG ("[%4.4llx/%4.4llx] pthread_mutex_lock (%p)...\n", Host::GetCurrentProcessID(), Host::GetCurrentThreadID(), &m_mutex);
 
 #if ENABLE_MUTEX_ERROR_CHECKING
@@ -301,7 +313,6 @@
     DEBUG_LOG ("[%4.4llx/%4.4llx] pthread_mutex_lock (%p) => %i\n", Host::GetCurrentProcessID(), Host::GetCurrentThreadID(), &m_mutex, err);
     return err;
 #endif
-    return m_mutex.acquire();
 }
 
 //----------------------------------------------------------------------
@@ -315,7 +326,9 @@
 int
 Mutex::TryLock(const char *failure_message)
 {
-#ifdef _POSIX_SOURCE
+#ifdef _WIN32
+    return 0 == TryEnterCriticalSection(m_mutex);
+#else
 #if ENABLE_MUTEX_ERROR_CHECKING
     error_check_mutex (&m_mutex, eMutexActionAssertInitialized);
 #endif
@@ -324,7 +337,6 @@
     DEBUG_LOG ("[%4.4llx/%4.4llx] pthread_mutex_trylock (%p) => %i\n", Host::GetCurrentProcessID(), Host::GetCurrentThreadID(), &m_mutex, err);
     return err;
 #endif
-    return 0 == m_mutex.tryacquire(); // try acquire returns <> 0 for success
 }
 
 //----------------------------------------------------------------------
@@ -339,7 +351,10 @@
 int
 Mutex::Unlock()
 {
-#ifdef _POSIX_SOURCE
+#ifdef _WIN32
+    LeaveCriticalSection(m_mutex);
+   return 0;
+#else
 #if ENABLE_MUTEX_ERROR_CHECKING
     error_check_mutex (&m_mutex, eMutexActionAssertInitialized);
 #endif
@@ -356,7 +371,6 @@
     DEBUG_LOG ("[%4.4llx/%4.4llx] pthread_mutex_unlock (%p) => %i\n", Host::GetCurrentProcessID(), Host::GetCurrentThreadID(), &m_mutex, err);
     return err;
 #endif
-    return m_mutex.release();
 }
 
 #ifdef LLDB_CONFIGURATION_DEBUG
