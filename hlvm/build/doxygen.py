from SCons.Environment import Environment as Environment
from SCons.Defaults import Mkdir
import re,fileinput,os,glob
from string import join as sjoin
from os.path import join as pjoin
from os.path import exists

def getHeaders(env):
  context = pjoin(env['AbsSrcRoot'],'hlvm')
  result = []
  for d in glob.glob(pjoin(context,'*.h')):
    if not os.path.isdir(d):
      if not d == pjoin(context,'dg.exp'):
        result.append(d)
  return result

def SiteExpAction(target,source,env):
  srcpath = pjoin(env['AbsSrcRoot'],'docs')
  objpath = pjoin(env['AbsObjRoot'],'docs')
  if not exists(objpath):
    env.Execute(Mkdir(objpath))
  if not exists(pjoin(objpath,'Doxyfile'):

  env.Execute(Copy(pjoin(srcpath,'doxygen.css'),pjoin(objpath,'doxygen.css')))

	$(Echo) "Running Doxygen (be patient)"
	$(Verb) cp $(PROJ_SRC_DIR)/doxygen.css doxygen.css
	$(Verb) doxygen Doxyfile >doxygen.out 2>&1
	$(Verb) cp $(PROJ_SRC_DIR)/doxygen.css apis/html
  outf = open(pjoin(tgtpath,'site.exp'),"w")
  outf.write('## these variables are automatically generated by make ##\n')
  outf.write('# Do not edit here.  If you wish to override these values\n')
  outf.write('# edit the last section\n')
  outf.write('set target_triplet "fubar-pc-noos"\n')
  outf.write('set srcdir "' + env['AbsSrcRoot'] + '/test"\n')
  outf.write('set objdir "' + env['AbsObjRoot'] + '/test"\n')
  outf.write('set tmpdir "$objdir/tmp"\n')
  outf.write('set srcrootdir "' + env['AbsSrcRoot'] + '"\n')
  outf.write('set objrootdir "' + env['AbsObjRoot'] + '"\n')
  outf.write('## All vars above are generated by scons. Do Not Edit!\n')
  outf.close()
  return 0

def SiteExpMessage(target,source,env):
  return "Building DejaGnu site.exp file"

def DoxygenAction(target,source,env):
  context = os.path.basename(env.File(target[0]).path)
  context = re.sub('(.*?)\..*','\\1',context)
  print "context=",context
  os.system('cd ' + pjoin(env['BuildDir'],'test') +
      '; DEJAGNU="'+pjoin(env['AbsObjRoot'],'test','site.exp')+'" '+
      env['RUNTEST'] + ' --tool ' + context)
  return 0

def DoxygenMessage(target,source,env):
  return "Creating API Documentation With Doxygen (be patient)"

def Doxygen(env):
  if env['DOXYGEN'] == None:
    print "Documentation generation disabled because 'doxygen' was not found"
    return 0
  doxyAction = env.Action(DoxygenAction,DoxygenMessage)
  doxygenBuilder = env.Builder(action=doxyAction)
  env.Append(BUILDERS = {'Check':checkBuilder,'SiteExp':sitexpBuilder})
  env.Doxygen('#docs/doxygen.tar.gz','#docs/Doxyfile','#docs/doxygen.css',
    '#docs/doxygen.header','#docs/doxygen.footer','#docs/doxygen.intro']+
    getHeaders(env))
  env.Alias('doxygen','#docs/doxygen.tar.gz')
  return 1

